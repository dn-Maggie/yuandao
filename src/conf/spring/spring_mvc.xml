<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	">
	<!-- 为controller加上自动代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- controller包(自动注入) -->
	<context:component-scan base-package="com.dongnao.workbench.*.controller" />
	

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
<!-- **********开启注解***********
spring3.1之前DefaultAnnotionHandlerMapping AnnotionMethodHandlerAdapter 
spring3.1之后RequestMappingHandlerMapping RequestMappingHandlerAdapter -->
	<!-- 启动Spring MVC 的注解功能,完成请求和注解POJO的映射 即启用@RequestMapping -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />  <!-- json转换器 -->
			</list>
		</property>
	</bean>
	


	<!-- 视图解析器对模型视图名称的解析,即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="10"/>
	</bean>
	<!-- jsp视图解析器 ，定义跳转的文件的前后缀-->
	<!-- <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
			<property name="prefix" value="/"/>
			<property name="suffix" value=".jsp"/>
			<property name="order" value="10"/>
		</bean>        

		velocity视图解析器
		<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
			<property name="cache" value="true"/>
			<property name="prefix" value="/"/>
			<property name="suffix" value=".vm"/>
			<property name="order" value="1"/>
		</bean> -->
 
	<!-- 附件上传-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize" value="209715200"/><!-- 200M -->  
		<!-- <property name="resolveLazily" value="true"/> -->
	</bean>
		
	<bean class="com.dongnao.workbench.common.filter.RightFilter">
		<property name="uriList">
			<list>
				<value>/error.jsp</value>
				<value>/login.do</value>
				<value>/logout.do</value>
				<value>/tologin.do</value>
				<value>/appLogin.do</value>
				<value>/varifyCode.do</value>
				<value>/uploadExcelData.do</value>
				<value>/userHomePage.do</value>
			</list>
		</property>
	</bean>
   <!-- Enables the Spring MVC @Controller programming model --> 
	<mvc:annotation-driven />


  
	<!-- 拦截器配置 -
			cron表达式:Seconds Minutes Hours DayofMonth Month DayofWeek
			说明:
				Seconds:可出现,-  *  / 四个字符,有效范围为0-59的整数.
				Minutes:可出现,-  *  / 四个字符,有效范围为0-59的整数.
				Hours:可出现,-  *  / 四个字符,有效范围为0-23的整数.
				DayofMonth:可出现,-  *  / ? L W C八个字符,有效范围为0-31的整数.
				Month:可出现,-  *  / 四个字符,有效范围为1-12的整数或JAN-DEc.
				DayofWeek:可出现,-  *  / ? L C #四个字符,有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一,依次类推.
				Year:可出现,-  *  / 四个字符,有效范围为1970-2099年.

				*:表示匹配该域的任意值,假如在Minutes域使用*,即表示每分钟都会触发事件.
				?:只能用在DayofMonth和DayofWeek两个域.它也匹配域的任意值.
				-:表示范围,例如在Minutes域使用5-20,表示从5分到20分钟每分钟触发一次.
				/:表示起始时间开始触发，然后每隔固定时间触发一次.例如在秒字段中“5/15”代表从第 5 秒开始,每 15 秒一次.
				L:表示最后,只能出现在DayofWeek和DayofMonth域,如果在DayofWeek域使用5L,意味着在最后的一个星期四触发.
				W:表示有效工作日(周一到周五),只能出现在DayofMonth域,系统将在离指定日期的最近的有效工作日触发事件.
				例如:在DayofMonth使用5W,如果5日是星期六,则将在最近的工作日:星期五,即4日触发.如果5日是星期天,则在6日触发;
				如果5日在星期一到星期五中的一天,则就在5日触发.另外一点:W的最近寻找不会跨过月份.
				LW:这两个字符可以连用,表示在某个月最后一个工作日,即最后一个星期五.
				#:用于确定每个月第几个星期几,只能出现在DayofMonth域.例如在4#2,表示某月的第二个星期三.

				这里一定要注意Month DayofWeek,这两个字段可能是互斥的，如果其中一个指定了具体的值（包括*），则另外一个
				就不能再用*，必须用?

			举例:
				"0 0 12 * * ? "			每天12点运行
				"0 15 10 ? * *"			每天10:15运行
				"0 15 10 * * ?"			每天10:15运行
				"0 15 10 * * ? *"		每天10:15运行
				"0 15 10 * * ? 2008"	在2008年的每天10：15运行
				"0 * 14 * * ?"			每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59
				"0 0/5 14 * * ?"		每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55
				"0 15 10 ? * MON-FRI"	每周一，二，三，四，五的10:15分运行
				"0 15 10 L * ?"			每月最后一天10:15分运行
				"0 15 10 ? * 6L"		每月最后一个星期五10:15分运行

				10,15,20,25 * * * * ?	每分钟的第10秒开始，然后间隔5秒执行一次，一直到这一分钟的第25秒停止
		-->
</beans>