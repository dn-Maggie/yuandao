<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:tx="http://www.springframework.org/schema/tx" 
xmlns:aop="http://www.springframework.org/schema/aop" 
xmlns:cache="http://www.springframework.org/schema/cache"
xmlns:p="http://www.springframework.org/schema/p"
xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/cache 

http://www.springframework.org/schema/cache/spring-cache.xsd"
>
	
<!-- 创建动态数据源 -->
	<bean id="dataSource" class="com.dongnao.workbench.common.util.DynamicDataSource">  
		<property name="targetDataSources">  
		    <map key-type="java.lang.String">  
		        <entry key="read" value-ref="selectDataSource" />  
		        <entry key="write" value-ref="editDataSource" />  
		    </map>  
		</property>  
		<property name="defaultTargetDataSource" ref="selectDataSource" />  
	</bean>
	
	<!-- 建立查询数据源 -->
	<bean id="selectDataSource" class="com.dongnao.workbench.common.util.RsaPassword"  destroy-method="close">  
	    <property name="driverClassName" value="${driverClassName_r}" />  
	    <property name="url" value="${jdbc_url_r}" />  
	    <property name="username" value="${jdbc_username_r}" />  
	    <property name="password" value="${jdbc_password_r}" />
	    
	    <!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能    回收-->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>  
	<!--创建操作数据源 -->  
	<bean id="editDataSource" class="com.dongnao.workbench.common.util.RsaPassword" destroy-method="close">  
	    <property name="driverClassName" value="${driverClassName_w}" />  
	    <property name="url" value="${jdbc_url_w}" />  
	    <property name="username" value="${jdbc_username_w}" />  
	    <property name="password" value="${jdbc_password_w}" />  
	    
	    
	    <!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	    
	</bean>  
<!-- 动态数据源  end -->

	<!-- 物理分页拦截器 -->
	<bean id="paginationInterceptor" class="com.dongnao.workbench.common.page.PaginationInterceptor"></bean>  
	
	<!-- mybatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录，省略Configuration.xml里手工配置 -->
		<property name="mapperLocations" value="classpath:com/dongnao/workbench/*/mapping/*.xml" />
		<property name="plugins">  
			<ref bean="paginationInterceptor"/>  
		</property> 
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 --> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dongnao.workbench.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- 配置事务管理器 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="datagrid*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.dongnao.workbench.*.service.*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" order="2"/>
		
		<!-- 
		<aop:aspect id="aopCommonAspect" ref="com.dongnao.workbench.wsi.utils.CommonAspect">
		<aop:pointcut id="dESCipherPointcut"
				expression="execution(* com.dongnao.workbench.wsi.services.*.*(..))" />
			服务端：传入的数据解密，传出的数据加密
			<aop:around pointcut-ref="dESCipherPointcut" method="dESCipherDecrypt" />
		</aop:aspect> -->
	</aop:config>
	
	<bean id="setDatasouse" class="com.dongnao.workbench.common.util.SetDatasourse"></bean>
	<aop:config>
		<!-- 切面： 将哪个对象中的哪个方法，织入到哪个切入点 -->
        <aop:pointcut id="logPointcut" expression="execution(* com.dongnao.workbench.*.service.*Impl.*(..))" />
		<!--设置数据源 -->
        <aop:aspect id="dsetDatasouse" ref="setDatasouse" order="1">
       		<aop:before method="setDynamicDatasource" pointcut-ref="transactionPointcut"/>
       	</aop:aspect>
	 </aop:config>
	 
	 <!-- 支持 @AspectJ 标记 -->
	<aop:aspectj-autoproxy />
	
	 
</beans>