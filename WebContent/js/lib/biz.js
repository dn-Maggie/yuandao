 /**
  * @namespace biz 
  * @version 5.1
  * @description 工具会取此处的版本信息
  */
/*
 * jquery resize事件只对window有效，通过此插件增强其使用范围，能监听div的resize事件；
 * 目前此功能用于grid自适应大小功能改进
 */
/*!
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery resize event
//
// *Version: 1.1, Last updated: 3/14/2010*
//
// Project Home - http://benalman.com/projects/jquery-resize-plugin/
// GitHub       - http://github.com/cowboy/jquery-resize/
// Source       - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.js
// (Minified)   - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.min.js (1.0kb)
//
// About: License
//
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
//
// About: Examples
//
// This working example, complete with fully commented code, illustrates a few
// ways in which this plugin can be used.
//
// resize event - http://benalman.com/code/projects/jquery-resize/examples/resize/
//
// About: Support and Testing
//
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
//
// jQuery Versions - 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome, Opera 9.6-10.1.
// Unit Tests      - http://benalman.com/code/projects/jquery-resize/unit/
//
// About: Release History
//
// 1.1 - (3/14/2010) Fixed a minor bug that was causing the event to trigger
//       immediately after bind in some circumstances. Also changed $.fn.data
//       to $.data to improve performance.
// 1.0 - (2/10/2010) Initial release

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.

  // A jQuery object containing all non-window elements to which the resize
  // event is bound.
  var elems = $([]),

    // Extend $.resize if it already exists, otherwise create it.
    jq_resize = $.resize = $.extend( $.resize, {} ),

    timeout_id,

    // Reused strings.
    str_setTimeout = 'setTimeout',
    str_resize = 'resize',
    str_data = str_resize + '-special-event',
    str_delay = 'delay',
    str_throttle = 'throttleWindow';

  // Property: jQuery.resize.delay
  //
  // The numeric interval (in milliseconds) at which the resize event polling
  // loop executes. Defaults to 250.

  jq_resize[ str_delay ] = 250;

  // Property: jQuery.resize.throttleWindow
  //
  // Throttle the native window object resize event to fire no more than once
  // every <jQuery.resize.delay> milliseconds. Defaults to true.
  //
  // Because the window object has its own resize event, it doesn't need to be
  // provided by this plugin, and its execution can be left entirely up to the
  // browser. However, since certain browsers fire the resize event continuously
  // while others do not, enabling this will throttle the window resize event,
  // making event behavior consistent across all elements in all browsers.
  //
  // While setting this property to false will disable window object resize
  // event throttling, please note that this property must be changed before any
  // window object resize event callbacks are bound.

  jq_resize[ str_throttle ] = true;

  // Event: resize event
  //
  // Fired when an element's width or height changes. Because browsers only
  // provide this event for the window element, for other elements a polling
  // loop is initialized, running every <jQuery.resize.delay> milliseconds
  // to see if elements' dimensions have changed. You may bind with either
  // .resize( fn ) or .bind( "resize", fn ), and unbind with .unbind( "resize" ).
  //
  // Usage:
  //
  // > jQuery('selector').bind( 'resize', function(e) {
  // >   // element's width or height has changed!
  // >   ...
  // > });
  //
  // Additional Notes:
  //
  // * The polling loop is not created until at least one callback is actually
  //   bound to the 'resize' event, and this single polling loop is shared
  //   across all elements.
  //
  // Double firing issue in jQuery 1.3.2:
  //
  // While this plugin works in jQuery 1.3.2, if an element's event callbacks
  // are manually triggered via .trigger( 'resize' ) or .resize() those
  // callbacks may double-fire, due to limitations in the jQuery 1.3.2 special
  // events system. This is not an issue when using jQuery 1.4+.
  //
  // > // While this works in jQuery 1.4+
  // > $(elem).css({ width: new_w, height: new_h }).resize();
  // >
  // > // In jQuery 1.3.2, you need to do this:
  // > var elem = $(elem);
  // > elem.css({ width: new_w, height: new_h });
  // > elem.data( 'resize-special-event', { width: elem.width(), height: elem.height() } );
  // > elem.resize();

  $.event.special[ str_resize ] = {

    // Called only when the first 'resize' event callback is bound per element.
    setup: function() {
      // Since window has its own native 'resize' event, return false so that
      // jQuery will bind the event using DOM methods. Since only 'window'
      // objects have a .setTimeout method, this should be a sufficient test.
      // Unless, of course, we're throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }

      var elem = $(this);

      // Add this element to the list of internal elements to monitor.
      elems = elems.add( elem );

      // Initialize data store on the element.
      $.data( this, str_data, { w: elem.width(), h: elem.height() } );

      // If this is the first element added, start the polling loop.
      if ( elems.length === 1 ) {
        loopy();
      }
    },

    // Called only when the last 'resize' event callback is unbound per element.
    teardown: function() {
      // Since window has its own native 'resize' event, return false so that
      // jQuery will unbind the event using DOM methods. Since only 'window'
      // objects have a .setTimeout method, this should be a sufficient test.
      // Unless, of course, we're throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }

      var elem = $(this);

      // Remove this element from the list of internal elements to monitor.
      elems = elems.not( elem );

      // Remove any data stored on the element.
      elem.removeData( str_data );

      // If this is the last element removed, stop the polling loop.
      if ( !elems.length ) {
        clearTimeout( timeout_id );
      }
    },

    // Called every time a 'resize' event callback is bound per element (new in
    // jQuery 1.4).
    add: function( handleObj ) {
      // Since window has its own native 'resize' event, return false so that
      // jQuery doesn't modify the event object. Unless, of course, we're
      // throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }

      var old_handler;

      // The new_handler function is executed every time the event is triggered.
      // This is used to update the internal element data store with the width
      // and height when the event is triggered manually, to avoid double-firing
      // of the event callback. See the "Double firing issue in jQuery 1.3.2"
      // comments above for more information.

      function new_handler( e, w, h ) {
        var elem = $(this),
          data = $.data( this, str_data );

        // If called from the polling loop, w and h will be passed in as
        // arguments. If called manually, via .trigger( 'resize' ) or .resize(),
        // those values will need to be computed.
        data.w = w !== undefined ? w : elem.width();
        data.h = h !== undefined ? h : elem.height();

        old_handler.apply( this, arguments );
      };

      // This may seem a little complicated, but it normalizes the special event
      // .add method between jQuery 1.4/1.4.1 and 1.4.2+
      if ( $.isFunction( handleObj ) ) {
        // 1.4, 1.4.1
        old_handler = handleObj;
        return new_handler;
      } else {
        // 1.4.2+
        old_handler = handleObj.handler;
        handleObj.handler = new_handler;
      }
    }

  };

  function loopy() {

    // Start the polling loop, asynchronously.
    timeout_id = window[ str_setTimeout ](function(){

      // Iterate over all elements to which the 'resize' event is bound.
      elems.each(function(){
        var elem = $(this),
          width = elem.width(),
          height = elem.height(),
          data = $.data( this, str_data );

        // If element size has changed since the last time, update the element
        // data store and trigger the 'resize' event.
        if ( width !== data.w || height !== data.h ) {
          elem.trigger( str_resize, [ data.w = width, data.h = height ] );
        }

      });

      // Loop.
      loopy();

    }, jq_resize[ str_delay ] );

  };

})(jQuery,this);
/*  Bizfoundation ui 5.1
 *  biz.metadata.js dom对象提取元数据，即取到一个元素对象的相关属性
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


 /*
 * Metadata - jQuery plugin for parsing metadata from elements
 *
 * Copyright (c) 2006 John Resig, Yehuda Katz, J�örn Zaefferer, Paul McLanahan
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id: jquery.metadata.js,v 1.1 2012/05/25 02:36:18 zhanghp Exp $
 *
 */

/**
 * Sets the type of metadata to use. Metadata is encoded in JSON, and each property
 * in the JSON will become a property of the element itself.
 *
 * There are four supported types of metadata storage:
 *
 *   attr:  Inside an attribute. The name parameter indicates *which* attribute.
 *
 *   class: Inside the class attribute, wrapped in curly braces: { }
 *
 *   elem:  Inside a child element (e.g. a script tag). The
 *          name parameter indicates *which* element.
 *   html5: Values are stored in data-* attributes.
 *
 * The metadata for an element is loaded the first time the element is accessed via jQuery.
 *
 * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements
 * matched by expr, then redefine the metadata type and run another $(expr) for other elements.
 *
 * @name $.metadata.setType
 *
 * @example <p id="one" class="some_class {item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("class")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from the class attribute
 *
 * @example <p id="one" class="some_class" data="{item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("attr", "data")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a "data" attribute
 *
 * @example <p id="one" class="some_class"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>
 * @before $.metadata.setType("elem", "script")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a nested script element
 *
 * @example <p id="one" class="some_class" data-item_id="1" data-item_label="Label">This is a p</p>
 * @before $.metadata.setType("html5")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a series of data-* attributes
 *
 * @param String type The encoding type
 * @param String name The name of the attribute to be used to get metadata (optional)
 * @cat Plugins/Metadata
 * @descr Sets the type of encoding to be used when loading metadata for the first time
 * @type undefined
 * @see metadata()
 */

(function($) {

    $.extend({
        metadata : {
            defaults : {
                type: 'class',
                name: 'metadata',
                cre: /({.*})/,
                single: 'metadata'
            },
            setType: function( type, name ){
                this.defaults.type = type;
                this.defaults.name = name;
            },
            get: function( elem, opts ){
                var settings = $.extend({},this.defaults,opts);
                // check for empty string in single property
                if ( !settings.single.length ) settings.single = 'metadata';

                var data = $.data(elem, settings.single);
                // returned cached data if it already exists
                if ( data ) return data;

                data = "{}";

                var getData = function(data) {
                    if(typeof data != "string") return data;

                    if( data.indexOf('{') < 0 ) {
                        data = eval("(" + data + ")");
                    }
                }

                var getObject = function(data) {
                    if(typeof data != "string") return data;

                    data = eval("(" + data + ")");
                    return data;
                }

                if ( settings.type == "html5" ) {
                    var object = {};
                    $( elem.attributes ).each(function() {
                        var name = this.nodeName;
                        if(name.match(/^data-/)) name = name.replace(/^data-/, '');
                        else return true;
                        object[name] = getObject(this.nodeValue);
                    });
                } else {
                    if ( settings.type == "class" ) {
                        var m = settings.cre.exec( elem.className );
                        if ( m )
                            data = m[1];
                    } else if ( settings.type == "elem" ) {
                        if( !elem.getElementsByTagName ) return;
                        var e = elem.getElementsByTagName(settings.name);
                        if ( e.length )
                            data = $.trim(e[0].innerHTML);
                    } else if ( elem.getAttribute != undefined ) {
                        var attr = elem.getAttribute( settings.name );
                        if ( attr )
                            data = attr;
                    }
                    object = getObject(data.indexOf("{") < 0 ? "{" + data + "}" : data);
                }

                $.data( elem, settings.single, object );
                return object;
            }
        }
    });

    /**
     * Returns the metadata object for the first member of the jQuery object.
     *
     * @name metadata
     * @descr Returns element's metadata object
     * @param Object opts An object contianing settings to override the defaults
     * @type jQuery
     * @cat Plugins/Metadata
     */
    $.fn.metadata = function( opts ){
        return $.metadata.get( this[0], opts );
    };

})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.tmpl.js 模板JS，用于生成组件的HTML代码
 *  Depends:
 *    biz.jquery.js
 */

/*!
 * jQuery Templates Plugin 1.0.0pre
 * http://github.com/jquery/jquery-tmpl
 * Requires jQuery 1.4.2
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */
(function( jQuery, undefined ){
    var oldManip = jQuery.fn.domManip, tmplItmAtt = "_tmplitem", htmlExpr = /^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,
        newTmplItems = {}, wrappedItems = {}, appendToTmplItems, topTmplItem = { key: 0, data: {} }, itemKey = 0, cloneIndex = 0, stack = [];

    function newTmplItem( options, parentItem, fn, data ) {
        // Returns a template item data structure for a new rendered instance of a template (a 'template item').
        // The content field is a hierarchical array of strings and nested items (to be
        // removed and replaced by nodes field of dom elements, once inserted in DOM).
        var newItem = {
            data: data || (data === 0 || data === false) ? data : (parentItem ? parentItem.data : {}),
            _wrap: parentItem ? parentItem._wrap : null,
            tmpl: null,
            parent: parentItem || null,
            nodes: [],
            calls: tiCalls,
            nest: tiNest,
            wrap: tiWrap,
            html: tiHtml,
            update: tiUpdate
        };
        if ( options ) {
            jQuery.extend( newItem, options, { nodes: [], parent: parentItem });
        }
        if ( fn ) {
            // Build the hierarchical content to be used during insertion into DOM
            newItem.tmpl = fn;
            newItem._ctnt = newItem._ctnt || newItem.tmpl( jQuery, newItem );
            newItem.key = ++itemKey;
            // Keep track of new template item, until it is stored as jQuery Data on DOM element
            (stack.length ? wrappedItems : newTmplItems)[itemKey] = newItem;
        }
        return newItem;
    }

    // Override appendTo etc., in order to provide support for targeting multiple elements. (This code would disappear if integrated in jquery core).
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var ret = [], insert = jQuery( selector ), elems, i, l, tmplItems,
                parent = this.length === 1 && this[0].parentNode;

            appendToTmplItems = newTmplItems || {};
            if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
                insert[ original ]( this[0] );
                ret = this;
            } else {
                for ( i = 0, l = insert.length; i < l; i++ ) {
                    cloneIndex = i;
                    elems = (i > 0 ? this.clone(true) : this).get();
                    jQuery( insert[i] )[ original ]( elems );
                    ret = ret.concat( elems );
                }
                cloneIndex = 0;
                ret = this.pushStack( ret, name, insert.selector );
            }
            tmplItems = appendToTmplItems;
            appendToTmplItems = null;
            jQuery.tmpl.complete( tmplItems );
            return ret;
        };
    });

    jQuery.fn.extend({
        // Use first wrapped element as template markup.
        // Return wrapped set of template items, obtained by rendering template against data.
        tmpl: function( data, options, parentItem ) {
            return jQuery.tmpl( this[0], data, options, parentItem );
        },

        // Find which rendered template item the first wrapped DOM element belongs to
        tmplItem: function() {
            return jQuery.tmplItem( this[0] );
        },

        // Consider the first wrapped element as a template declaration, and get the compiled template or store it as a named template.
        template: function( name ) {
            return jQuery.template( name, this[0] );
        },

        domManip: function( args, table, callback, options ) {
            if ( args[0] && jQuery.isArray( args[0] )) {
                var dmArgs = jQuery.makeArray( arguments ), elems = args[0], elemsLength = elems.length, i = 0, tmplItem;
                while ( i < elemsLength && !(tmplItem = jQuery.data( elems[i++], "tmplItem" ))) {}
                if ( tmplItem && cloneIndex ) {
                    dmArgs[2] = function( fragClone ) {
                        // Handler called by oldManip when rendered template has been inserted into DOM.
                        jQuery.tmpl.afterManip( this, fragClone, callback );
                    };
                }
                oldManip.apply( this, dmArgs );
            } else {
                oldManip.apply( this, arguments );
            }
            cloneIndex = 0;
            if ( !appendToTmplItems ) {
                jQuery.tmpl.complete( newTmplItems );
            }
            return this;
        }
    });

    jQuery.extend({
        // Return wrapped set of template items, obtained by rendering template against data.
        tmpl: function( tmpl, data, options, parentItem ) {
            var ret, topLevel = !parentItem;
            if ( topLevel ) {
                // This is a top-level tmpl call (not from a nested template using {{tmpl}})
                parentItem = topTmplItem;
                tmpl = jQuery.template[tmpl] || jQuery.template( null, tmpl );
                wrappedItems = {}; // Any wrapped items will be rebuilt, since this is top level
            } else if ( !tmpl ) {
                // The template item is already associated with DOM - this is a refresh.
                // Re-evaluate rendered template for the parentItem
                tmpl = parentItem.tmpl;
                newTmplItems[parentItem.key] = parentItem;
                parentItem.nodes = [];
                if ( parentItem.wrapped ) {
                    updateWrapped( parentItem, parentItem.wrapped );
                }
                // Rebuild, without creating a new template item
                return jQuery( build( parentItem, null, parentItem.tmpl( jQuery, parentItem ) ));
            }
            if ( !tmpl ) {
                return []; // Could throw...
            }
            if ( typeof data === "function" ) {
                data = data.call( parentItem || {} );
            }
            if ( options && options.wrapped ) {
                updateWrapped( options, options.wrapped );
            }
            ret = jQuery.isArray( data ) ?
                jQuery.map( data, function( dataItem ) {
                    return dataItem ? newTmplItem( options, parentItem, tmpl, dataItem ) : null;
                }) :
                [ newTmplItem( options, parentItem, tmpl, data ) ];
            return topLevel ? jQuery( build( parentItem, null, ret ) ) : ret;
        },

        // Return rendered template item for an element.
        tmplItem: function( elem ) {
            var tmplItem;
            if ( elem instanceof jQuery ) {
                elem = elem[0];
            }
            while ( elem && elem.nodeType === 1 && !(tmplItem = jQuery.data( elem, "tmplItem" )) && (elem = elem.parentNode) ) {}
            return tmplItem || topTmplItem;
        },

        // Set:
        // Use $.template( name, tmpl ) to cache a named template,
        // where tmpl is a template string, a script element or a jQuery instance wrapping a script element, etc.
        // Use $( "selector" ).template( name ) to provide access by name to a script block template declaration.

        // Get:
        // Use $.template( name ) to access a cached template.
        // Also $( selectorToScriptBlock ).template(), or $.template( null, templateString )
        // will return the compiled template, without adding a name reference.
        // If templateString includes at least one HTML tag, $.template( templateString ) is equivalent
        // to $.template( null, templateString )
        template: function( name, tmpl ) {
            if (tmpl) {
                // Compile template and associate with name
                if ( typeof tmpl === "string" ) {
                    // This is an HTML string being passed directly in.
                    tmpl = buildTmplFn( tmpl );
                } else if ( tmpl instanceof jQuery ) {
                    tmpl = tmpl[0] || {};
                }
                if ( tmpl.nodeType ) {
                    // If this is a template block, use cached copy, or generate tmpl function and cache.
                    tmpl = jQuery.data( tmpl, "tmpl" ) || jQuery.data( tmpl, "tmpl", buildTmplFn( tmpl.innerHTML ));
                    // Issue: In IE, if the container element is not a script block, the innerHTML will remove quotes from attribute values whenever the value does not include white space.
                    // This means that foo="${x}" will not work if the value of x includes white space: foo="${x}" -> foo=value of x.
                    // To correct this, include space in tag: foo="${ x }" -> foo="value of x"
                }
                return typeof name === "string" ? (jQuery.template[name] = tmpl) : tmpl;
            }
            // Return named compiled template
            return name ? (typeof name !== "string" ? jQuery.template( null, name ):
                (jQuery.template[name] ||
                    // If not in map, and not containing at least on HTML tag, treat as a selector.
                    // (If integrated with core, use quickExpr.exec)
                    jQuery.template( null, htmlExpr.test( name ) ? name : jQuery( name )))) : null;
        },

        encode: function( text ) {
            // Do HTML encoding replacing < > & and ' and " by corresponding entities.
            return ("" + text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;");
        }
    });

    jQuery.extend( jQuery.tmpl, {
        tag: {
            "tmpl": {
                _default: { $2: "null" },
                open: "if($notnull_1){__=__.concat($item.nest($1,$2));}"
                // tmpl target parameter can be of type function, so use $1, not $1a (so not auto detection of functions)
                // This means that {{tmpl foo}} treats foo as a template (which IS a function).
                // Explicit parens can be used if foo is a function that returns a template: {{tmpl foo()}}.
            },
            "wrap": {
                _default: { $2: "null" },
                open: "$item.calls(__,$1,$2);__=[];",
                close: "call=$item.calls();__=call._.concat($item.wrap(call,__));"
            },
            "each": {
                _default: { $2: "$index, $value" },
                open: "if($notnull_1){$.each($1a,function($2){with(this){",
                close: "}});}"
            },
            "if": {
                open: "if(($notnull_1) && $1a){",
                close: "}"
            },
            "else": {
                _default: { $1: "true" },
                open: "}else if(($notnull_1) && $1a){"
            },
            "html": {
                // Unecoded expression evaluation.
                open: "if($notnull_1){__.push($1a);}"
            },
            "=": {
                // Encoded expression evaluation. Abbreviated form is ${}.
                _default: { $1: "$data" },
                open: "if($notnull_1){__.push($.encode($1a));}"
            },
            "!": {
                // Comment tag. Skipped by parser
                open: ""
            }
        },

        // This stub can be overridden, e.g. in jquery.tmplPlus for providing rendered events
        complete: function( items ) {
            newTmplItems = {};
        },

        // Call this from code which overrides domManip, or equivalent
        // Manage cloning/storing template items etc.
        afterManip: function afterManip( elem, fragClone, callback ) {
            // Provides cloned fragment ready for fixup prior to and after insertion into DOM
            var content = fragClone.nodeType === 11 ?
                jQuery.makeArray(fragClone.childNodes) :
                fragClone.nodeType === 1 ? [fragClone] : [];

            // Return fragment to original caller (e.g. append) for DOM insertion
            callback.call( elem, fragClone );

            // Fragment has been inserted:- Add inserted nodes to tmplItem data structure. Replace inserted element annotations by jQuery.data.
            storeTmplItems( content );
            cloneIndex++;
        }
    });

    //========================== Private helper functions, used by code above ==========================

    function build( tmplItem, nested, content ) {
        // Convert hierarchical content into flat string array
        // and finally return array of fragments ready for DOM insertion
        var frag, ret = content ? jQuery.map( content, function( item ) {
            return (typeof item === "string") ?
                // Insert template item annotations, to be converted to jQuery.data( "tmplItem" ) when elems are inserted into DOM.
                (tmplItem.key ? item.replace( /(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g, "$1 " + tmplItmAtt + "=\"" + tmplItem.key + "\" $2" ) : item) :
                // This is a child template item. Build nested template.
                build( item, tmplItem, item._ctnt );
        }) :
            // If content is not defined, insert tmplItem directly. Not a template item. May be a string, or a string array, e.g. from {{html $item.html()}}.
            tmplItem;
        if ( nested ) {
            return ret;
        }

        // top-level template
        ret = ret.join("");

        // Support templates which have initial or final text nodes, or consist only of text
        // Also support HTML entities within the HTML markup.
        ret.replace( /^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/, function( all, before, middle, after) {
            frag = jQuery( middle ).get();

            storeTmplItems( frag );
            if ( before ) {
                frag = unencode( before ).concat(frag);
            }
            if ( after ) {
                frag = frag.concat(unencode( after ));
            }
        });
        return frag ? frag : unencode( ret );
    }

    function unencode( text ) {
        // Use createElement, since createTextNode will not render HTML entities correctly
        var el = document.createElement( "div" );
        el.innerHTML = text;
        return jQuery.makeArray(el.childNodes);
    }

    // Generate a reusable function that will serve to render a template against data
    function buildTmplFn( markup ) {
        return new Function("jQuery","$item",
            // Use the variable __ to hold a string array while building the compiled template. (See https://github.com/jquery/jquery-tmpl/issues#issue/10).
            "var $=jQuery,call,__=[],$data=$item.data;" +

                // Introduce the data as local variables using with(){}
                "with($data){__.push('" +

                // Convert the template into pure JavaScript
                jQuery.trim(markup)
                    .replace( /([\\'])/g, "\\$1" )
                    .replace( /[\r\t\n]/g, " " )
                    .replace( /\$\{([^\}]*)\}/g, "{{= $1}}" )
                    .replace( /\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,
                    function( all, slash, type, fnargs, target, parens, args ) {
                        var tag = jQuery.tmpl.tag[ type ], def, expr, exprAutoFnDetect;
                        if ( !tag ) {
                            throw "Unknown template tag: " + type;
                        }
                        def = tag._default || [];
                        if ( parens && !/\w$/.test(target)) {
                            target += parens;
                            parens = "";
                        }
                        if ( target ) {
                            target = unescape( target );
                            args = args ? ("," + unescape( args ) + ")") : (parens ? ")" : "");
                            // Support for target being things like a.toLowerCase();
                            // In that case don't call with template item as 'this' pointer. Just evaluate...
                            expr = parens ? (target.indexOf(".") > -1 ? target + unescape( parens ) : ("(" + target + ").call($item" + args)) : target;
                            exprAutoFnDetect = parens ? expr : "(typeof(" + target + ")==='function'?(" + target + ").call($item):(" + target + "))";
                        } else {
                            exprAutoFnDetect = expr = def.$1 || "null";
                        }
                        fnargs = unescape( fnargs );
                        return "');" +
                            tag[ slash ? "close" : "open" ]
                                .split( "$notnull_1" ).join( target ? "typeof(" + target + ")!=='undefined' && (" + target + ")!=null" : "true" )
                                .split( "$1a" ).join( exprAutoFnDetect )
                                .split( "$1" ).join( expr )
                                .split( "$2" ).join( fnargs || def.$2 || "" ) +
                            "__.push('";
                    }) +
                "');}return __;"
        );
    }
    function updateWrapped( options, wrapped ) {
        // Build the wrapped content.
        options._wrap = build( options, true,
            // Suport imperative scenario in which options.wrapped can be set to a selector or an HTML string.
            jQuery.isArray( wrapped ) ? wrapped : [htmlExpr.test( wrapped ) ? wrapped : jQuery( wrapped ).html()]
        ).join("");
    }

    function unescape( args ) {
        return args ? args.replace( /\\'/g, "'").replace(/\\\\/g, "\\" ) : null;
    }
    function outerHtml( elem ) {
        var div = document.createElement("div");
        div.appendChild( elem.cloneNode(true) );
        return div.innerHTML;
    }

    // Store template items in jQuery.data(), ensuring a unique tmplItem data data structure for each rendered template instance.
    function storeTmplItems( content ) {
        var keySuffix = "_" + cloneIndex, elem, elems, newClonedItems = {}, i, l, m;
        for ( i = 0, l = content.length; i < l; i++ ) {
            if ( (elem = content[i]).nodeType !== 1 ) {
                continue;
            }
            elems = elem.getElementsByTagName("*");
            for ( m = elems.length - 1; m >= 0; m-- ) {
                processItemKey( elems[m] );
            }
            processItemKey( elem );
        }
        function processItemKey( el ) {
            var pntKey, pntNode = el, pntItem, tmplItem, key;
            // Ensure that each rendered template inserted into the DOM has its own template item,
            if ( (key = el.getAttribute( tmplItmAtt ))) {
                while ( pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute( tmplItmAtt ))) { }
                if ( pntKey !== key ) {
                    // The next ancestor with a _tmplitem expando is on a different key than this one.
                    // So this is a top-level element within this template item
                    // Set pntNode to the key of the parentNode, or to 0 if pntNode.parentNode is null, or pntNode is a fragment.
                    pntNode = pntNode.parentNode ? (pntNode.nodeType === 11 ? 0 : (pntNode.getAttribute( tmplItmAtt ) || 0)) : 0;
                    if ( !(tmplItem = newTmplItems[key]) ) {
                        // The item is for wrapped content, and was copied from the temporary parent wrappedItem.
                        tmplItem = wrappedItems[key];
                        tmplItem = newTmplItem( tmplItem, newTmplItems[pntNode]||wrappedItems[pntNode] );
                        tmplItem.key = ++itemKey;
                        newTmplItems[itemKey] = tmplItem;
                    }
                    if ( cloneIndex ) {
                        cloneTmplItem( key );
                    }
                }
                el.removeAttribute( tmplItmAtt );
            } else if ( cloneIndex && (tmplItem = jQuery.data( el, "tmplItem" )) ) {
                // This was a rendered element, cloned during append or appendTo etc.
                // TmplItem stored in jQuery data has already been cloned in cloneCopyEvent. We must replace it with a fresh cloned tmplItem.
                cloneTmplItem( tmplItem.key );
                newTmplItems[tmplItem.key] = tmplItem;
                pntNode = jQuery.data( el.parentNode, "tmplItem" );
                pntNode = pntNode ? pntNode.key : 0;
            }
            if ( tmplItem ) {
                pntItem = tmplItem;
                // Find the template item of the parent element.
                // (Using !=, not !==, since pntItem.key is number, and pntNode may be a string)
                while ( pntItem && pntItem.key != pntNode ) {
                    // Add this element as a top-level node for this rendered template item, as well as for any
                    // ancestor items between this item and the item of its parent element
                    pntItem.nodes.push( el );
                    pntItem = pntItem.parent;
                }
                // Delete content built during rendering - reduce API surface area and memory use, and avoid exposing of stale data after rendering...
                delete tmplItem._ctnt;
                delete tmplItem._wrap;
                // Store template item as jQuery data on the element
                jQuery.data( el, "tmplItem", tmplItem );
            }
            function cloneTmplItem( key ) {
                key = key + keySuffix;
                tmplItem = newClonedItems[key] =
                    (newClonedItems[key] || newTmplItem( tmplItem, newTmplItems[tmplItem.parent.key + keySuffix] || tmplItem.parent ));
            }
        }
    }

    //---- Helper functions for template item ----

    function tiCalls( content, tmpl, data, options ) {
        if ( !content ) {
            return stack.pop();
        }
        stack.push({ _: content, tmpl: tmpl, item:this, data: data, options: options });
    }

    function tiNest( tmpl, data, options ) {
        // nested template, using {{tmpl}} tag
        return jQuery.tmpl( jQuery.template( tmpl ), data, options, this );
    }

    function tiWrap( call, wrapped ) {
        // nested template, using {{wrap}} tag
        var options = call.options || {};
        options.wrapped = wrapped;
        // Apply the template, which may incorporate wrapped content,
        return jQuery.tmpl( jQuery.template( call.tmpl ), call.data, options, call.item );
    }

    function tiHtml( filter, textOnly ) {
        var wrapped = this._wrap;
        return jQuery.map(
            jQuery( jQuery.isArray( wrapped ) ? wrapped.join("") : wrapped ).filter( filter || "*" ),
            function(e) {
                return textOnly ?
                    e.innerText || e.textContent :
                    e.outerHTML || outerHtml(e);
            });
    }

    function tiUpdate() {
        var coll = this.nodes;
        jQuery.tmpl( null, null, null, this).insertBefore( coll[0] );
        jQuery( coll ).remove();
    }
})( jQuery );

$.template("optionTmpl",
        '<option value="${value}">${name}</option>');
$.template("checkboxTmpl",
        '<label><input type="checkbox" class="checkbox" name="${name}" value="${value}"/><span>${label}</span></label>');
$.template("radioTmpl",
        '<label><input type="radio" class="radio" name="${name}" value="${value}"/><span>${label}</span></label>');
$.template("notFound",
        '<div><h1>The data you wanted can\'t be found, please try again!</h1></div>');
$.template("btnTmpl",
        '<button type="button">${label}</button>');
$.template("textTmpl",
        '<label><span>${label}</span><input type="text" name="${name}" value="${value}"/></label>');
$.template("hiddenTmpl",
        '<input {{if id}} id="${id}" {{/if}} type="hidden" name="${name}" value="${value}"/>');
$.template("avatarTmpl",
        '{{if url}}<a href="{{= url}}">{{/if}}<dl><dt title="{{= email}}"></dt><dd>{{= username}}</dd></dl>{{if url}}</a>{{/if}}');
$.template("editBtnTmpl",
        '<button {{if id}}id="edit-{{= id}}"{{/if}} action="edit">Edit</button>');
$.template("delBtnTmpl",
        '<button {{if id}}id="delete-{{= id}}"{{/if}} action="del">Delete</button>');
$.template("addBtnTmpl",
        '<button {{if id}}id="add-{{= id}}"{{/if}} action="add">Add</button>');
$.template("listCItems",
        '<li><a href="#" action="topic" id="item-${id}">${title}</a><p>by ${author} at <span class="timestamp" title="${dateCreated}"></span></p></li>');
$.template("listItems",
        '<li><a href="#" action="topic" id="item-${id}">${title}</a>by ${author} at <span class="timestamp" title="${dateCreated}"></span></li>');
$.template("anchorTmpl",
        '<li><a href="#${id}">${label}</a></li>');
$.template("crumbItems",
        '<li><a href="#" {{if id}}id="${id}"{{/if}} {{if goto}}goto="${goto}"{{/if}} {{if action}}action="${action}"{{/if}} title="${description}">${label}</a></li>');
$.template("boxTmpl",
        '<div {{if id}}id="${id}"{{/if}}><h3>{{if wrap}}<strong>${label}</strong>{{else}}${label}{{/if}}{{if goto}}<a href="#" goto="${goto}">more ${String.toLowerCase(label)}</a>{{/if}}</h3>{{if tag}}<${tag}></${tag}>{{/if}}</div>');


/*  Bizfoundation ui 5.1
 *  biz.json2.js 包含json的stringify和parse方法
 */ 


/*
    http://www.JSON.org/json2.js
    2011-02-23

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, strict: false, regexp: false */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    "use strict";

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ?
                this.getUTCFullYear()     + '-' +
                f(this.getUTCMonth() + 1) + '-' +
                f(this.getUTCDate())      + 'T' +
                f(this.getUTCHours())     + ':' +
                f(this.getUTCMinutes())   + ':' +
                f(this.getUTCSeconds())   + 'Z' : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0 ? '{}' : gap ?
                '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
                '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function' ?
                    walk({'': j}, '') : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
/*  Bizfoundation ui 5.1
 *  biz.ui.core.js 包括biz核心代码及jquery ui核心代码
 *
 *  Includes:
 *  biz.ui.base.js
 *  jquery ui:
 *      jquery.ui.core.js
 *	    jquery.ui.widget.js
 *      jquery.ui.button.js
 *	    jquery.ui.draggable.js
 *	    jquery.ui.mouse.js
 *	    jquery.ui.position.js
 *	    jquery.ui.resizable.js
 *      jquery.ui.droppables.js
 *
 *  Depends:
 *  biz.jquery.js
 * /
/****************************************biz.ui.base*************************************************/
/**
 * @namespace biz
 * @name jdh
 * @version 5.1
 */

/**
 * 声明biz包
 * @author: jdh
 */
var biz = biz || {version: "5.1"};



/**
 * @description {Method} init
 * 初始化，获取浏览器、操作系统信息
 * @param {Object}
 */
biz.init=function(win){
    //win = win || window;
    win = window;

    biz.doc=document;

    //win.undefined = win.undefined;

    var ua = win.navigator.userAgent.toLowerCase();

    biz.isIE = ua.indexOf("msie") > -1;
    biz.isIE7 = ua.indexOf("msie 7") > -1;
    biz.isIE8 = ua.indexOf("msie 8") > -1;
    biz.isIE9 = ua.indexOf("msie 9") > -1;

    biz.isFF = ua.indexOf("firefox") > -1 ;
    biz.isFF1 = ua.indexOf("firefox/1") > -1 ;
    biz.isFF2 = ua.indexOf("firefox/2") > -1 ;
    biz.isFF3 = ua.indexOf("firefox/3") > -1 ;

    biz.isOpera = ua.indexOf("opera") > -1;

    biz.isWebkit = (/webkit|khtml/).test(ua);
    biz.isSafari = ua.indexOf("safari") > -1 || biz.isWebkit ;
    biz.isChrome = ua.indexOf("chrome") > -1 || biz.isWebkit ;
    biz.isGecko = biz.isMoz =!biz.isSafari && ua.indexOf("gecko") > -1;

    biz.isStrict = biz.doc.compatMode == "CSS1Compat" || biz.isSafari ;
    biz.isBoxModel = biz.isIE && !biz.isIE8 && !biz.isIE9 && !biz.isStrict ;

    biz.isNotStrictIE = biz.isBoxModel;

    biz.isSecure = win.location.href.toLowerCase().indexOf("https") === 0;


    biz.isWindows = (ua.indexOf("windows") != -1 || ua.indexOf("win32") != -1);
    biz.isMac = (ua.indexOf("macintosh") != -1 || ua.indexOf("mac os x") != -1);
    biz.isLinux = (ua.indexOf("linux") != -1);

};
biz.init();
/**
 * @description {object} uiObj
 * ui对象类，存放biz ui初始化后对象
 */
biz.uiObj = {};
/**
 * UI基类，所有的UI都应该从这个类中派生出去
 * @name boz.uiBase
 * @grammar biz.uiBase
 * @class
 * @return {biz.uiBase}
 */
biz.uiBase ={
    target : "",
    /**
     * 控件类型：如grid
     */
    uiType : ""
    /**
     *  还可以存放ui组件相关的公关方法，例如从文档中获取指定的DOM元素
     *    getDom:function(id){
     *       if ('string' == typeof id || id instanceof String) {
     *           return document.getElementById(id);
     *       } else if (id && id.nodeName && (id.nodeType == 1 || id.nodeType == 9)) {
     *           return id;
     *       }
     *       return null;
     *     }
     * @returns {HTMLElement|null} 获取的元素，查找不到时返回null,如果参数不合法，直接返回参数
     */
};


/**
 * 创建一个UI控件类
 * @function
 * @grammar biz.createUI(constructor, options)
 * @param {Function} constructor ui控件构造器
 * @param {Object} options 选项
 * @return {Object} ui控件
 */
biz.createUI = function(constructor, options) {
    options = options || {};
    var i,j,n,
        ui = function(opt, _isInherits){// 创建新类的真构造器函数
            var me = this,finalOpt ={};
            opt = opt || {};
            /*
             if(typeof ($("#"+ opt.id).attr("mainId")) !== "undefined"){
             alert("请勿在id为"+ opt.id + "的元素上重复渲染！");
             } */
            //扩展静态配置到this上
            $.extend(me, ui.options);
            //扩展当前options中的项到this上,事件不扩展到me上
            var tempOpt = {};
            for(var i in opt){
                if(typeof opt[i] !== "function") tempOpt[i] = opt[i];
            }
            $.extend(me, tempOpt);
            //执行控件自己的构造器
            if(typeof opt == "string"){
                return constructor.apply(me, arguments);
            }else{
                var conObj = constructor.apply(me, arguments);
                //如有返回值则使用返回值，否则与defaults深度合并
                finalOpts = conObj?conObj:$.extend(true,{},me.defaults,opt);
            }
            //如属性值为数组[]，通过$.extend()不能覆盖默认值而是合并，此做特殊处理
            for(var para in opt){
                if(typeof opt[para] === 'object' && typeof opt[para].splice==='function'
                    && typeof opt[para].length==='number' && finalOpts[para] !== opt[para])finalOpts[para] = opt[para] ;
            }
            //constructor.apply(me, arguments);
            //自己的构造器可以往ui.options里存放默认属性
            // opt = $.extend(true,{},me.defaults,opt) ;

            //初始化组件
            var tempObj = me.init(finalOpts) ;
            $.extend(me, tempObj);
            //初始化成功后给渲染元素设定其mainid值，标示已经渲染过
            if(typeof tempObj !== "undefined"){
                $(finalOpts.id).attr("mainId",$(finalOpts.id).attr("id"));
            }else{
                alert("Error occur when rendering element which id is"+ $(finalOpts.id).attr("id"));
            }

            //执行插件的构造器
            for (i=0, n=ui._addons.length; i<n; i++) {
                ui._addons[i](me);
            }

            //释放默认属性方法内存
            me.defaults = undefined;
            me.methods = undefined;
            //把组件对象存放在biz.uiObj里
            if(opt.id != "undefined" && me.uiType != "validate"){
                //grid编辑过程中，元素没有append到页面，需通过opt.targetElem获取
                biz.uiObj[opt.targetElem ? $(opt.targetElem).attr("id"): $(opt.id).attr("id")] = me ;
            } ;

        },
        C = function(){};

    //继承父类的原型链
    var proto = ui.prototype = new C();

    //继承Base中的方法到prototype中
    for (i in biz.uiBase) {
        proto[i] = biz.uiBase[i];
    }

    /**
     * 扩展控件的prototype,如果是对象则进行合并，否则覆盖
     * @param {Object} json 要扩展进prototype的对象
     * @return {Object} 扩展后的对象
     */
    ui.extend = function(json){
        for (i in json) {
            if(typeof json[i] == "object"){
                ui.prototype[i] = $.extend({},ui.prototype[i]||{},json[i]);
                //如果扩展的是方法，把所有方法绑定到ui对象上
                if(i == "methods"){
                    for( j in json[i]) {
                        ui.prototype[j] = json[i][j];
                    }
                }
            }else{
                ui.prototype[i] = json[i];
            }
        }
        return ui;  // 这个静态方法也返回类对象本身
    };

    //插件支持
    ui._addons = [];
    ui.register = function(f){
        if (typeof f == "function")
            ui._addons.push(f);
    };

    //静态配置支持
    ui.options = {};

    return ui;
};


/**
 * 注册一个构造方法
 *
 *biz.grid.register(function(opt){
 *   var c = opt ;
 *   alert("register函数");
 *});
 *
 */

/****************************************jquery ui core*************************************************/
/*!
 * jQuery UI 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *Includes: jquery.ui.core.js
 * http://docs.jquery.com/UI
 */
(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
    $.ui = $.ui || {};
    if ( $.ui.version ) {
        return;
    }

    $.extend( $.ui, {
        version: "1.8.21",

        keyCode: {
            ALT: 18,
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            COMMAND: 91,
            COMMAND_LEFT: 91, // COMMAND
            COMMAND_RIGHT: 93,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            MENU: 93, // COMMAND_RIGHT
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38,
            WINDOWS: 91 // COMMAND
        }
    });

// plugins
    $.fn.extend({
        propAttr: $.fn.prop || $.fn.attr,

        _focus: $.fn.focus,
        focus: function( delay, fn ) {
            return typeof delay === "number" ?
                this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $( elem ).focus();
                        if ( fn ) {
                            fn.call( elem );
                        }
                    }, delay );
                }) :
                this._focus.apply( this, arguments );
        },

        scrollParent: function() {
            var scrollParent;
            if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
                scrollParent = this.parents().filter(function() {
                    return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) && (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
                }).eq(0);
            } else {
                scrollParent = this.parents().filter(function() {
                    return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
                }).eq(0);
            }

            return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
        },

        zIndex: function( zIndex ) {
            if ( zIndex !== undefined ) {
                return this.css( "zIndex", zIndex );
            }

            if ( this.length ) {
                var elem = $( this[ 0 ] ), position, value;
                while ( elem.length && elem[ 0 ] !== document ) {
                    // Ignore z-index if position is set to a value where z-index is ignored by the browser
                    // This makes behavior of this function consistent across browsers
                    // WebKit always returns auto if the element is positioned
                    position = elem.css( "position" );
                    if ( position === "absolute" || position === "relative" || position === "fixed" ) {
                        // IE returns 0 when zIndex is not specified
                        // other browsers return a string
                        // we ignore the case of nested elements with an explicit value of 0
                        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                        value = parseInt( elem.css( "zIndex" ), 10 );
                        if ( !isNaN( value ) && value !== 0 ) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }

            return 0;
        },

        disableSelection: function() {
            return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
                ".ui-disableSelection", function( event ) {
                event.preventDefault();
            });
        },

        enableSelection: function() {
            return this.unbind( ".ui-disableSelection" );
        }
    });

    $.each( [ "Width", "Height" ], function( i, name ) {
        var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
            type = name.toLowerCase(),
            orig = {
                innerWidth: $.fn.innerWidth,
                innerHeight: $.fn.innerHeight,
                outerWidth: $.fn.outerWidth,
                outerHeight: $.fn.outerHeight
            };

        function reduce( elem, size, border, margin ) {
            $.each( side, function() {
                size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
                if ( border ) {
                    size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
                }
                if ( margin ) {
                    size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
                }
            });
            return size;
        }

        $.fn[ "inner" + name ] = function( size ) {
            if ( size === undefined ) {
                return orig[ "inner" + name ].call( this );
            }

            return this.each(function() {
                $( this ).css( type, reduce( this, size ) + "px" );
            });
        };

        $.fn[ "outer" + name] = function( size, margin ) {
            if ( typeof size !== "number" ) {
                return orig[ "outer" + name ].call( this, size );
            }

            return this.each(function() {
                $( this).css( type, reduce( this, size, true, margin ) + "px" );
            });
        };
    });

// selectors
    function focusable( element, isTabIndexNotNaN ) {
        var nodeName = element.nodeName.toLowerCase();
        if ( "area" === nodeName ) {
            var map = element.parentNode,
                mapName = map.name,
                img;
            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
                return false;
            }
            img = $( "img[usemap=#" + mapName + "]" )[0];
            return !!img && visible( img );
        }
        return ( /input|select|textarea|button|object/.test( nodeName )
            ? !element.disabled
            : "a" == nodeName
            ? element.href || isTabIndexNotNaN
            : isTabIndexNotNaN)
            // the element and all of its ancestors must be visible
            && visible( element );
    }

    function visible( element ) {
        return !$( element ).parents().andSelf().filter(function() {
            return $.curCSS( this, "visibility" ) === "hidden" ||
                $.expr.filters.hidden( this );
        }).length;
    }

    $.extend( $.expr[ ":" ], {
        data: function( elem, i, match ) {
            return !!$.data( elem, match[ 3 ] );
        },

        focusable: function( element ) {
            return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
        },

        tabbable: function( element ) {
            var tabIndex = $.attr( element, "tabindex" ),
                isTabIndexNaN = isNaN( tabIndex );
            return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
        }
    });

// support
    $(function() {
        var body = document.body,
            div = body.appendChild( div = document.createElement( "div" ) );

        // access offsetHeight before setting the style to prevent a layout bug
        // in IE 9 which causes the elemnt to continue to take up space even
        // after it is removed from the DOM (#8026)
        div.offsetHeight;

        $.extend( div.style, {
            minHeight: "100px",
            height: "auto",
            padding: 0,
            borderWidth: 0
        });

        $.support.minHeight = div.offsetHeight === 100;
        $.support.selectstart = "onselectstart" in div;

        // set display to none to avoid a layout bug in IE
        // http://dev.jquery.com/ticket/4014
        body.removeChild( div ).style.display = "none";
    });





// deprecated
    $.extend( $.ui, {
        // $.ui.plugin is deprecated.  Use the proxy pattern instead.
        plugin: {
            add: function( module, option, set ) {
                var proto = $.ui[ module ].prototype;
                for ( var i in set ) {
                    proto.plugins[ i ] = proto.plugins[ i ] || [];
                    proto.plugins[ i ].push( [ option, set[ i ] ] );
                }
            },
            call: function( instance, name, args ) {
                var set = instance.plugins[ name ];
                if ( !set || !instance.element[ 0 ].parentNode ) {
                    return;
                }

                for ( var i = 0; i < set.length; i++ ) {
                    if ( instance.options[ set[ i ][ 0 ] ] ) {
                        set[ i ][ 1 ].apply( instance.element, args );
                    }
                }
            }
        },

        // will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
        contains: function( a, b ) {
            return document.compareDocumentPosition ?
                a.compareDocumentPosition( b ) & 16 :
                a !== b && a.contains( b );
        },

        // only used by resizable
        hasScroll: function( el, a ) {

            //If overflow is hidden, the element might have extra content, but the user wants to hide it
            if ( $( el ).css( "overflow" ) === "hidden") {
                return false;
            }

            var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
                has = false;

            if ( el[ scroll ] > 0 ) {
                return true;
            }

            // TODO: determine which cases actually cause this to happen
            // if the element doesn't have the scroll set, see if it's possible to
            // set the scroll
            el[ scroll ] = 1;
            has = ( el[ scroll ] > 0 );
            el[ scroll ] = 0;
            return has;
        },

        // these are odd functions, fix the API or move into individual plugins
        isOverAxis: function( x, reference, size ) {
            //Determines when x coordinate is over "b" element axis
            return ( x > reference ) && ( x < ( reference + size ) );
        },
        isOver: function( y, x, top, left, height, width ) {
            //Determines when x, y coordinates is over "b" element
            return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
        }
    });

})( jQuery );
/*!
 * jQuery UI Widget 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function( $, undefined ) {

// jQuery 1.4+
    if ( $.cleanData ) {
        var _cleanData = $.cleanData;
        $.cleanData = function( elems ) {
            for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
                try {
                    $( elem ).triggerHandler( "remove" );
                    // http://bugs.jquery.com/ticket/8235
                } catch( e ) {}
            }
            _cleanData( elems );
        };
    } else {
        var _remove = $.fn.remove;
        $.fn.remove = function( selector, keepData ) {
            return this.each(function() {
                if ( !keepData ) {
                    if ( !selector || $.filter( selector, [ this ] ).length ) {
                        $( "*", this ).add( [ this ] ).each(function() {
                            try {
                                $( this ).triggerHandler( "remove" );
                                // http://bugs.jquery.com/ticket/8235
                            } catch( e ) {}
                        });
                    }
                }
                return _remove.call( $(this), selector, keepData );
            });
        };
    }

    $.widget = function( name, base, prototype ) {
        var namespace = name.split( "." )[ 0 ],
            fullName;
        name = name.split( "." )[ 1 ];
        fullName = namespace + "-" + name;

        if ( !prototype ) {
            prototype = base;
            base = $.Widget;
        }

        // create selector for plugin
        $.expr[ ":" ][ fullName ] = function( elem ) {
            return !!$.data( elem, name );
        };

        $[ namespace ] = $[ namespace ] || {};
        $[ namespace ][ name ] = function( options, element ) {
            // allow instantiation without initializing for simple inheritance
            if ( arguments.length ) {
                this._createWidget( options, element );
            }
        };

        var basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
//	$.each( basePrototype, function( key, val ) {
//		if ( $.isPlainObject(val) ) {
//			basePrototype[ key ] = $.extend( {}, val );
//		}
//	});
        basePrototype.options = $.extend( true, {}, basePrototype.options );
        $[ namespace ][ name ].prototype = $.extend( true, basePrototype, {
            namespace: namespace,
            widgetName: name,
            widgetEventPrefix: $[ namespace ][ name ].prototype.widgetEventPrefix || name,
            widgetBaseClass: fullName
        }, prototype );

        $.widget.bridge( name, $[ namespace ][ name ] );
    };

    $.widget.bridge = function( name, object ) {
        $.fn[ name ] = function( options ) {
            var isMethodCall = typeof options === "string",
                args = Array.prototype.slice.call( arguments, 1 ),
                returnValue = this;

            // allow multiple hashes to be passed on init
            options = !isMethodCall && args.length ?
                $.extend.apply( null, [ true, options ].concat(args) ) :
                options;

            // prevent calls to internal methods
            if ( isMethodCall && options.charAt( 0 ) === "_" ) {
                return returnValue;
            }

            if ( isMethodCall ) {
                this.each(function() {
                    var instance = $.data( this, name ),
                        methodValue = instance && $.isFunction( instance[options] ) ?
                            instance[ options ].apply( instance, args ) :
                            instance;
                    // TODO: add this back in 1.9 and use $.error() (see #5972)
//				if ( !instance ) {
//					throw "cannot call methods on " + name + " prior to initialization; " +
//						"attempted to call method '" + options + "'";
//				}
//				if ( !$.isFunction( instance[options] ) ) {
//					throw "no such method '" + options + "' for " + name + " widget instance";
//				}
//				var methodValue = instance[ options ].apply( instance, args );
                    if ( methodValue !== instance && methodValue !== undefined ) {
                        returnValue = methodValue;
                        return false;
                    }
                });
            } else {
                this.each(function() {
                    var instance = $.data( this, name );
                    if ( instance ) {
                        instance.option( options || {} )._init();
                    } else {
                        $.data( this, name, new object( options, this ) );
                    }
                });
            }

            return returnValue;
        };
    };

    $.Widget = function( options, element ) {
        // allow instantiation without initializing for simple inheritance
        if ( arguments.length ) {
            this._createWidget( options, element );
        }
    };

    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function( options, element ) {
            // $.widget.bridge stores the plugin instance, but we do it anyway
            // so that it's stored even before the _create function runs
            $.data( element, this.widgetName, this );
            this.element = $( element );
            this.options = $.extend( true, {},
                this.options,
                this._getCreateOptions(),
                options );

            var self = this;
            this.element.bind( "remove." + this.widgetName, function() {
                self.destroy();
            });

            this._create();
            this._trigger( "create" );
            this._init();
        },
        _getCreateOptions: function() {
            return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
        },
        _create: function() {},
        _init: function() {},

        destroy: function() {
            this.element
                .unbind( "." + this.widgetName )
                .removeData( this.widgetName );
            this.widget()
                .unbind( "." + this.widgetName )
                .removeAttr( "aria-disabled" )
                .removeClass(
                    this.widgetBaseClass + "-disabled " +
                        "ui-state-disabled" );
        },

        widget: function() {
            return this.element;
        },

        option: function( key, value ) {
            var options = key;

            if ( arguments.length === 0 ) {
                // don't return a reference to the internal hash
                return $.extend( {}, this.options );
            }

            if  (typeof key === "string" ) {
                if ( value === undefined ) {
                    return this.options[ key ];
                }
                options = {};
                options[ key ] = value;
            }

            this._setOptions( options );

            return this;
        },
        _setOptions: function( options ) {
            var self = this;
            $.each( options, function( key, value ) {
                self._setOption( key, value );
            });

            return this;
        },
        _setOption: function( key, value ) {
            this.options[ key ] = value;

            if ( key === "disabled" ) {
                this.widget()
                    [ value ? "addClass" : "removeClass"](
                        this.widgetBaseClass + "-disabled" + " " +
                            "ui-state-disabled" )
                    .attr( "aria-disabled", value );
            }

            return this;
        },

        enable: function() {
            return this._setOption( "disabled", false );
        },
        disable: function() {
            return this._setOption( "disabled", true );
        },

        _trigger: function( type, event, data ) {
            var prop, orig,
                callback = this.options[ type ];

            data = data || {};
            event = $.Event( event );
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];

            // copy original event properties over to the new event
            orig = event.originalEvent;
            if ( orig ) {
                for ( prop in orig ) {
                    if ( !( prop in event ) ) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }

            this.element.trigger( event, data );

            return !( $.isFunction(callback) &&
                callback.call( this.element[0], event, data ) === false ||
                event.isDefaultPrevented() );
        }
    };

})( jQuery );
/*!
 * jQuery UI Mouse 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

    var mouseHandled = false;
    $( document ).mouseup( function( e ) {
        mouseHandled = false;
    });

    $.widget("ui.mouse", {
        options: {
            cancel: ':input,option',
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var self = this;

            this.element
                .bind('mousedown.'+this.widgetName, function(event) {
                    return self._mouseDown(event);
                })
                .bind('click.'+this.widgetName, function(event) {
                    if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
                        $.removeData(event.target, self.widgetName + '.preventClickEvent');
                        event.stopImmediatePropagation();
                        return false;
                    }
                });

            this.started = false;
        },

        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            this.element.unbind('.'+this.widgetName);
            $(document)
                .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
                .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);
        },

        _mouseDown: function(event) {
            // don't let more than one widget handle mouseStart
            if( mouseHandled ) { return };

            // we may have missed mouseup (out of window)
            (this._mouseStarted && this._mouseUp(event));

            this._mouseDownEvent = event;

            var self = this,
                btnIsLeft = (event.which == 1),
            // event.target.nodeName works around a bug in IE 8 with
            // disabled inputs (#7620)
                elIsCancel = (typeof this.options.cancel == "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }

            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    self.mouseDelayMet = true;
                }, this.options.delay);
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }

            // Click event may never have fired (Gecko & Opera)
            if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                $.removeData(event.target, this.widgetName + '.preventClickEvent');
            }

            // these delegates are required to keep context
            this._mouseMoveDelegate = function(event) {
                return self._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return self._mouseUp(event);
            };
            $(document)
                .bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
                .bind('mouseup.'+this.widgetName, this._mouseUpDelegate);

            event.preventDefault();

            mouseHandled = true;
            return true;
        },

        _mouseMove: function(event) {
            // IE mouseup check - mouseup happened when mouse was out of window
            if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
                return this._mouseUp(event);
            }

            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted =
                    (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }

            return !this._mouseStarted;
        },

        _mouseUp: function(event) {
            $(document)
                .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
                .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);

            if (this._mouseStarted) {
                this._mouseStarted = false;

                if (event.target == this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + '.preventClickEvent', true);
                }

                this._mouseStop(event);
            }

            return false;
        },

        _mouseDistanceMet: function(event) {
            return (Math.max(
                Math.abs(this._mouseDownEvent.pageX - event.pageX),
                Math.abs(this._mouseDownEvent.pageY - event.pageY)
            ) >= this.options.distance
                );
        },

        _mouseDelayMet: function(event) {
            return this.mouseDelayMet;
        },

        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function(event) {},
        _mouseDrag: function(event) {},
        _mouseStop: function(event) {},
        _mouseCapture: function(event) { return true; }
    });

})(jQuery);
/*!
 * jQuery UI Draggable 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Draggables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

    $.widget("ui.draggable", $.ui.mouse, {
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false
        },
        _create: function() {

            if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
                this.element[0].style.position = 'relative';

            (this.options.addClasses && this.element.addClass("ui-draggable"));
            (this.options.disabled && this.element.addClass("ui-draggable-disabled"));

            this._mouseInit();

        },

        destroy: function() {
            if(!this.element.data('draggable')) return;
            this.element
                .removeData("draggable")
                .unbind(".draggable")
                .removeClass("ui-draggable"
                    + " ui-draggable-dragging"
                    + " ui-draggable-disabled");
            this._mouseDestroy();

            return this;
        },

        _mouseCapture: function(event) {

            var o = this.options;

            // among others, prevent a drag on a resizable-handle
            if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
                return false;

            //Quit if we're not on a valid handle
            this.handle = this._getHandle(event);
            if (!this.handle)
                return false;

            if ( o.iframeFix ) {
                $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
                    $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')
                        .css({
                            width: this.offsetWidth+"px", height: this.offsetHeight+"px",
                            position: "absolute", opacity: "0.001", zIndex: 1000
                        })
                        .css($(this).offset())
                        .appendTo("body");
                });
            }

            return true;

        },

        _mouseStart: function(event) {

            var o = this.options;

            //Create and append the visible helper
            this.helper = this._createHelper(event);

            this.helper.addClass("ui-draggable-dragging");

            //Cache the helper size
            this._cacheHelperProportions();

            //If ddmanager is used for droppables, set the global draggable
            if($.ui.ddmanager)
                $.ui.ddmanager.current = this;

            /*
             * - Position generation -
             * This block generates everything position related - it's the core of draggables.
             */

            //Cache the margins of the original element
            this._cacheMargins();

            //Store the helper's css position
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();

            //The element's absolute position on the page minus margins
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };

            $.extend(this.offset, {
                click: { //Where the click happened, relative to the element
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
            });

            //Generate the original position
            this.originalPosition = this.position = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;

            //Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

            //Set a containment if given in the options
            if(o.containment)
                this._setContainment();

            //Trigger event + callbacks
            if(this._trigger("start", event) === false) {
                this._clear();
                return false;
            }

            //Recache the helper size
            this._cacheHelperProportions();

            //Prepare the droppable offsets
            if ($.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);


            this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

            //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
            if ( $.ui.ddmanager ) $.ui.ddmanager.dragStart(this, event);

            return true;
        },

        _mouseDrag: function(event, noPropagation) {

            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");

            //Call plugins and callbacks and use the resulting position if something is returned
            if (!noPropagation) {
                var ui = this._uiHash();
                if(this._trigger('drag', event, ui) === false) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }

            if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';
            if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';
            if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

            return false;
        },

        _mouseStop: function(event) {

            //If we are using droppables, inform the manager about the drop
            var dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour)
                dropped = $.ui.ddmanager.drop(this, event);

            //if a drop comes from outside (a sortable)
            if(this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }

            //if the original element is no longer in the DOM don't bother to continue (see #8269)
            var element = this.element[0], elementInDom = false;
            while ( element && (element = element.parentNode) ) {
                if (element == document ) {
                    elementInDom = true;
                }
            }
            if ( !elementInDom && this.options.helper === "original" )
                return false;

            if((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                var self = this;
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    if(self._trigger("stop", event) !== false) {
                        self._clear();
                    }
                });
            } else {
                if(this._trigger("stop", event) !== false) {
                    this._clear();
                }
            }

            return false;
        },

        _mouseUp: function(event) {
            if (this.options.iframeFix === true) {
                $("div.ui-draggable-iframeFix").each(function() {
                    this.parentNode.removeChild(this);
                }); //Remove frame helpers
            }

            //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
            if( $.ui.ddmanager ) $.ui.ddmanager.dragStop(this, event);

            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },

        cancel: function() {

            if(this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp({});
            } else {
                this._clear();
            }

            return this;

        },

        _getHandle: function(event) {

            var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
            $(this.options.handle, this.element)
                .find("*")
                .andSelf()
                .each(function() {
                    if(this == event.target) handle = true;
                });

            return handle;

        },

        _createHelper: function(event) {

            var o = this.options;
            var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);

            if(!helper.parents('body').length)
                helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));

            if(helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
                helper.css("position", "absolute");

            return helper;

        },

        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj == 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {left: +obj[0], top: +obj[1] || 0};
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },

        _getParentOffset: function() {

            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();

            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            if(this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }

            if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
                || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie)) //Ugly IE fix
                po = { top: 0, left: 0 };

            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
            };

        },

        _getRelativeOffset: function() {

            if(this.cssPosition == "relative") {
                var p = this.element.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
                };
            } else {
                return { top: 0, left: 0 };
            }

        },

        _cacheMargins: function() {
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"),10) || 0),
                top: (parseInt(this.element.css("marginTop"),10) || 0),
                right: (parseInt(this.element.css("marginRight"),10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
            };
        },

        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },

        _setContainment: function() {

            var o = this.options;
            if(o.containment == 'parent') o.containment = this.helper[0].parentNode;
            if(o.containment == 'document' || o.containment == 'window') this.containment = [
                o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
                o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
                (o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
                (o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
            ];

            if(!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
                var c = $(o.containment);
                var ce = c[0]; if(!ce) return;
                var co = c.offset();
                var over = ($(ce).css("overflow") != 'hidden');

                this.containment = [
                    (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0),
                    (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0),
                    (over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
                    (over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top  - this.margins.bottom
                ];
                this.relative_container = c;

            } else if(o.containment.constructor == Array) {
                this.containment = o.containment;
            }

        },

        _convertPositionTo: function(d, pos) {

            if(!pos) pos = this.position;
            var mod = d == "absolute" ? 1 : -1;
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

            return {
                top: (
                    pos.top																	// The absolute mouse position
                        + this.offset.relative.top * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.top * mod											// The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
                    ),
                left: (
                    pos.left																// The absolute mouse position
                        + this.offset.relative.left * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.left * mod											// The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
                    )
            };

        },

        _generatePosition: function(event) {

            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            var pageX = event.pageX;
            var pageY = event.pageY;

            /*
             * - Position constraining -
             * Constrain the position to a mix of grid, containment.
             */

            if(this.originalPosition) { //If we are not dragging yet, we won't check for options
                var containment;
                if(this.containment) {
                    if (this.relative_container){
                        var co = this.relative_container.offset();
                        containment = [ this.containment[0] + co.left,
                            this.containment[1] + co.top,
                            this.containment[2] + co.left,
                            this.containment[3] + co.top ];
                    }
                    else {
                        containment = this.containment;
                    }

                    if(event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;
                    if(event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;
                    if(event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;
                    if(event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;
                }

                if(o.grid) {
                    //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
                    var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

                    var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }

            }

            return {
                top: (
                    pageY																// The absolute mouse position
                        - this.offset.click.top													// Click offset (relative to the element)
                        - this.offset.relative.top												// Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.top												// The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
                    ),
                left: (
                    pageX																// The absolute mouse position
                        - this.offset.click.left												// Click offset (relative to the element)
                        - this.offset.relative.left												// Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.left												// The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
                    )
            };

        },

        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            if(this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
            //if($.ui.ddmanager) $.ui.ddmanager.current = null;
            this.helper = null;
            this.cancelHelperRemoval = false;
        },

        // From now on bulk stuff - mainly helpers

        _trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [event, ui]);
            if(type == "drag") this.positionAbs = this._convertPositionTo("absolute"); //The absolute position has to be recalculated after plugins
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },

        plugins: {},

        _uiHash: function(event) {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }

    });

    $.extend($.ui.draggable, {
        version: "1.8.21"
    });

    $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui) {

            var inst = $(this).data("draggable"), o = inst.options,
                uiSortable = $.extend({}, ui, { item: inst.element });
            inst.sortables = [];
            $(o.connectToSortable).each(function() {
                var sortable = $.data(this, 'sortable');
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({
                        instance: sortable,
                        shouldRevert: sortable.options.revert
                    });
                    sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
                    sortable._trigger("activate", event, uiSortable);
                }
            });

        },
        stop: function(event, ui) {

            //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
            var inst = $(this).data("draggable"),
                uiSortable = $.extend({}, ui, { item: inst.element });

            $.each(inst.sortables, function() {
                if(this.instance.isOver) {

                    this.instance.isOver = 0;

                    inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
                    this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

                    //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: 'valid/invalid'
                    if(this.shouldRevert) this.instance.options.revert = true;

                    //Trigger the stop of the sortable
                    this.instance._mouseStop(event);

                    this.instance.options.helper = this.instance.options._helper;

                    //If the helper has been the original item, restore properties in the sortable
                    if(inst.options.helper == 'original')
                        this.instance.currentItem.css({ top: 'auto', left: 'auto' });

                } else {
                    this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
                    this.instance._trigger("deactivate", event, uiSortable);
                }

            });

        },
        drag: function(event, ui) {

            var inst = $(this).data("draggable"), self = this;

            var checkPos = function(o) {
                var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
                var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;
                var itemHeight = o.height, itemWidth = o.width;
                var itemTop = o.top, itemLeft = o.left;

                return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
            };

            $.each(inst.sortables, function(i) {

                //Copy over some variables to allow calling the sortable's native _intersectsWith
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;

                if(this.instance._intersectsWith(this.instance.containerCache)) {

                    //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
                    if(!this.instance.isOver) {

                        this.instance.isOver = 1;
                        //Now we fake the start of dragging for the sortable instance,
                        //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
                        //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
                        this.instance.currentItem = $(self).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
                        this.instance.options.helper = function() { return ui.helper[0]; };

                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, true);
                        this.instance._mouseStart(event, true, true);

                        //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element; //draggable revert needs that
                        //hack so receive/update callbacks work (mostly)
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;

                    }

                    //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
                    if(this.instance.currentItem) this.instance._mouseDrag(event);

                } else {

                    //If it doesn't intersect with the sortable, and it intersected before,
                    //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
                    if(this.instance.isOver) {

                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;

                        //Prevent reverting on this forced stop
                        this.instance.options.revert = false;

                        // The out event needs to be triggered independently
                        this.instance._trigger('out', event, this.instance._uiHash(this.instance));

                        this.instance._mouseStop(event, true);
                        this.instance.options.helper = this.instance.options._helper;

                        //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
                        this.instance.currentItem.remove();
                        if(this.instance.placeholder) this.instance.placeholder.remove();

                        inst._trigger("fromSortable", event);
                        inst.dropped = false; //draggable revert needs that
                    }

                };

            });

        }
    });

    $.ui.plugin.add("draggable", "cursor", {
        start: function(event, ui) {
            var t = $('body'), o = $(this).data('draggable').options;
            if (t.css("cursor")) o._cursor = t.css("cursor");
            t.css("cursor", o.cursor);
        },
        stop: function(event, ui) {
            var o = $(this).data('draggable').options;
            if (o._cursor) $('body').css("cursor", o._cursor);
        }
    });

    $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data('draggable').options;
            if(t.css("opacity")) o._opacity = t.css("opacity");
            t.css('opacity', o.opacity);
        },
        stop: function(event, ui) {
            var o = $(this).data('draggable').options;
            if(o._opacity) $(ui.helper).css('opacity', o._opacity);
        }
    });

    $.ui.plugin.add("draggable", "scroll", {
        start: function(event, ui) {
            var i = $(this).data("draggable");
            if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset();
        },
        drag: function(event, ui) {

            var i = $(this).data("draggable"), o = i.options, scrolled = false;

            if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {

                if(!o.axis || o.axis != 'x') {
                    if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                    else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                }

                if(!o.axis || o.axis != 'y') {
                    if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                    else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                }

            } else {

                if(!o.axis || o.axis != 'x') {
                    if(event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                }

                if(!o.axis || o.axis != 'y') {
                    if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }

            }

            if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(i, event);

        }
    });

    $.ui.plugin.add("draggable", "snap", {
        start: function(event, ui) {

            var i = $(this).data("draggable"), o = i.options;
            i.snapElements = [];

            $(o.snap.constructor != String ? ( o.snap.items || ':data(draggable)' ) : o.snap).each(function() {
                var $t = $(this); var $o = $t.offset();
                if(this != i.element[0]) i.snapElements.push({
                    item: this,
                    width: $t.outerWidth(), height: $t.outerHeight(),
                    top: $o.top, left: $o.left
                });
            });

        },
        drag: function(event, ui) {

            var inst = $(this).data("draggable"), o = inst.options;
            var d = o.snapTolerance;

            var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
                y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

            for (var i = inst.snapElements.length - 1; i >= 0; i--){

                var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width,
                    t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;

                //Yes, I know, this is insane ;)
                if(!((l-d < x1 && x1 < r+d && t-d < y1 && y1 < b+d) || (l-d < x1 && x1 < r+d && t-d < y2 && y2 < b+d) || (l-d < x2 && x2 < r+d && t-d < y1 && y1 < b+d) || (l-d < x2 && x2 < r+d && t-d < y2 && y2 < b+d))) {
                    if(inst.snapElements[i].snapping) (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
                    inst.snapElements[i].snapping = false;
                    continue;
                }

                if(o.snapMode != 'inner') {
                    var ts = Math.abs(t - y2) <= d;
                    var bs = Math.abs(b - y1) <= d;
                    var ls = Math.abs(l - x2) <= d;
                    var rs = Math.abs(r - x1) <= d;
                    if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
                    if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
                    if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
                    if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
                }

                var first = (ts || bs || ls || rs);

                if(o.snapMode != 'outer') {
                    var ts = Math.abs(t - y1) <= d;
                    var bs = Math.abs(b - y2) <= d;
                    var ls = Math.abs(l - x1) <= d;
                    var rs = Math.abs(r - x2) <= d;
                    if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
                    if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
                    if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
                    if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
                }

                if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                    (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
                inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

            };

        }
    });

    $.ui.plugin.add("draggable", "stack", {
        start: function(event, ui) {

            var o = $(this).data("draggable").options;

            var group = $.makeArray($(o.stack)).sort(function(a,b) {
                return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
            });
            if (!group.length) { return; }

            var min = parseInt(group[0].style.zIndex) || 0;
            $(group).each(function(i) {
                this.style.zIndex = min + i;
            });

            this[0].style.zIndex = min + group.length;

        }
    });

    $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data("draggable").options;
            if(t.css("zIndex")) o._zIndex = t.css("zIndex");
            t.css('zIndex', o.zIndex);
        },
        stop: function(event, ui) {
            var o = $(this).data("draggable").options;
            if(o._zIndex) $(ui.helper).css('zIndex', o._zIndex);
        }
    });

})(jQuery);
/*!
 * jQuery UI Position 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Position
 */
(function( $, undefined ) {

    $.ui = $.ui || {};

    var horizontalPositions = /left|center|right/,
        verticalPositions = /top|center|bottom/,
        center = "center",
        support = {},
        _position = $.fn.position,
        _offset = $.fn.offset;

    $.fn.position = function( options ) {
        if ( !options || !options.of ) {
            return _position.apply( this, arguments );
        }

        // make a copy, we don't want to modify arguments
        options = $.extend( {}, options );

        var target = $( options.of ),
            targetElem = target[0],
            collision = ( options.collision || "flip" ).split( " " ),
            offset = options.offset ? options.offset.split( " " ) : [ 0, 0 ],
            targetWidth,
            targetHeight,
            basePosition;

        if ( targetElem.nodeType === 9 ) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = { top: 0, left: 0 };
            // TODO: use $.isWindow() in 1.9
        } else if ( targetElem.setTimeout ) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = { top: target.scrollTop(), left: target.scrollLeft() };
        } else if ( targetElem.preventDefault ) {
            // force left top to allow flipping
            options.at = "left top";
            targetWidth = targetHeight = 0;
            basePosition = { top: options.of.pageY, left: options.of.pageX };
        } else {
            targetWidth = target.outerWidth();
            targetHeight = target.outerHeight();
            basePosition = target.offset();
        }

        // force my and at to have valid horizontal and veritcal positions
        // if a value is missing or invalid, it will be converted to center
        $.each( [ "my", "at" ], function() {
            var pos = ( options[this] || "" ).split( " " );
            if ( pos.length === 1) {
                pos = horizontalPositions.test( pos[0] ) ?
                    pos.concat( [center] ) :
                    verticalPositions.test( pos[0] ) ?
                        [ center ].concat( pos ) :
                        [ center, center ];
            }
            pos[ 0 ] = horizontalPositions.test( pos[0] ) ? pos[ 0 ] : center;
            pos[ 1 ] = verticalPositions.test( pos[1] ) ? pos[ 1 ] : center;
            options[ this ] = pos;
        });

        // normalize collision option
        if ( collision.length === 1 ) {
            collision[ 1 ] = collision[ 0 ];
        }

        // normalize offset option
        offset[ 0 ] = parseInt( offset[0], 10 ) || 0;
        if ( offset.length === 1 ) {
            offset[ 1 ] = offset[ 0 ];
        }
        offset[ 1 ] = parseInt( offset[1], 10 ) || 0;

        if ( options.at[0] === "right" ) {
            basePosition.left += targetWidth;
        } else if ( options.at[0] === center ) {
            basePosition.left += targetWidth / 2;
        }

        if ( options.at[1] === "bottom" ) {
            basePosition.top += targetHeight;
        } else if ( options.at[1] === center ) {
            basePosition.top += targetHeight / 2;
        }

        basePosition.left += offset[ 0 ];
        basePosition.top += offset[ 1 ];

        return this.each(function() {
            var elem = $( this ),
                elemWidth = elem.outerWidth(),
                elemHeight = elem.outerHeight(),
                marginLeft = parseInt( $.curCSS( this, "marginLeft", true ) ) || 0,
                marginTop = parseInt( $.curCSS( this, "marginTop", true ) ) || 0,
                collisionWidth = elemWidth + marginLeft +
                    ( parseInt( $.curCSS( this, "marginRight", true ) ) || 0 ),
                collisionHeight = elemHeight + marginTop +
                    ( parseInt( $.curCSS( this, "marginBottom", true ) ) || 0 ),
                position = $.extend( {}, basePosition ),
                collisionPosition;

            if ( options.my[0] === "right" ) {
                position.left -= elemWidth;
            } else if ( options.my[0] === center ) {
                position.left -= elemWidth / 2;
            }

            if ( options.my[1] === "bottom" ) {
                position.top -= elemHeight;
            } else if ( options.my[1] === center ) {
                position.top -= elemHeight / 2;
            }

            // prevent fractions if jQuery version doesn't support them (see #5280)
            if ( !support.fractions ) {
                position.left = Math.round( position.left );
                position.top = Math.round( position.top );
            }

            collisionPosition = {
                left: position.left - marginLeft,
                top: position.top - marginTop
            };

            $.each( [ "left", "top" ], function( i, dir ) {
                if ( $.ui.position[ collision[i] ] ) {
                    $.ui.position[ collision[i] ][ dir ]( position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: offset,
                        my: options.my,
                        at: options.at
                    });
                }
            });

            if ( $.fn.bgiframe ) {
                elem.bgiframe();
            }
            elem.offset( $.extend( position, { using: options.using } ) );
        });
    };

    $.ui.position = {
        fit: {
            left: function( position, data ) {
                var win = $( window ),
                    over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
                position.left = over > 0 ? position.left - over : Math.max( position.left - data.collisionPosition.left, position.left );
            },
            top: function( position, data ) {
                var win = $( window ),
                    over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
                position.top = over > 0 ? position.top - over : Math.max( position.top - data.collisionPosition.top, position.top );
            }
        },

        flip: {
            left: function( position, data ) {
                if ( data.at[0] === center ) {
                    return;
                }
                var win = $( window ),
                    over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
                    myOffset = data.my[ 0 ] === "left" ?
                        -data.elemWidth :
                        data.my[ 0 ] === "right" ?
                            data.elemWidth :
                            0,
                    atOffset = data.at[ 0 ] === "left" ?
                        data.targetWidth :
                        -data.targetWidth,
                    offset = -2 * data.offset[ 0 ];
                position.left += data.collisionPosition.left < 0 ?
                    myOffset + atOffset + offset :
                    over > 0 ?
                        myOffset + atOffset + offset :
                        0;
            },
            top: function( position, data ) {
                if ( data.at[1] === center ) {
                    return;
                }
                var win = $( window ),
                    over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
                    myOffset = data.my[ 1 ] === "top" ?
                        -data.elemHeight :
                        data.my[ 1 ] === "bottom" ?
                            data.elemHeight :
                            0,
                    atOffset = data.at[ 1 ] === "top" ?
                        data.targetHeight :
                        -data.targetHeight,
                    offset = -2 * data.offset[ 1 ];
                position.top += data.collisionPosition.top < 0 ?
                    myOffset + atOffset + offset :
                    over > 0 ?
                        myOffset + atOffset + offset :
                        0;
            }
        }
    };

// offset setter from jQuery 1.4
    if ( !$.offset.setOffset ) {
        $.offset.setOffset = function( elem, options ) {
            // set position first, in-case top/left are set even on static elem
            if ( /static/.test( $.curCSS( elem, "position" ) ) ) {
                elem.style.position = "relative";
            }
            var curElem   = $( elem ),
                curOffset = curElem.offset(),
                curTop    = parseInt( $.curCSS( elem, "top",  true ), 10 ) || 0,
                curLeft   = parseInt( $.curCSS( elem, "left", true ), 10)  || 0,
                props     = {
                    top:  (options.top  - curOffset.top)  + curTop,
                    left: (options.left - curOffset.left) + curLeft
                };

            if ( 'using' in options ) {
                options.using.call( elem, props );
            } else {
                curElem.css( props );
            }
        };

        $.fn.offset = function( options ) {
            var elem = this[ 0 ];
            if ( !elem || !elem.ownerDocument ) { return null; }
            if ( options ) {
                if ( $.isFunction( options ) ) {
                    return this.each(function( i ) {
                        $( this ).offset( options.call( this, i, $( this ).offset() ) );
                    });
                }
                return this.each(function() {
                    $.offset.setOffset( this, options );
                });
            }
            return _offset.call( this );
        };
    }

// fraction support test (older versions of jQuery don't support fractions)
    (function () {
        var body = document.getElementsByTagName( "body" )[ 0 ],
            div = document.createElement( "div" ),
            testElement, testElementParent, testElementStyle, offset, offsetTotal;

        //Create a "fake body" for testing based on method used in jQuery.support
        testElement = document.createElement( body ? "div" : "body" );
        testElementStyle = {
            visibility: "hidden",
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: "none"
        };
        if ( body ) {
            $.extend( testElementStyle, {
                position: "absolute",
                left: "-1000px",
                top: "-1000px"
            });
        }
        for ( var i in testElementStyle ) {
            testElement.style[ i ] = testElementStyle[ i ];
        }
        testElement.appendChild( div );
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore( testElement, testElementParent.firstChild );

        div.style.cssText = "position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;";

        offset = $( div ).offset( function( _, offset ) {
            return offset;
        }).offset();

        testElement.innerHTML = "";
        testElementParent.removeChild( testElement );

        offsetTotal = offset.top + offset.left + ( body ? 2000 : 0 );
        support.fractions = offsetTotal > 21 && offsetTotal < 22;
    })();

}( jQuery ));
/*!
 * jQuery UI Droppable 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Droppables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.mouse.js
 *	jquery.ui.draggable.js
 */
(function( $, undefined ) {

    $.widget("ui.droppable", {
        widgetEventPrefix: "drop",
        options: {
            accept: '*',
            activeClass: false,
            addClasses: true,
            greedy: false,
            hoverClass: false,
            scope: 'default',
            tolerance: 'intersect'
        },
        _create: function() {

            var o = this.options, accept = o.accept;
            this.isover = 0; this.isout = 1;

            this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept);
            };

            //Store the droppable's proportions
            this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

            // Add the reference and positions to the manager
            $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
            $.ui.ddmanager.droppables[o.scope].push(this);

            (o.addClasses && this.element.addClass("ui-droppable"));

        },

        destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            for ( var i = 0; i < drop.length; i++ )
                if ( drop[i] == this )
                    drop.splice(i, 1);

            this.element
                .removeClass("ui-droppable ui-droppable-disabled")
                .removeData("droppable")
                .unbind(".droppable");

            return this;
        },

        _setOption: function(key, value) {

            if(key == 'accept') {
                this.accept = $.isFunction(value) ? value : function(d) {
                    return d.is(value);
                };
            }
            $.Widget.prototype._setOption.apply(this, arguments);
        },

        _activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            if(this.options.activeClass) this.element.addClass(this.options.activeClass);
            (draggable && this._trigger('activate', event, this.ui(draggable)));
        },

        _deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
            (draggable && this._trigger('deactivate', event, this.ui(draggable)));
        },

        _over: function(event) {

            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

            if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
                if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);
                this._trigger('over', event, this.ui(draggable));
            }

        },

        _out: function(event) {

            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

            if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
                if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
                this._trigger('out', event, this.ui(draggable));
            }

        },

        _drop: function(event,custom) {

            var draggable = custom || $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return false; // Bail if draggable and droppable are same element

            var childrenIntersection = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $.data(this, 'droppable');
                if(
                    inst.options.greedy
                        && !inst.options.disabled
                        && inst.options.scope == draggable.options.scope
                        && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element))
                        && $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
                    ) { childrenIntersection = true; return false; }
            });
            if(childrenIntersection) return false;

            if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
                if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
                if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
                this._trigger('drop', event, this.ui(draggable));
                return this.element;
            }

            return false;

        },

        ui: function(c) {
            return {
                draggable: (c.currentItem || c.element),
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            };
        }

    });

    $.extend($.ui.droppable, {
        version: "1.8.21"
    });

    $.ui.intersect = function(draggable, droppable, toleranceMode) {

        if (!droppable.offset) return false;

        var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
            y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;
        var l = droppable.offset.left, r = l + droppable.proportions.width,
            t = droppable.offset.top, b = t + droppable.proportions.height;

        switch (toleranceMode) {
            case 'fit':
                return (l <= x1 && x2 <= r
                    && t <= y1 && y2 <= b);
                break;
            case 'intersect':
                return (l < x1 + (draggable.helperProportions.width / 2) // Right Half
                    && x2 - (draggable.helperProportions.width / 2) < r // Left Half
                    && t < y1 + (draggable.helperProportions.height / 2) // Bottom Half
                    && y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
                break;
            case 'pointer':
                var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left),
                    draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top),
                    isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
                return isOver;
                break;
            case 'touch':
                return (
                    (y1 >= t && y1 <= b) ||	// Top edge touching
                        (y2 >= t && y2 <= b) ||	// Bottom edge touching
                        (y1 < t && y2 > b)		// Surrounded vertically
                    ) && (
                    (x1 >= l && x1 <= r) ||	// Left edge touching
                        (x2 >= l && x2 <= r) ||	// Right edge touching
                        (x1 < l && x2 > r)		// Surrounded horizontally
                    );
                break;
            default:
                return false;
                break;
        }

    };

    /*
     This manager tracks offsets of draggables and droppables
     */
    $.ui.ddmanager = {
        current: null,
        droppables: { 'default': [] },
        prepareOffsets: function(t, event) {

            var m = $.ui.ddmanager.droppables[t.options.scope] || [];
            var type = event ? event.type : null; // workaround for #2317
            var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();

            droppablesLoop: for (var i = 0; i < m.length; i++) {

                if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) continue;	//No disabled and non-accepted
                for (var j=0; j < list.length; j++) { if(list[j] == m[i].element[0]) { m[i].proportions.height = 0; continue droppablesLoop; } }; //Filter out elements in the current dragged item
                m[i].visible = m[i].element.css("display") != "none"; if(!m[i].visible) continue; 									//If the element is not visible, continue

                if(type == "mousedown") m[i]._activate.call(m[i], event); //Activate the droppable if used directly from draggables

                m[i].offset = m[i].element.offset();
                m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

            }

        },
        drop: function(draggable, event) {

            var dropped = false;
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

                if(!this.options) return;
                if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                    dropped = this._drop.call(this, event) || dropped;

                if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
                    this.isout = 1; this.isover = 0;
                    this._deactivate.call(this, event);
                }

            });
            return dropped;

        },
        dragStart: function( draggable, event ) {
            //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
            draggable.element.parents( ":not(body,html)" ).bind( "scroll.droppable", function() {
                if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
            });
        },
        drag: function(draggable, event) {

            //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
            if(draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);

            //Run through all droppables and check their positions based on specific tolerance options
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

                if(this.options.disabled || this.greedyChild || !this.visible) return;
                var intersects = $.ui.intersect(draggable, this, this.options.tolerance);

                var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);
                if(!c) return;

                var parentInstance;
                if (this.options.greedy) {
                    var parent = this.element.parents(':data(droppable):eq(0)');
                    if (parent.length) {
                        parentInstance = $.data(parent[0], 'droppable');
                        parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
                    }
                }

                // we just moved into a greedy child
                if (parentInstance && c == 'isover') {
                    parentInstance['isover'] = 0;
                    parentInstance['isout'] = 1;
                    parentInstance._out.call(parentInstance, event);
                }

                this[c] = 1; this[c == 'isout' ? 'isover' : 'isout'] = 0;
                this[c == "isover" ? "_over" : "_out"].call(this, event);

                // we just moved out of a greedy child
                if (parentInstance && c == 'isout') {
                    parentInstance['isout'] = 0;
                    parentInstance['isover'] = 1;
                    parentInstance._over.call(parentInstance, event);
                }
            });

        },
        dragStop: function( draggable, event ) {
            draggable.element.parents( ":not(body,html)" ).unbind( "scroll.droppable" );
            //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
            if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
        }
    };

})(jQuery);
/*!
 * jQuery UI Resizable 1.8.21
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Resizables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

    $.widget("ui.resizable", $.ui.mouse, {
        widgetEventPrefix: "resize",
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            containment: false,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 1000
        },
        _create: function() {

            var self = this, o = this.options;
            this.element.addClass("ui-resizable");

            $.extend(this, {
                _aspectRatio: !!(o.aspectRatio),
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
            });

            //Wrap the element if it cannot hold child nodes
            if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

                //Create a wrapper element and set the wrapper to the new current internal element
                this.element.wrap(
                    $('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                        position: this.element.css('position'),
                        width: this.element.outerWidth(),
                        height: this.element.outerHeight(),
                        top: this.element.css('top'),
                        left: this.element.css('left')
                    })
                );

                //Overwrite the original this.element
                this.element = this.element.parent().data(
                    "resizable", this.element.data('resizable')
                );

                this.elementIsWrapper = true;

                //Move margins to the wrapper
                this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
                this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

                //Prevent Safari textarea resize
                this.originalResizeStyle = this.originalElement.css('resize');
                this.originalElement.css('resize', 'none');

                //Push the actual element to our proportionallyResize internal array
                this._proportionallyResizeElements.push(this.originalElement.css({ position: 'static', zoom: 1, display: 'block' }));

                // avoid IE jump (hard set the margin)
                this.originalElement.css({ margin: this.originalElement.css('margin') });

                // fix handlers offset
                this._proportionallyResize();

            }

            this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : { n: '.ui-resizable-n', e: '.ui-resizable-e', s: '.ui-resizable-s', w: '.ui-resizable-w', se: '.ui-resizable-se', sw: '.ui-resizable-sw', ne: '.ui-resizable-ne', nw: '.ui-resizable-nw' });
            if(this.handles.constructor == String) {

                if(this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';
                var n = this.handles.split(","); this.handles = {};

                for(var i = 0; i < n.length; i++) {

                    var handle = $.trim(n[i]), hname = 'ui-resizable-'+handle;
                    var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');

                    // Apply zIndex to all handles - see #7960
                    axis.css({ zIndex: o.zIndex });

                    //TODO : What's going on here?
                    if ('se' == handle) {
                        axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                    };

                    //Insert into internal handles object and append to element
                    this.handles[handle] = '.ui-resizable-'+handle;
                    this.element.append(axis);
                }

            }

            this._renderAxis = function(target) {

                target = target || this.element;

                for(var i in this.handles) {

                    if(this.handles[i].constructor == String)
                        this.handles[i] = $(this.handles[i], this.element).show();

                    //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

                        var axis = $(this.handles[i], this.element), padWrapper = 0;

                        //Checking the correct pad and border
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

                        //The padding type i have to apply...
                        var padPos = [ 'padding',
                            /ne|nw|n/.test(i) ? 'Top' :
                                /se|sw|s/.test(i) ? 'Bottom' :
                                    /^e$/.test(i) ? 'Right' : 'Left' ].join("");

                        target.css(padPos, padWrapper);

                        this._proportionallyResize();

                    }

                    //TODO: What's that good for? There's not anything to be executed left
                    if(!$(this.handles[i]).length)
                        continue;

                }
            };

            //TODO: make renderAxis a prototype function
            this._renderAxis(this.element);

            this._handles = $('.ui-resizable-handle', this.element)
                .disableSelection();

            //Matching axis name
            this._handles.mouseover(function() {
                if (!self.resizing) {
                    if (this.className)
                        var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                    //Axis, default = se
                    self.axis = axis && axis[1] ? axis[1] : 'se';
                }
            });

            //If we want to auto hide the elements
            if (o.autoHide) {
                this._handles.hide();
                $(this.element)
                    .addClass("ui-resizable-autohide")
                    .hover(function() {
                        if (o.disabled) return;
                        $(this).removeClass("ui-resizable-autohide");
                        self._handles.show();
                    },
                    function(){
                        if (o.disabled) return;
                        if (!self.resizing) {
                            $(this).addClass("ui-resizable-autohide");
                            self._handles.hide();
                        }
                    });
            }

            //Initialize the mouse interaction
            this._mouseInit();

        },

        destroy: function() {

            this._mouseDestroy();

            var _destroy = function(exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
                    .removeData("resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
            };

            //TODO: Unwrap at same DOM position
            if (this.elementIsWrapper) {
                _destroy(this.element);
                var wrapper = this.element;
                wrapper.after(
                    this.originalElement.css({
                        position: wrapper.css('position'),
                        width: wrapper.outerWidth(),
                        height: wrapper.outerHeight(),
                        top: wrapper.css('top'),
                        left: wrapper.css('left')
                    })
                ).remove();
            }

            this.originalElement.css('resize', this.originalResizeStyle);
            _destroy(this.originalElement);

            return this;
        },

        _mouseCapture: function(event) {
            var handle = false;
            for (var i in this.handles) {
                if ($(this.handles[i])[0] == event.target) {
                    handle = true;
                }
            }

            return !this.options.disabled && handle;
        },

        _mouseStart: function(event) {

            var o = this.options, iniPos = this.element.position(), el = this.element;

            this.resizing = true;
            this.documentScroll = { top: $(document).scrollTop(), left: $(document).scrollLeft() };

            // bugfix for http://dev.jquery.com/ticket/1749
            if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
                el.css({ position: 'absolute', top: iniPos.top, left: iniPos.left });
            }

            this._renderProxy();

            var curleft = num(this.helper.css('left')), curtop = num(this.helper.css('top'));

            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }

            //Store needed variables
            this.offset = this.helper.offset();
            this.position = { left: curleft, top: curtop };
            this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
            this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
            this.originalPosition = { left: curleft, top: curtop };
            this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
            this.originalMousePosition = { left: event.pageX, top: event.pageY };

            //Aspect Ratio
            this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

            var cursor = $('.ui-resizable-' + this.axis).css('cursor');
            $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);

            el.addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true;
        },

        _mouseDrag: function(event) {

            //Increase performance, avoid regex
            var el = this.helper, o = this.options, props = {},
                self = this, smp = this.originalMousePosition, a = this.axis;

            var dx = (event.pageX-smp.left)||0, dy = (event.pageY-smp.top)||0;
            var trigger = this._change[a];
            if (!trigger) return false;

            // Calculate the attrs that will be change
            var data = trigger.apply(this, [event, dx, dy]), ie6 = $.browser.msie && $.browser.version < 7, csdif = this.sizeDiff;

            // Put this in the mouseDrag handler since the user can start pressing shift while resizing
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey)
                data = this._updateRatio(data, event);

            data = this._respectSize(data, event);

            // plugins callbacks need to be called first
            this._propagate("resize", event);

            el.css({
                top: this.position.top + "px", left: this.position.left + "px",
                width: this.size.width + "px", height: this.size.height + "px"
            });

            if (!this._helper && this._proportionallyResizeElements.length)
                this._proportionallyResize();

            this._updateCache(data);

            // calling the user callback at the end
            this._trigger('resize', event, this.ui());

            return false;
        },

        _mouseStop: function(event) {

            this.resizing = false;
            var o = this.options, self = this;

            if(this._helper) {
                var pr = this._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                    soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
                    soffsetw = ista ? 0 : self.sizeDiff.width;

                var s = { width: (self.helper.width()  - soffsetw), height: (self.helper.height() - soffseth) },
                    left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                    top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

                if (!o.animate)
                    this.element.css($.extend(s, { top: top, left: left }));

                self.helper.height(self.size.height);
                self.helper.width(self.size.width);

                if (this._helper && !o.animate) this._proportionallyResize();
            }

            $('body').css('cursor', 'auto');

            this.element.removeClass("ui-resizable-resizing");

            this._propagate("stop", event);

            if (this._helper) this.helper.remove();
            return false;

        },

        _updateVirtualBoundaries: function(forceAspectRatio) {
            var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;

            b = {
                minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
            };

            if(this._aspectRatio || forceAspectRatio) {
                // We want to create an enclosing box whose aspect ration is the requested one
                // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;

                if(pMinWidth > b.minWidth) b.minWidth = pMinWidth;
                if(pMinHeight > b.minHeight) b.minHeight = pMinHeight;
                if(pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
                if(pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
            }
            this._vBoundaries = b;
        },

        _updateCache: function(data) {
            var o = this.options;
            this.offset = this.helper.offset();
            if (isNumber(data.left)) this.position.left = data.left;
            if (isNumber(data.top)) this.position.top = data.top;
            if (isNumber(data.height)) this.size.height = data.height;
            if (isNumber(data.width)) this.size.width = data.width;
        },

        _updateRatio: function(data, event) {

            var o = this.options, cpos = this.position, csize = this.size, a = this.axis;

            if (isNumber(data.height)) data.width = (data.height * this.aspectRatio);
            else if (isNumber(data.width)) data.height = (data.width / this.aspectRatio);

            if (a == 'sw') {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if (a == 'nw') {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }

            return data;
        },

        _respectSize: function(data, event) {

            var el = this.helper, o = this._vBoundaries, pRatio = this._aspectRatio || event.shiftKey, a = this.axis,
                ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
                isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);

            if (isminw) data.width = o.minWidth;
            if (isminh) data.height = o.minHeight;
            if (ismaxw) data.width = o.maxWidth;
            if (ismaxh) data.height = o.maxHeight;

            var dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height;
            var cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);

            if (isminw && cw) data.left = dw - o.minWidth;
            if (ismaxw && cw) data.left = dw - o.maxWidth;
            if (isminh && ch)	data.top = dh - o.minHeight;
            if (ismaxh && ch)	data.top = dh - o.maxHeight;

            // fixing jump error on top/left - bug #2330
            var isNotwh = !data.width && !data.height;
            if (isNotwh && !data.left && data.top) data.top = null;
            else if (isNotwh && !data.top && data.left) data.left = null;

            return data;
        },

        _proportionallyResize: function() {

            var o = this.options;
            if (!this._proportionallyResizeElements.length) return;
            var element = this.helper || this.element;

            for (var i=0; i < this._proportionallyResizeElements.length; i++) {

                var prel = this._proportionallyResizeElements[i];

                if (!this.borderDif) {
                    var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
                        p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];

                    this.borderDif = $.map(b, function(v, i) {
                        var border = parseInt(v,10)||0, padding = parseInt(p[i],10)||0;
                        return border + padding;
                    });
                }

                if ($.browser.msie && !(!($(element).is(':hidden') || $(element).parents(':hidden').length)))
                    continue;

                prel.css({
                    height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                    width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
                });

            };

        },

        _renderProxy: function() {

            var el = this.element, o = this.options;
            this.elementOffset = el.offset();

            if(this._helper) {

                this.helper = this.helper || $('<div style="overflow:hidden;"></div>');

                // fix ie6 offset TODO: This seems broken
                var ie6 = $.browser.msie && $.browser.version < 7, ie6offset = (ie6 ? 1 : 0),
                    pxyoffset = ( ie6 ? 2 : -1 );

                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() + pxyoffset,
                    height: this.element.outerHeight() + pxyoffset,
                    position: 'absolute',
                    left: this.elementOffset.left - ie6offset +'px',
                    top: this.elementOffset.top - ie6offset +'px',
                    zIndex: ++o.zIndex //TODO: Don't modify option
                });

                this.helper
                    .appendTo("body")
                    .disableSelection();

            } else {
                this.helper = this.element;
            }

        },

        _change: {
            e: function(event, dx, dy) {
                return { width: this.originalSize.width + dx };
            },
            w: function(event, dx, dy) {
                var o = this.options, cs = this.originalSize, sp = this.originalPosition;
                return { left: sp.left + dx, width: cs.width - dx };
            },
            n: function(event, dx, dy) {
                var o = this.options, cs = this.originalSize, sp = this.originalPosition;
                return { top: sp.top + dy, height: cs.height - dy };
            },
            s: function(event, dx, dy) {
                return { height: this.originalSize.height + dy };
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
            }
        },

        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [event, this.ui()]);
            (n != "resize" && this._trigger(n, event, this.ui()));
        },

        plugins: {},

        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }

    });

    $.extend($.ui.resizable, {
        version: "1.8.21"
    });

    /*
     * Resizable Extensions
     */

    $.ui.plugin.add("resizable", "alsoResize", {

        start: function (event, ui) {
            var self = $(this).data("resizable"), o = self.options;

            var _store = function (exp) {
                $(exp).each(function() {
                    var el = $(this);
                    el.data("resizable-alsoresize", {
                        width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
                        left: parseInt(el.css('left'), 10), top: parseInt(el.css('top'), 10)
                    });
                });
            };

            if (typeof(o.alsoResize) == 'object' && !o.alsoResize.parentNode) {
                if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
                else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
            }else{
                _store(o.alsoResize);
            }
        },

        resize: function (event, ui) {
            var self = $(this).data("resizable"), o = self.options, os = self.originalSize, op = self.originalPosition;

            var delta = {
                    height: (self.size.height - os.height) || 0, width: (self.size.width - os.width) || 0,
                    top: (self.position.top - op.top) || 0, left: (self.position.left - op.left) || 0
                },

                _alsoResize = function (exp, c) {
                    $(exp).each(function() {
                        var el = $(this), start = $(this).data("resizable-alsoresize"), style = {},
                            css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];

                        $.each(css, function (i, prop) {
                            var sum = (start[prop]||0) + (delta[prop]||0);
                            if (sum && sum >= 0)
                                style[prop] = sum || null;
                        });

                        el.css(style);
                    });
                };

            if (typeof(o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
                $.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
            }else{
                _alsoResize(o.alsoResize);
            }
        },

        stop: function (event, ui) {
            $(this).removeData("resizable-alsoresize");
        }
    });

    $.ui.plugin.add("resizable", "animate", {

        stop: function(event, ui) {
            var self = $(this).data("resizable"), o = self.options;

            var pr = self._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
                soffsetw = ista ? 0 : self.sizeDiff.width;

            var style = { width: (self.size.width - soffsetw), height: (self.size.height - soffseth) },
                left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

            self.element.animate(
                $.extend(style, top && left ? { top: top, left: left } : {}), {
                    duration: o.animateDuration,
                    easing: o.animateEasing,
                    step: function() {

                        var data = {
                            width: parseInt(self.element.css('width'), 10),
                            height: parseInt(self.element.css('height'), 10),
                            top: parseInt(self.element.css('top'), 10),
                            left: parseInt(self.element.css('left'), 10)
                        };

                        if (pr && pr.length) $(pr[0]).css({ width: data.width, height: data.height });

                        // propagating resize, and updating values for each animation step
                        self._updateCache(data);
                        self._propagate("resize", event);

                    }
                }
            );
        }

    });

    $.ui.plugin.add("resizable", "containment", {

        start: function(event, ui) {
            var self = $(this).data("resizable"), o = self.options, el = self.element;
            var oc = o.containment,	ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
            if (!ce) return;

            self.containerElement = $(ce);

            if (/document/.test(oc) || oc == document) {
                self.containerOffset = { left: 0, top: 0 };
                self.containerPosition = { left: 0, top: 0 };

                self.parentData = {
                    element: $(document), left: 0, top: 0,
                    width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
                };
            }

            // i'm a node, so compute top, left, right, bottom
            else {
                var element = $(ce), p = [];
                $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

                self.containerOffset = element.offset();
                self.containerPosition = element.position();
                self.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

                var co = self.containerOffset, ch = self.containerSize.height,	cw = self.containerSize.width,
                    width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw ), height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

                self.parentData = {
                    element: ce, left: co.left, top: co.top, width: width, height: height
                };
            }
        },

        resize: function(event, ui) {
            var self = $(this).data("resizable"), o = self.options,
                ps = self.containerSize, co = self.containerOffset, cs = self.size, cp = self.position,
                pRatio = self._aspectRatio || event.shiftKey, cop = { top:0, left:0 }, ce = self.containerElement;

            if (ce[0] != document && (/static/).test(ce.css('position'))) cop = co;

            if (cp.left < (self._helper ? co.left : 0)) {
                self.size.width = self.size.width + (self._helper ? (self.position.left - co.left) : (self.position.left - cop.left));
                if (pRatio) self.size.height = self.size.width / self.aspectRatio;
                self.position.left = o.helper ? co.left : 0;
            }

            if (cp.top < (self._helper ? co.top : 0)) {
                self.size.height = self.size.height + (self._helper ? (self.position.top - co.top) : self.position.top);
                if (pRatio) self.size.width = self.size.height * self.aspectRatio;
                self.position.top = self._helper ? co.top : 0;
            }

            self.offset.left = self.parentData.left+self.position.left;
            self.offset.top = self.parentData.top+self.position.top;

            var woset = Math.abs( (self._helper ? self.offset.left - cop.left : (self.offset.left - cop.left)) + self.sizeDiff.width ),
                hoset = Math.abs( (self._helper ? self.offset.top - cop.top : (self.offset.top - co.top)) + self.sizeDiff.height );

            var isParent = self.containerElement.get(0) == self.element.parent().get(0),
                isOffsetRelative = /relative|absolute/.test(self.containerElement.css('position'));

            if(isParent && isOffsetRelative) woset -= self.parentData.left;

            if (woset + self.size.width >= self.parentData.width) {
                self.size.width = self.parentData.width - woset;
                if (pRatio) self.size.height = self.size.width / self.aspectRatio;
            }

            if (hoset + self.size.height >= self.parentData.height) {
                self.size.height = self.parentData.height - hoset;
                if (pRatio) self.size.width = self.size.height * self.aspectRatio;
            }
        },

        stop: function(event, ui){
            var self = $(this).data("resizable"), o = self.options, cp = self.position,
                co = self.containerOffset, cop = self.containerPosition, ce = self.containerElement;

            var helper = $(self.helper), ho = helper.offset(), w = helper.outerWidth() - self.sizeDiff.width, h = helper.outerHeight() - self.sizeDiff.height;

            if (self._helper && !o.animate && (/relative/).test(ce.css('position')))
                $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

            if (self._helper && !o.animate && (/static/).test(ce.css('position')))
                $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

        }
    });

    $.ui.plugin.add("resizable", "ghost", {

        start: function(event, ui) {

            var self = $(this).data("resizable"), o = self.options, cs = self.size;

            self.ghost = self.originalElement.clone();
            self.ghost
                .css({ opacity: .25, display: 'block', position: 'relative', height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
                .addClass('ui-resizable-ghost')
                .addClass(typeof o.ghost == 'string' ? o.ghost : '');

            self.ghost.appendTo(self.helper);

        },

        resize: function(event, ui){
            var self = $(this).data("resizable"), o = self.options;
            if (self.ghost) self.ghost.css({ position: 'relative', height: self.size.height, width: self.size.width });
        },

        stop: function(event, ui){
            var self = $(this).data("resizable"), o = self.options;
            if (self.ghost && self.helper) self.helper.get(0).removeChild(self.ghost.get(0));
        }

    });

    $.ui.plugin.add("resizable", "grid", {

        resize: function(event, ui) {
            var self = $(this).data("resizable"), o = self.options, cs = self.size, os = self.originalSize, op = self.originalPosition, a = self.axis, ratio = o._aspectRatio || event.shiftKey;
            o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
            var ox = Math.round((cs.width - os.width) / (o.grid[0]||1)) * (o.grid[0]||1), oy = Math.round((cs.height - os.height) / (o.grid[1]||1)) * (o.grid[1]||1);

            if (/^(se|s|e)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
            }
            else if (/^(ne)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.top = op.top - oy;
            }
            else if (/^(sw)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.left = op.left - ox;
            }
            else {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.top = op.top - oy;
                self.position.left = op.left - ox;
            }
        }

    });

    var num = function(v) {
        return parseInt(v, 10) || 0;
    };

    var isNumber = function(value) {
        return !isNaN(parseInt(value, 10));
    };

})(jQuery);

/*  Bizfoundation ui 5.1
 *  biz.number.js number组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/**
  * 创建一个number控件,数字录入框
  * @function
  * @return {Object} ui控件
  */
biz.number = biz.createUI(function(options){
	 if(typeof options == "object"){
	     var me = this;
	     me.target = options.id;
	     me.uiType = 'number';
	     options.target = options.id;
	 }else{
         jAlert(I18N.param_error + options , I18N.promp);
     }  
 }).extend({
      init:function(opts){
      	var validOpts = biz.utils.getValidOptions(opts);
        var obj =  $(opts.target).number(opts);
        biz.utils.initValidate(validOpts);
       	return obj;
      },
      defaults:{
    	  fix:true
      },
      methods:{
		  getValue:function(){
	          return $(this.target).val();
	      },
	      setValue:function(value){
	          $(this.target).val(value);
	      }
      }
 });

/*
	原生number组件
*/
(function($){
    $.widget("csiui.number" , {
		options:{
			fix: false,
			minNum: 0,
			maxNum: 10000,
			precision: 0
		},
		_fixValue: function(target){
			var opts = this.options;
			var val = parseFloat($(target).val()).toFixed(opts.precision);
			if (isNaN(val)){
				$(target).val('');
				return;
			}
			if (opts.minNum != null && opts.minNum != undefined && val < opts.minNum){
				$(target).val(opts.minNum.toFixed(opts.precision));
			} else if (opts.maxNum != null && opts.maxNum != undefined && val > opts.maxNum){
				$(target).val(opts.maxNum.toFixed(opts.precision));
			} else {
				$(target).val(val);
			}
		},
		_bindEvents: function(target){
			var self = this;
			$(target).unbind('.number');
			$(target).bind('keypress.number', function(e){
				if (e.which == 45){	//-
					return true;
				} if (e.which == 46) {	//.
					return true;
				}
				else if ((e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false) || e.which == 0 || e.which == 8) {
					return true;
				} else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
					return true;
				} else {
					return false;
				}
			}).bind('paste.number', function(){
				if (window.clipboardData) {
					var s = clipboardData.getData('text');
					if (! /\D/.test(s)) {
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			}).bind('dragenter.number', function(){
				return false;
			}).bind('blur.number', function(){
				if(self.options.fix){
					self._fixValue(target);
				}
			});
		},
        _create:function(){
			var obj = this.element;	
			obj.css("ime-mode","Disabled");//数字输入框
			var opt = this.options;
			self.wrapper = $('<span></span>');
				//.addClass('ui-widget');
			//obj.addClass('ui-state-default ui-widget-content ui-corner-left ui-corner-right')
			obj.wrap(self.wrapper);
			this._bindEvents(obj);		
        }
	});	
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.autocomplete.js autocomplete组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/*
 原生autocomplete
 */
/*! jQuery UI - v1.8.21 - 2012-06-05
 * https://github.com/jquery/jquery-ui
 * Includes: jquery.ui.autocomplete.js
 * Copyright (c) 2012 AUTHORS.txt; Licensed MIT, GPL */
(function(a,b){var c=0;a.widget("ui.autocomplete",{options:{appendTo:"body",autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null},pending:0,_create:function(){var b=this,c=this.element[0].ownerDocument,d;this.isMultiLine=this.element.is("textarea"),this.element.addClass("ui-autocomplete-input").attr("autocomplete","off").attr({role:"textbox","aria-autocomplete":"list","aria-haspopup":"true"}).bind("keydown.autocomplete",function(c){if(b.options.disabled||b.element.propAttr("readOnly"))return;d=!1;var e=a.ui.keyCode;switch(c.keyCode){case e.PAGE_UP:b._move("previousPage",c);break;case e.PAGE_DOWN:b._move("nextPage",c);break;case e.UP:b._keyEvent("previous",c);break;case e.DOWN:b._keyEvent("next",c);break;case e.ENTER:case e.NUMPAD_ENTER:b.menu.active&&(d=!0,c.preventDefault());case e.TAB:if(!b.menu.active)return;b.menu.select(c);break;
    case e.ESCAPE:b.element.val(b.term),b.close(c);break;
    default:clearTimeout(b.searching),b.searching=setTimeout(function(){
        /*此处修改过。空格过滤：(b.element.val()--->$.trim(b.element.val())*/
        b.term!=$.trim(b.element.val())&&(b.selectedItem=null,b.search(null,c))},b.options.delay)}}).bind("keypress.autocomplete",function(a){d&&(d=!1,a.preventDefault())}).bind("focus.autocomplete",function(){if(b.options.disabled)return;b.selectedItem=null,b.previous=b.element.val()}).bind("blur.autocomplete",function(a){if(b.options.disabled)return;clearTimeout(b.searching),b.closing=setTimeout(function(){b.close(a),b._change(a)},150)})
    .bind("input.autocomplete", function() {/*此处修改过。fix ff下中文不提示bug*/
        b.search(b.item);
    }),this._initSource(),this.menu=a("<ul></ul>").addClass("ui-autocomplete").appendTo(a(this.options.appendTo||"body",c)[0]).mousedown(function(c){var d=b.menu.element[0];a(c.target).closest(".ui-menu-item").length||setTimeout(function(){a(document).one("mousedown",function(c){c.target!==b.element[0]&&c.target!==d&&!a.ui.contains(d,c.target)&&b.close()})},1),setTimeout(function(){clearTimeout(b.closing)},13)}).menu({focus:function(a,c){var d=c.item.data("item.autocomplete");!1!==b._trigger("focus",a,{item:d})&&/^key/.test(a.originalEvent.type)&&b.element.val(d.value)},selected:function(a,d){var e=d.item.data("item.autocomplete"),f=b.previous;b.element[0]!==c.activeElement&&(b.element.focus(),b.previous=f,setTimeout(function(){b.previous=f,b.selectedItem=e},1)),!1!==b._trigger("select",a,{item:e})&&b.element.val(e.value),b.term=b.element.val(),b.close(a),b.selectedItem=e},blur:function(a,c){b.menu.element.is(":visible")&&b.element.val()!==b.term&&b.element.val(b.term)}}).zIndex(this.element.zIndex()+1).css({top:0,left:0}).hide().data("menu"),a.fn.bgiframe&&this.menu.element.bgiframe(),b.beforeunloadHandler=function(){b.element.removeAttr("autocomplete")},a(window).bind("beforeunload",b.beforeunloadHandler)},destroy:function(){this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup"),this.menu.element.remove(),a(window).unbind("beforeunload",this.beforeunloadHandler),a.Widget.prototype.destroy.call(this)},_setOption:function(b,c){a.Widget.prototype._setOption.apply(this,arguments),b==="source"&&this._initSource(),b==="appendTo"&&this.menu.element.appendTo(a(c||"body",this.element[0].ownerDocument)[0]),b==="disabled"&&c&&this.xhr&&this.xhr.abort()},
    _initSource:function(){
        var b=this,c,d;a.isArray(this.options.source)?(c=this.options.source,this.source=
            function(b,d){d(a.ui.autocomplete.filter(c,b.term))}):typeof this.options.source=="string"?(d=this.options.source,this.source=
            function(c,e){b.xhr&&b.xhr.abort(),b.xhr=a.ajax({url:d,type:"post",
                data:$.isFunction( b.options.datafuc )?b.options.datafuc.call(this,c):c,dataType:"json",success:function(a,b){e(a)},error:function(){e([])}})}):this.source=this.options.source},
    search:function(a,b){/*此处修改过。空格过滤：(this.element.val()--->$.trim(this.element.val())*/
        a=a!=null?a:$.trim(this.element.val()),this.term=$.trim(this.element.val());if(a.length<this.options.minLength)return this.close(b);clearTimeout(this.closing);if(this._trigger("search",b)===!1)return;return this._search(a)},_search:function(a){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.source({term:a},this._response())},_response:function(){var a=this,b=++c;return function(d){b===c&&a.__response(d),a.pending--,a.pending||a.element.removeClass("ui-autocomplete-loading")}},__response:function(a){!this.options.disabled&&a&&a.length?(a=this._normalize(a),this._suggest(a),this._trigger("open")):this.close()},close:function(a){clearTimeout(this.closing),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.deactivate(),this._trigger("close",a))},_change:function(a){this.previous!==this.element.val()&&this._trigger("change",a,{item:this.selectedItem})},_normalize:function(b){return b.length&&b[0].label&&b[0].value?b:a.map(b,function(b){return typeof b=="string"?{label:b,value:b}:a.extend({label:b.label||b.value,value:b.value||b.label},b)})},_suggest:function(b){var c=this.menu.element.empty().zIndex(this.element.zIndex()+1);this._renderMenu(c,b),this.menu.deactivate(),this.menu.refresh(),c.show(),this._resizeMenu(),c.position(a.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(new a.Event("mouseover"))},_resizeMenu:function(){var a=this.menu.element;a.outerWidth(Math.max(a.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(b,c){var d=this;a.each(c,function(a,c){d._renderItem(b,c)})},_renderItem:function(b,c){return a("<li></li>").data("item.autocomplete",c).append(a("<a></a>").text(c.label)).appendTo(b)},_move:function(a,b){if(!this.menu.element.is(":visible")){this.search(null,b);return}if(this.menu.first()&&/^previous/.test(a)||this.menu.last()&&/^next/.test(a)){this.element.val(this.term),this.menu.deactivate();return}this.menu[a](b)},widget:function(){return this.menu.element},_keyEvent:function(a,b){if(!this.isMultiLine||this.menu.element.is(":visible"))this._move(a,b),b.preventDefault()}}),a.extend(a.ui.autocomplete,{escapeRegex:function(a){return a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")},filter:function(b,c){var d=new RegExp(a.ui.autocomplete.escapeRegex(c),"i");return a.grep(b,function(a){return d.test(a.label||a.value||a)})}})})(jQuery);(function(a){a.widget("ui.menu",{_create:function(){var b=this;this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role:"listbox","aria-activedescendant":"ui-active-menuitem"}).click(function(c){if(!a(c.target).closest(".ui-menu-item a").length)return;c.preventDefault(),b.select(c)}),this.refresh()},refresh:function(){var b=this,c=this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","menuitem");c.children("a").addClass("ui-corner-all").attr("tabindex",-1).mouseenter(function(c){b.activate(c,a(this).parent())}).mouseleave(function(){b.deactivate()})},activate:function(a,b){this.deactivate();if(this.hasScroll()){var c=b.offset().top-this.element.offset().top,d=this.element.scrollTop(),e=this.element.height();c<0?this.element.scrollTop(d+c):c>=e&&this.element.scrollTop(d+c-e+b.height())}this.active=b.eq(0).children("a").addClass("ui-state-hover").attr("id","ui-active-menuitem").end(),this._trigger("focus",a,{item:b})},deactivate:function(){if(!this.active)return;this.active.children("a").removeClass("ui-state-hover").removeAttr("id"),this._trigger("blur"),this.active=null},next:function(a){this.move("next",".ui-menu-item:first",a)},previous:function(a){this.move("prev",".ui-menu-item:last",a)},first:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},last:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},move:function(a,b,c){if(!this.active){this.activate(c,this.element.children(b));return}var d=this.active[a+"All"](".ui-menu-item").eq(0);d.length?this.activate(c,d):this.activate(c,this.element.children(b))},nextPage:function(b){if(this.hasScroll()){if(!this.active||this.last()){this.activate(b,this.element.children(".ui-menu-item:first"));return}var c=this.active.offset().top,d=this.element.height(),e=this.element.children(".ui-menu-item").filter(function(){var b=a(this).offset().top-c-d+a(this).height();return b<10&&b>-10});e.length||(e=this.element.children(".ui-menu-item:last")),this.activate(b,e)}else this.activate(b,this.element.children(".ui-menu-item").filter(!this.active||this.last()?":first":":last"))},previousPage:function(b){if(this.hasScroll()){if(!this.active||this.first()){this.activate(b,this.element.children(".ui-menu-item:last"));return}var c=this.active.offset().top,d=this.element.height(),e=this.element.children(".ui-menu-item").filter(function(){var b=a(this).offset().top-c+d-a(this).height();return b<10&&b>-10});e.length||(e=this.element.children(".ui-menu-item:first")),this.activate(b,e)}else this.activate(b,this.element.children(".ui-menu-item").filter(!this.active||this.first()?":last":":first"))},hasScroll:function(){return this.element.height()<this.element[a.fn.prop?"prop":"attr"]("scrollHeight")},select:function(a){this._trigger("selected",a,{item:this.active})}})})(jQuery);;
//autocomplete数据格式修改，item同时支持label和name
(function($){
    $.extend($.ui.autocomplete.prototype, {
        _renderMenu: function( ul, items ) {
            var self = this;
            $.each( items, function( index, item ) {
                self._renderItem( ul, item );
            });
        },
        _renderItem:function(ul,item){
            return $("<li></li>").data("item.autocomplete",item).append($("<a></a>").text(item.name?item.name:item.label)).appendTo(ul)
        },
        _normalize: function( items ) {
            // assume all items have the right format when the first item is complete
            if ( items.length && (items[0].name || items[0].label) && items[0].value ) {
                return items;
            }
            return $.map( items, function(item) {
                if ( typeof item === "string" ) {
                    return {
                        name: item,
                        value: item
                    };
                }else if(!!item.label){
                    return $.extend({
                        label: item.label || item.value,
                        value: item.value || item.label
                    }, item );
                }else{
                    return $.extend({
                        name: item.name || item.value,
                        value: item.value || item.name
                    }, item );
                }

            });
        }
    });
    $.extend( $.ui.autocomplete, {
        filter: function(array, term) {
            var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
            return $.grep( array, function(value) {
                return matcher.test( value.name || value.label || value.value || value );
            });
        }
    });
//自动完成分组功能
    $.widget( "custom.catcomplete", $.ui.autocomplete, {
        _renderMenu: function( ul, items ) {
            var self = this,
                currentCategory = "";
            $.each( items, function( index, item ) {
                if ( item.category != currentCategory ) {
                    ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
                    currentCategory = item.category;
                }
                self._renderItem( ul, item );
            });
        }
    });

/**
  * 创建一个autocomplete控件,自动提示
  * @function
  * @return {Object} ui控件
  */
 biz.autocomplete = biz.createUI(function(options){
     if(typeof options == "object"){     
         var me = this;
         me.target = options.id;
         me.uiType = 'autocomplete';
         options.target = options.id;
     }else{
        jAlert(I18N.param_error + options , I18N.promp);
     }   
 }).extend({
     init:function(opts){
         var completeObj,validOpts = biz.utils.getValidOptions(opts);
         var url = (opts.url==""||opts.url==undefined)?undefined:opts.url;
         var data = (opts.data==""||opts.data==undefined)?undefined:opts.data;
         var paraSource = url==undefined?data:url;
         if(paraSource!=undefined){
             opts.source = paraSource;
         }
        //多选处理
         if(opts.multiselect){
             var tempSource;
             if(typeof opts.source == "string"){
                 $.ajax({
                     dataType: "json",
                     type:"POST",
                     url: opts.source,
                     success: function(data) {
                         tempSource = data;
                     },
                     error: function(xhr, error, thrown){
                    	 opts.error(xhr, error, thrown);
                     }
                 });
             }else if( typeof opts.source == "object"){
                 tempSource = opts.source;
             }else{
                 jAlert(I18N.param_error + opts.source , I18N.promp);
             }
             opts.source = function( request, response ) {
                 var reg=new RegExp(this.options.separator + "\\s*");
                 response( $.ui.autocomplete.filter(
                     tempSource, request.term.split( reg ).pop() ) );
             }
             if(typeof opts.focus == "undefined"){
                 opts.focus = function() {
                     // prevent value inserted on focus
                     return false;
                 }
             }
             //如定义了select事件，把其拷贝到selectCopy
             if(opts.select){var selectCopy = $.extend({},{select:opts.select})}
             function selectfnc( event, ui ) {
                 var reg=new RegExp(opts.separator + "\\s*");
                 var terms = this.value.split( reg );
                 // remove the current input
                 terms.pop();
                 // add the selected item
                 terms.push( ui.item.value );
                 // add placeholder to get the comma-and-space at the end
                 terms.push( "" );
                 this.value = terms.join( opts.separator );
                 if(selectCopy){selectCopy.select.call(event, ui);}
                 return false;
             }
             opts.select = selectfnc ;
         }
         
         //自动完成列表分类
         completeObj = opts.category ? $(opts.target).catcomplete(opts) : $(opts.target).autocomplete(opts) ;
         biz.utils.initValidate(validOpts);
         return completeObj;
     },
     defaults:{
        multiselect:false,//是否可多选
        separator:",",//多选分隔符
        category:false,//自动完成列表是否分类
        disabled:false,
        appendTo:"body",
        autoFocus:false,
        delay: 300,
        minLength:1,
        position:{ my: "left top", at: "left bottom", collision: "none" },
        source:"",
        url:"",
        error: function(xhr, error, thrown){
        	//biz.utils.loadError(xhr,error, thrown); 多选时可用
        }
     },
     methods:{
        enable:function(){
            $(this.target).autocomplete("enable");
        },
        disable:function(){
            $(this.target).autocomplete("disable");
        },
        destroy:function(){
            $(this.target).autocomplete("destroy");
        },
        /*
         *opts为属性对象时为给多个属性同时设置值；{属性1:"属性值1"，属性2:"属性值2"}
         *opts为字符串时为给单个属性取值或设置值
         */
        option:function(opts ,value){
           // $(this.target).autocomplete("option",opts,value);
            if(value){
                $(this.target).autocomplete("option",opts,value);
            }else{
                return $(this.target).autocomplete("option",opts);
            }
        },
        widget:function(){
            $(this.target).autocomplete("widget");
        },
        search:function(value){
            $(this.target).autocomplete("search",value);
        },
        close:function(){
            $(this.target).autocomplete("close");
        },
        setValue : function(value){
            $(this.target).val(value);
        },
        getValue : function(){
            return $(this.target).val();
        }
     }
     });
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.comboboxlist.js comboboxlist组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

 /**
 * 创建一个comboboxlist控件,下拉多列数据选择列表
 * @function
 * @return {Object} ui控件
 */
 biz.comboboxlist = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'comboboxlist' ;
	    options.target = options.id;
    }else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	var validOpts = biz.utils.getValidOptions(opts);
        var returnObj,targetElem = opts.targetElem ? opts.targetElem:(opts.id);
        opts.id = "#"+$(targetElem).attr("id");
        returnObj = $(targetElem).dropdownlist(opts);
        returnObj.disable = returnObj[0].disable ;//禁用下拉列表方法
        returnObj.enable = returnObj[0].enable ;//启用下拉列表方法
        biz.utils.initValidate(validOpts);
        return returnObj;
    },
    defaults:{
        checkbox:true,
        ajaxOptions:{
       	  type: "get",
       	  dataType:"json",
          data: "",
          error:function(xhr,st,err){
            	   //biz.utils.loadError(xhr,st,err);
          }
       }
    },
    methods:{
        getParam : function(pName) {
            var $t = this[0];
            if (!$t || !$t.settings) {return;}
            if (!pName) { return $t.settings; }
            else {return typeof($t.settings[pName]) != "undefined" ? $t.settings[pName] : null;}
        },
        setParam : function (newParams){
            return this.each(function(){
                if (this.settings && typeof(newParams) === 'object') {$.extend(true,this.settings,newParams);}
            });
        },
        getValue : function() {
            return $(this).val();
        },
        setValue : function (values){
            return this.each(function(){
                if (this.settings &&  values != "undefined" && values != null) {$.extend(true,this.settings,{"selected":values});}
                $(this).trigger("reload");
                $(this).removeAttr("selectedtmptext").removeAttr("selectedtmpvalue").removeAttr("text");
            });
        }
    }
 });

/*
    原生DropdownList组件
*/ 
 (function($){
    $.fn.dropdownlist=function(opts){
        var settings = {
                        id:'',
                        width:198,
                        height:"auto",
                        listwidth:198,
                        zindex:20000,
                        columns:1, 
                        checkbox:false,
                        valuedway:"click",
                        maxchecked:0,//默认无限选
                        selectedtext:'',
                        //usinglimit:true,
                        offsetLeft:0,
                        sorttype:"row",
                        requiredvalue:[],
                        disabled:false,
                        selectclass:'ddl-select', 
                        listboxclass:'ddl-listbox',
                        selected:"",
                        data:[],//[{value:1,name:'北京'},{value:2,name:'上海'}]
                        url:"",
                        onchange:null,
                        position:"left",
                        callback:{
                            beforeConfirm:null,
                            beforeCancel:null,
                            beforeClear:null
                            }
                        };
        
        var stopBubble=function (a) {
            var a = a || window.event;
            if (a.stopPropagation) {
                a.stopPropagation()
            } else {
                window.event.cancelBubble = true
            }
        };


        return this.each(function(){
            opts.id = opts.id?$(opts.id).attr("id"):this.id;
            $.extend(settings , opts || {});
            settings.selected = settings.selected.split(",");
            this.settings = settings;
            //if(settings.id=='') throw new Error('dropdownlist 的id不能为空。');
            if(settings.checkbox){
                for(var _i=0;_i<settings.requiredvalue.length;_i++){
                    if($.inArray(settings.requiredvalue[_i],settings.selected)==-1) {
                        throw new Error(settings.id+I18N.dropdownlist_mustcheck_error);
                    }
                }
                //判断设置默认选择的初始值的个数是否超出了maxchecked
                if(settings.maxchecked != 0 && settings.selected.length>settings.maxchecked)
                    throw new Error(settings.id+I18N.dropdownlist_limit_error);
            }

            //by jdh   把对$this的操作放到contentElem上
            var $this = $(this);
           // var objid = $("#"+settings.id);//eval(settings.id);
            var contentElem ,$listContent,spanElem,$spanElem;
            //创建contentElem元素 ,不重复创建
            if(!$("#"+opts.id+"_listContent").length > 0){
                 contentElem=document.createElement("div");
                 $listContent = $(contentElem);
                 $(contentElem).attr("id",opts.id+"_listContent");
                 $(contentElem).addClass("dropdownlist");
                 $listContent.attr("style","display:none; position: absolute;z-index:" + settings.zindex + ";");
                 $("body").append($listContent);
            }else{
                $listContent = $("#"+opts.id+"_listContent");
            }
            //增加span标签
            spanElem=document.createElement("span");
            $spanElem = $(spanElem);
            $spanElem.addClass("droplist csiui-file-wrapper ui-widget");
            $spanElem.attr("id",$this.attr("id")+"_span");
            $spanElem.width(settings.width);
            $spanElem.live("click",function(){_showMenu();});
            $this.hide();
            $(this).after($spanElem);

            function _showMenu() {
                if(settings.disabled){
                    //禁用下拉树，不做任何处理
                }else{
                    var cityObj = $(opts.id),
                        cityOffset = $(spanElem).offset(),
                        leftPos = cityOffset.left + settings.offsetLeft,
                        topPos = cityOffset.top + $(spanElem).outerHeight(),
                        rightPos = leftPos + $(spanElem).outerWidth() - $("#"+opts.id+"_listContent").outerWidth() + settings.offsetLeft;
                    //显示下拉列表框之前触发
                	if(typeof settings.showMenuBefore == "function"){
	            		settings.showMenuBefore.call($this,settings);
	            	}
                    //增加position属性，设置弹出框与输入框对齐位置
                    $("#"+opts.id+"_listContent").css({ width:settings.listwidth,height:settings.height,left : settings.position == "right" ? rightPos :leftPos + "px", top:topPos + "px"}).slideDown("fast");
                    $("body").bind("mousedown", _onBodyDown);
                    $listContent.bind("focus", _ontargetDown);
                    var checkData = $this.val().split(',');
                    var tempval = "",temptxt = "" ;
                    for(var i=0;i<checkData.length;i++){
                       if( $("input[value='"+checkData[i]+"']",$listContent).length>0){
                            $("input[value='"+checkData[i]+"']",$listContent).attr('checked','checked');
                            tempval = tempval + checkData[i] + ((i==(checkData.length-1))?"":",");
                            temptxt = temptxt + $("input[value='"+checkData[i]+"']",$listContent).attr('txt')  + ((i==(checkData.length-1))?"":",");
                       }
                    }
                    //有全选的情况
                    if(settings.checkbox == true && settings.selectAll == true){
                        //数据全选的情况
                        if(checkData.length == listdata.length){
                            $("[name=selectAll]").attr("checked","checked");
                        }
                        else{
                             $("[name=selectAll]").removeAttr("checked");
                        }
                    }
                    $this.attr("selectedTmpText", temptxt);
                    $this.attr("selectedTmpValue", tempval);
                    
                    //单选情况下，使被选值有底色，方便用户识别
                    if(!settings.checkbox)
                    {
                        $("#"+opts.id+"_listContent td").each(function(){
                            $(this).click(function(){
                                $(".clickToSelect").removeClass("clickToSelect");
                            
                                $(this).addClass("clickToSelect");  
                            })
                        });
                    }
                }
            }
            function _hideMenu() {
                //去掉被选值底色，防止点击下拉列表之外的页面后还保留底色的情况
                $("#"+opts.id+"_listContent .clickToSelect").removeClass("clickToSelect");
                $("#"+opts.id+"_listContent").fadeOut("fast");
                $("body").unbind("mousedown", _onBodyDown);
               // $listContent.unbind("keydown", _ontargetDown);
                $listContent.unbind("focus", _ontargetDown);
            }
            function _onBodyDown(event) {
                if (!(event.target.id == opts.id || event.target.id == opts.id+"_listContent" || $(event.target).parents("#"+opts.id+"_listContent").length>0)) {
                   // _setval();
                    _hideMenu();
                }
            }
            function _ontargetDown(event) {
                if (!(event.target.id == opts.id || event.target.id == opts.id+"_listContent" || $(event.target).parents("#"+opts.id+"_listContent").length>0)) {
                    _hideMenu();
                }
            }
            function _setval(){
                if(typeof($this.attr('selectedTmpValue'))!='undefined'){
                        //modify by futh 修复“请选择”无法去掉的bug
                        var temtext = $this.attr('selectedTmpText');
                        var temvalue= $this.attr('selectedTmpValue');
                        if(temvalue==""){
                            $this.attr({'selectedText':I18N.dropdownlist_defaultValue,'selectedValue':""});

                        }else{
                             var temvalue=$this.attr('selectedTmpValue');
                            if(temtext.indexOf(I18N.dropdownlist_defaultValue)>-1 ){
                                 temtext = temtext.substring(4,temtext.length);
                                 temvalue = temvalue.substring(1,temvalue.length);
                             }
                            $this.attr({'selectedText':temtext,'selectedValue':temvalue});
                        }

                        //select.attr({'selectedTmpText':'','selectedTmpValue':''});

                    }
                    $this.text = $this.attr('selectedText');
                    $this.value = $this.attr('selectedValue');
                    changeval();
                    $spanElem.text($this.attr('selectedText'));
            }
            function changeval(){
                //$('#'+settings.id).val(objid.value);
                $this.val($this.value);
                //$this.attr("value", $this.value);
                $this.attr("text",$this.value);
                if($this.onchange)$this.onchange($this.text,$this.value);
                //给下拉列表添加change事件侦听用于去掉校验红框
                $this.trigger("change");
            }
            
            function beforeConfirm()
            {
                var text = $this.attr('selectedTmpText');
                var value = $this.attr('selectedTmpValue');
                if($this.beforeConfirm)
                {
                    var result = $this.beforeConfirm.call(this, text, value);
                    if(result != undefined)
                        return result;
                }
                return true;
            }
            
            function beforeCancel()
            {
                var text = $this.attr('selectedTmpText');
                var value = $this.attr('selectedTmpValue');
                if($this.beforeCancel)
                {
                    var result = $this.beforeCancel.call(this, text, value);
                    if(result != undefined)
                        return result; 
                }
                return true;
            }
            function beforeClear()
            {
                $this.attr({'selectedTmpText':I18N.dropdownlist_defaultValue,'selectedTmpValue':''});
                if($this.beforeClear)
                {
                    var result = $this.beforeClear.call(this);
                    if(result != undefined)
                        return result; 
                }
                return true;
            }
            $listContent.empty();
            window[settings.id]={};
            $this.onchange=settings.onchange;
            $this.beforeConfirm = settings.callback.beforeConfirm;
            $this.beforeCancel = settings.callback.beforeCancel;
            $this.beforeClear = settings.callback.beforeClear;
            
            if(navigator.userAgent.toLowerCase().indexOf('msie 6.0')!=-1)
            {
                $this.mouseover(function(){
                    if(!$this.hasClass('hover'))$this.addClass('hover');
                }).mouseout(function(){
                    if($this.hasClass('hover'))$this.removeClass('hover');
                });
            }
            settings.listboxwidth = settings.listboxwidth<=0?$this.outerWidth():settings.listboxwidth;
            /*  by jdh 把table直接放到$listContent上
            var listbox = $('<div>',{
                            'class':settings.listboxclass+' ddlclass',
                            'html':'<table width="100%" cellpadding="5" cellspacing="0" border="0" style="line-height:12px; font-size: 12px;"><tbody></tbody></table>',
                            'css': {'position':'absolute','width':settings.listboxwidth,'overflow':'hidden','overflow-y':'auto','display':'none','z-index':1000}
                        }).appendTo($listContent);
                       // }).appendTo("body");
            */
            var listbox =  $listContent;
            var tfoot;
            if(!$("table","#"+opts.id+"_listContent").length > 0){
                 if( $.browser.msie && parseInt($.browser.version) <= 6 ){
                       $('<iframe id="iframeD" style="border:none;filter:alpha(opacity=0);-moz-opacity:0;position:absolute; z-index:-1"></iframe><table class="ddl-listbox ddclass" width="100%" height="100%" cellpadding="5" cellspacing="0" border="0" style="line-height:12px; font-size: 12px;"><tbody></tbody></table>')
                           .appendTo($listContent);
                 }else{
                        $('<table class="ddl-listbox ddclass" width="100%" height="100%" cellpadding="5" cellspacing="0" border="0" style="line-height:12px; font-size: 12px;"><tbody></tbody></table>')
                           .appendTo($listContent);
                 }
                 
               //单选
                 if(!settings.checkbox)
                 {
                    //button方式选择，构造button；否则不构造
                    if(settings.valuedway == "button")
                    {
                        tfoot = $('<tfoot><td colspan="'+settings.columns+'"><span class="btn-area" style="float:right;"><input type="button" value="'+I18N.dropdownlist_bConfirm+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bCancel+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bClear+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"></span></td></tfoot>');
                    }
                 }
                 //多选
                 else
                 {
                    if(settings.valuedway == "click")
                    {
                        //限选无button
                        if(settings.maxchecked > 0)
                        {
                            tfoot = $('<tfoot><td colspan="'+settings.columns+'"><span class="info" style="float:left;">'+I18N.dropdownlist_mostChecked_1+settings.maxchecked+I18N.dropdownlist_mostChecked_2+'</span></td></tfoot>');
                        }
                    }
                    else
                    {
                        //限选有button
                        if(settings.maxchecked > 0)
                        {
                            tfoot = $('<tfoot><td colspan="'+settings.columns+'"><span class="info" style="float:left;">'+I18N.dropdownlist_mostChecked_1+settings.maxchecked+I18N.dropdownlist_mostChecked_2+'</span><span class="btn-area" style="float:right;"><input type="button" value="'+I18N.dropdownlist_bConfirm+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bCancel+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bClear+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"></span></td></tfoot>');
                        }
                        //不限选有button
                        else
                        {
                            tfoot = $('<tfoot><td colspan="'+settings.columns+'"><span class="btn-area" style="float:right;"><input type="button" value="'+I18N.dropdownlist_bConfirm+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bCancel+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><input type="button" value="'+I18N.dropdownlist_bClear+'" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"></span></td></tfoot>');
                        }
                    }
                 }  
                
                $('table',listbox).append(tfoot);

            }else{
                  tfoot = $("tfoot","#"+opts.id+"_listContent");
            }
            var _btn = $('input',tfoot);
            $(_btn[0]).click(function(){
                //增加点击确定按钮的事件
                if(beforeConfirm())
                {
                    _setval();
                    $this.hide(true);
                    _hideMenu();
                }
            });
            $(_btn[1]).click(function(){
                //增加点击取消按钮的事件
                 if(beforeCancel())
                 {     
                    $this.hide();
                    _hideMenu();
                 }
            });
            $(_btn[2]).click(function(){
                //增加点击清空按钮的事件
                 if(beforeClear())
                 {     
                    _setval();
                    $this.hide();
                    _hideMenu();
                 }
            });
            var table = $('table>tbody',listbox).get(0);    
            $this.disable=function(){
                settings.disabled=true;
                if(!$this.hasClass('ddl-disabled'))
                {
                    $this.addClass('ddl-disabled');
                    $this.next().addClass('ddl-disabled-forSpan');
                }
                    
            };
            $this.enable=function(){
                $this.removeClass('ddl-disabled');
                $this.next().removeClass('ddl-disabled-forSpan');
                settings.disabled=false;
            };
            $this.init = function(mdata,selectedValue){
                var row,cell,chk,lbl;
                var index = 0;  
                if(!$.isArray(selectedValue)){selectedValue = selectedValue.split(",");}
                var selecttextarr = [],selectvaluearr = [];
                if(selectedValue){
                    $.each(selectedValue,function(i,n){
                        var tmptxt = "";
                        //数据格式修改
                        for(var j=0;j<mdata.length;j++){
                            if( mdata[j].value == n){
                                 tmptxt = mdata[j].name;
                                 break;
                            }
                        }
                        tmptxt = tmptxt.replace(/,/g,',');
                        selecttextarr[selecttextarr.length]=tmptxt;
                    });             
                }
                if(settings.selectedtext!=''){
                    if(!$.isArray(settings.selectedtext)){
                        selecttextarr = settings.selectedtext.split(",");
                    }else{
                        selecttextarr = settings.selectedtext ;
                    }
                    $.each(selecttextarr,function(i,n){
                        var tmpvalue = "";
                        //数据格式修改
                        for(var j=0;j<mdata.length;j++){
                            if( mdata[j].name == n){
                                tmpvalue = mdata[j].value;
                                 break;
                            }
                        }
                        tmpvalue = tmpvalue.replace(/,/g,',');
                        selectvaluearr[selectvaluearr.length]=tmpvalue;
                    });         
                    selectedValue = selectvaluearr;
                }
                var selecttext = selecttextarr.join(',');
                selecttext = selecttext==''?I18N.dropdownlist_defaultValue:selecttext;
                selecthtml = settings.checkbox&&settings.selectedtext!=''?settings.selectedtext:selecttext;
                var selectvalue = selectedValue.join(',');
                //select.attr({'selectedText':selecttext,'selectedValue':settings.selected.join(';')}).html(selecthtml);
                $this.attr({'selectedText':selecttext,'selectedValue':selectvalue}).val(selectvalue);
                $spanElem.html(selecthtml);
                $(table).html('');
                //单元格内容按照列排列,预定义所有行
                var rowNum = Math.ceil(mdata.length / settings.columns),rowArr = [] ;

                //数据格式修改为[{value:1,name:'北京'},{value:2,name:'上海'}]
                $.each(mdata,function(index,objelemt){
                    var k = objelemt.value,v = objelemt.name,img = objelemt.img;            
                    //添加单元格按照列排序功能
                    if(settings.sorttype == "column"){
                        var colIdex = Math.floor(index / rowNum),
                            rowIdex = Math.floor(index % rowNum);
                        cell = rowArr[rowIdex].insertCell(colIdex);
                    }else if( settings.sorttype == "row"){
                        if (index % settings.columns == 0) { row = table.insertRow(-1); }
                         cell = row.insertCell(index%settings.columns);
                    }
                    var $cell = $(cell);
                    if(navigator.userAgent.toLowerCase().indexOf('msie 6.0')!=-1)
                    {
                        $cell.mouseover(function(){
                            if(!$cell.hasClass('hover'))$cell.addClass('hover');
                        }).mouseout(function(){
                            if($cell.hasClass('hover'))$cell.removeClass('hover');
                        });
                    }
                    lbl = v.replace(/,/g,',');
                    var dropownlistimg ;
                    if(img!=null && img!= undefined){
                        dropownlistimg = $("<img src='"+img+"' align='center' style='margin-right:10px'></img>");
                    }
                    if(dropownlistimg!=null && dropownlistimg!= undefined){
                        $cell.append(dropownlistimg);
                    }
                    if(settings.checkbox)
                    {
                        chk=$('<input>',{type:'checkbox',value:k,'txt':lbl});
                        if($.inArray(k,selectedValue)!=-1)chk.attr('checked','checked');
                        if($.inArray(k,settings.requiredvalue)!=-1){chk.attr('disabled','disabled');}
                        $cell.append(chk);
                    }
                    
                    $cell.append(lbl);
                    $cell.attr('value',k).css({'cursor':'pointer'}).click(function(evt){
                    	//点击下拉列表里输入框或者输入框父元素不做任何处理
                    	if(($(evt.target)[0].nodeName.toLocaleLowerCase() == "input" && $(evt.target)[0].type.toLocaleLowerCase() == "text")  
                    		||  ($(evt.target)[0].nodeName.toLocaleLowerCase() == "td" &&  $(evt.target).find("input").length > 0) ) return;
                        var tmp = $('input',$(this));
                        if(tmp.attr('disabled')){stopBubble(evt);return;}
                        if(settings.checkbox){
                            if(tmp.attr('disabled')=='disabled')return;
                            var obj = evt.srcElement || evt.target;
                            
                            var tmptext = $this.attr('selectedTmpText');
                            var tmpvalue = $this.attr('selectedTmpValue');
                            tmptext = typeof(tmptext)!='undefined'?(tmptext!=''?tmptext.split(','):[]):$this.text.split(',');
                            tmpvalue = typeof(tmpvalue)!='undefined'?(tmpvalue!=''?tmpvalue.split(','):[]):$this.value.split(',');
                            
                            if(obj.tagName && obj.tagName.toLowerCase()!='input'){
                                if(tmp.attr('checked')) tmp.removeAttr('checked');
                                else tmp.attr('checked','checked');
                            }
                            if(!tmp.attr('checked'))
                            {
                                var _i = $.inArray(tmp.val(),tmpvalue); 
                                if(_i>-1){
                                    tmpvalue.splice(_i,1);
                                    tmptext.splice(_i,1);
                                }
                            }
                            else{
                                //如果已经存在就不再追加（因为在IE9及以上版本，双击checkbox会导致重复设置，考虑到下拉列表中的value不会存在重复的值，所以这样改合理）
                                var exits = false;
                                for(var i in tmpvalue) {  
                                   if(tmpvalue[i]==tmp.val()) {
                                       exits = true;
                                   }
                                }  
                                if(!exits){
                                    tmpvalue[tmpvalue.length]=tmp.val();
                                    tmptext[tmptext.length]=tmp.attr('txt');
                                }
                            }
                            
                            //判断所选个数是否超出设定个数
                            if(settings.maxchecked != 0 && tmpvalue.length>settings.maxchecked){
                                var _i=0
                                for(;_i<tmpvalue.length;_i++)
                                {
                                    if($.inArray(tmpvalue[_i],settings.requiredvalue)==-1)break;
                                }
                                $('input[value="'+tmpvalue[_i]+'"]',listbox).removeAttr('checked');
                                tmpvalue.splice(_i,1);
                                tmptext.splice(_i,1);
                            }
                            $this.attr({'selectedTmpText':tmptext.join(','),'selectedTmpValue':tmpvalue.join(',')});
                            stopBubble(evt);
                            if(settings.valuedway =="click") _setval();
                        }else{
                            $this.attr({'selectedTmpText':$(this).text(),'selectedTmpValue':$(this).attr('value'),'selectedText':$(this).text(),'selectedValue':$(this).attr('value')});
                            $this.value = $this.attr('selectedValue');
                            $this.text = $this.attr('selectedText');
                            if(settings.valuedway =="click") _setval();
                        }
                        if(!settings.checkbox)changeval();
                    });                 
                    index++;
                });
                
                //添加全选按钮
                if(settings.checkbox == true && settings.selectAll == true){
                    var selectAll = table.insertRow(0);
                    
                    $(selectAll).html('<td><input type="checkbox" name="selectAll"/>'+I18N.dropdownlist_selectAll+'</td>');
                    $("td",selectAll).css({'cursor':'pointer'}).click(function(event){
                        if($("input",this)[0].checked){
                            
                            var tmptext = $this.attr('selectedTmpText');
                            var tmpvalue = $this.attr('selectedTmpValue');
                            tmptext = typeof(tmptext)!='undefined'?(tmptext!=''?tmptext.split(','):[]):$this.text.split(',');
                            tmpvalue = typeof(tmpvalue)!='undefined'?(tmpvalue!=''?tmpvalue.split(','):[]):$this.value.split(',');
                            
                            $(":unchecked",table).each(function(){
                                    $(this)[0].checked = true;
                                    
                                    if($(this)[0].nodeName == "INPUT"){
                                        tmpvalue[tmpvalue.length]=$(this).val();
                                        tmptext[tmptext.length]=$(this).attr("txt");
                                    }
                                 }
                             )
                            $this.attr({'selectedTmpText':tmptext.join(','),
                                        'selectedTmpValue':tmpvalue.join(',')});
                         }
                         else{
                             $("input",table).each(function(){
                                    $(this)[0].checked = false;
                             });
                             $this.attr('selectedTmpText',"");    
                             $this.attr('selectedTmpValue',"");
                         }
                         if(settings.valuedway =="click") 
                            _setval();
                     });
                }

                if(cell && index%settings.columns!=0)$(cell).attr('colspan',settings.columns+1-index%settings.columns);

                //if(listbox.height()>settings.listboxmaxheight)listbox.height(settings.listboxmaxheight).css({'overflow':'hidden','overflow-y':'auto'});
            };
            $this.hide = function(clear){
                if(settings.checkbox && !clear){
                    $this.removeAttr('selectedTmpText');
                    $this.removeAttr('selectedTmpValue');
                    var tmpsv = $this.attr('selectedValue').split(';');
                    $('input',listbox).each(function(){
                        $(this).removeAttr('checked');
                    });
                    $.each(tmpsv,function(i,n){
                        $('input[value="'+n+'"]',listbox).attr('checked','checked');
                    });
                }
                $('div.'+settings.listboxclass,$listContent).hide();
            };
            this.disable = $this.disable;
            this.enable = $this.enable;
            function initdata(opt){
                var returnobj ;
                $.ajax($.extend({
                     type: "POST",
                     dataType:"json",
                     url: settings.url,
                     async:false,
                     success:function(data, textStatus, jqXHR){
                         returnobj =  data;
                     }
                  },opt));
                return returnobj;
            }
            
            var listdata;
            if(settings.data.length > 0){
                 listdata = settings.data;
                 $this.bind('reload', function(e,opt){
                	 if(typeof opt != "undefined"){$.extend(settings,opt);}
	                 listdata = settings.data ;
	                 $this.init(listdata,settings.selected); 
                 })
            }
            //如果属性中url非空，则ajax请求数据
            if(settings.url != "" ){
                 listdata = initdata(settings.ajaxOptions);
                 $this.bind('reload', function(e,opt){
                     if(typeof opt != "undefined"){$.extend(settings,opt);}
                     listdata = initdata(settings.ajaxOptions);
                     $this.init(listdata,settings.selected); 
                 })
            }

            $this.init(listdata,settings.selected);
            $this.text = $this.attr('selectedText');
            $this.value = $this.attr('selectedValue');
        });
    };
    
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.comboboxtree.js comboboxtree组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


 /**
 * 创建一个comboboxtree控件,下拉树选择列表
 * @function
 * @return {Object} ui控件
 */
 biz.comboboxtree = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'comboboxtree'  ;
    }else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	var treeObj,setting,targetElem = opts.targetElem ? opts.targetElem:(opts.id),id = $(targetElem).attr("id"),
            nodeid = opts.valueName ? opts.valueName : (opts.data.simpleData.enable ? (opts.data.simpleData.idKey ? opts.data.simpleData.idKey :"id"):opts.data.key.name),
            nodename = opts.data.key.name ? opts.data.key.name : "name" ;
            opts.id = "#"+id;
        var validOpts = biz.utils.getValidOptions(opts);
        function _createTree(){
            var contentElem = document.createElement("div"),
                treeElem = document.createElement("ul");
            $(contentElem).attr("id",id+"_menuContent");
            $(contentElem).addClass("menuContent");
            $(contentElem).attr("style","display:none; position: absolute;z-index:" + opts.zindex + ";");
            $(treeElem).attr("id",id+"_treeContent");
            $(treeElem).addClass("ztree");
            $(treeElem).css({width:opts.width,height:opts.height,"margin-top":0,"margin-left":0 });
            contentElem.appendChild(treeElem);
            $("body").append(contentElem);
        }
        function _showMenu() {
        	if(setting.disabled){
                // 禁用下拉树，不做任何处理
            }else{
            	var cityObj = $(opts.id),
	                cityOffset = $(spanElem).offset(),
					leftPos = cityOffset.left,
					topPos = cityOffset.top + $(spanElem).outerHeight(),
					rightPos = leftPos + $(spanElem).outerWidth() - $(opts.id+"_menuContent").outerWidth();
				//增加position属性，设置弹出菜单与输入框对齐位置
            	$(opts.id+"_menuContent").css({ left : setting.position == "right" ? rightPos : leftPos + "px", top:topPos + "px"}).slideDown("fast");
				$("body").bind("mousedown", _onBodyDown);
				$spanElem.bind("keydown", _ontargetDown);
				if(opts.callback.onShowMenu){opts.callback.onShowMenu.call(this,treeObj);}
            }
		}
        function _hideMenu() {
			$(opts.id+"_menuContent").fadeOut("fast");
			$("body").unbind("mousedown", _onBodyDown);
			$spanElem.unbind("keydown", _ontargetDown);
			if(opts.callback.onHideMenu){opts.callback.onHideMenu.call(this,treeObj);}
		}
        function _onBodyDown(event) {
			if (!(event.target.id == id || event.target.id == id+"_menuContent" || $(event.target).parents(opts.id+"_menuContent").length>0)) {
				_hideMenu();
			}
		}
        function _ontargetDown(event) {
			if ((event.target.id == id || event.target.id == id+"_menuContent" || $(event.target).parents(opts.id+"_menuContent").length>0)) {
				_hideMenu();
			}
		}
        function _beforeCheck(treeId, treeNode) {
            if(opts._beforeCheck){
				 var result = false;
				 result = opts._beforeCheck.call(this,treeId, treeNode);
				 opts.allowCheck = result;
				 return result;
		    }
		}
        function _beforeClick(treeId, treeNode,clickFlag) {
            if(opts._beforeClick){
				 var result = false;
				 result = opts._beforeClick.call(this,treeId, treeNode,clickFlag);
				 opts.allowClick = result;
				 return result;
		    }
            if(opts._beforeClick){return opts._beforeClick.call(this,treeId, treeNode,clickFlag);}
             /* if(opts.check !== undefined && opts.check.enable !== undefined && opts.check.enable){
                // treeObj.checkNode(treeNode, !treeNode.checked, null, true);
                // return true;
            }else{
            	//增加isParentSelect，設置父節點是否可選中
            	var check = (treeNode && (opts.isParentSelect?true:!treeNode.isParent));
                // return check;
            }*/
		}
        function _onCheck(e, treeId, treeNode) {
        	if(opts.allowCheck){
				var nodes = treeObj.getCheckedNodes(true),v = "",n = "";
				var displayHierarchy = opts.displayHierarchy;//如果不显示层级，则input上不显示
				for (var i=0, l=nodes.length; i<l; i++) {
					v += nodes[i][nodeid] + ",";
					if(!displayHierarchy && nodes[i].children != null  && nodes[i].children.length>0){
						continue;
					}	
					n += nodes[i][nodename] + ",";
				}
				if (v.length > 0 ) v = v.substring(0, v.length-1);
				if (n.length > 0 ) n = n.substring(0, n.length-1);
				$(targetElem).attr("value", v);
	            $spanElem.html(n);
	            if(opts._onCheck){opts._onCheck.call(this,e, treeId, treeNode);}
        	}
		}
        function _onClick(e, treeId, treeNode) {
        	if(opts.allowClick){
				//当节点为checkbox时，判断是否定义了clickToCheck属性，如果是，则点击触发勾选
				if(opts.check !== undefined && opts.check.enable !== undefined 
					&& opts.check.enable && opts.check.clickToCheck)
				{
					treeObj.checkNode(treeNode, !treeNode.checked, true, true);
				}
	
				//如果节点不为checkbox且节点为子节点（或者isParentSelect为true）把click节点值回填到input
	            if(!(opts.check !== undefined && opts.check.enable !== undefined && opts.check.enable)
	                && (opts.isParentSelect||!treeNode.isParent)){
	                var nodes = treeObj.getSelectedNodes(),v = "",n = "";
	                nodes.sort(function compare(a,b){return a.id-b.id;});
	                for (var i=0, l=nodes.length; i<l; i++) {
	                    v += nodes[i][nodeid] + ",";
	                    n += nodes[i][nodename] + ",";
	                }
	                if (v.length > 0 ) v = v.substring(0, v.length-1);
	                if (n.length > 0 ) n = n.substring(0, n.length-1);
	                $(targetElem).attr("value", v);
	                $spanElem.html(n);
	            }
	            if(opts._onClick){opts._onClick.call(this,e, treeId, treeNode);}
	            //给下拉树添加change事件，用于侦听去掉校验红框
	            $(targetElem).trigger("change");
        	}
        	if(opts.autoHideMenu&&!(opts.check !== undefined && opts.check.enable)){
        		_hideMenu();
        	}
		}
		//远程请求方式设置默认值需要在onAsyncSuccess回调函数中设置       
        function _onAsyncSuccess(e, treeId, treeNode) {
        	if(!!opts.selected){
            	_setval(opts.selected);//设置默认值，根据默认值勾选tree节点
            }
            if(opts._onAsyncSuccess){opts._onAsyncSuccess.call(this,e, treeId, treeNode);}
		}
        function _setval(values){
        	var name = "",idKeys = $.isArray(values) ? values : String(values).split(",");
            $(targetElem).attr("value",!$.isArray(values) ? values : values.join(","));
            for(var i=0;i<idKeys.length;i++){
                var node = treeObj.getNodesByParam(nodeid, idKeys[i], null);
                $.each( node, function(j, n){
                    name = name + node[j][nodename] + (i==(idKeys.length-1)?"":",");
                    if(!!opts.check ? !!opts.check.enable : false){
                        if(i==0){//check第一个节点时，首先取消所有已check节点
                            var checktreenode = treeObj.getCheckedNodes(true);
                            $.each(checktreenode,function(n,tempnode){
                                treeObj.checkNode(tempnode, false, true);
                            })
                        }
                        treeObj.checkNode(node[j], true, true);
                    }else{
                        treeObj.selectNode(node[j],true);
                    }
                });
            }
            if(name == ""){
                $spanElem.html(I18N.dropdownlist_defaultValue);
            }else{
                $spanElem.html(name);
            }
        }
        if(opts.callback !== undefined ){
            opts._beforeClick = opts.callback.beforeClick ;
            opts._onCheck = opts.callback.onCheck ;
            opts._onClick = opts.callback.onClick ;
            opts._onAsyncSuccess = opts.callback.onAsyncSuccess ;
        }
        opts.callback = $.extend(opts.callback||{},{onCheck:_onCheck,beforeClick:_beforeClick,onClick:_onClick,onAsyncSuccess:_onAsyncSuccess});
        
        //增加span标签
        var spanElem=document.createElement("span"),$spanElem = $(spanElem);
        $spanElem.addClass("droplist csiui-file-wrapper ui-widget");
        $spanElem.attr("id",$(targetElem).attr("id")+"_span");
        $spanElem.width(opts.width);
        $spanElem.live("click",function(){_showMenu();});
        $(targetElem).hide();
        $(targetElem).after($spanElem);


        //创建tree元素 ,不重复创建
        if(!$(opts.id+"_menuContent").length > 0){
            _createTree();
        }

        setting = $.extend({},opts,{id:opts.id+"_treeContent"});
        //初始化树
        treeObj = new biz.tree(setting);
        treeObj.uiType = 'comboboxtree' ;
        //根据默认值勾选tree节点
        if(!!opts.selected){
        	_setval(opts.selected);
        }
        treeObj.disable=function(){
            setting.disabled=true; //禁用下拉树
            if(!$spanElem.hasClass('ddl-disabled-forSpan'))
        	{
            	$spanElem.addClass('ddl-disabled-forSpan');
        	}
        };
        treeObj.enable=function(){
            setting.disabled=false;//启用下拉树
            if($spanElem.hasClass('ddl-disabled-forSpan'))
        	{
            	$spanElem.removeClass('ddl-disabled-forSpan');
        	}
        };
        treeObj.setValue=function(value){
			treeObj.checkAllNodes(false);
			var nodes = treeObj.getSelectedNodes();
			for(var i=0;i < nodes.length ;i++) { 
				treeObj.cancelSelectedNode(nodes[i]);
			}
            _setval(value);
        };
        treeObj.getValue=function(){
            return $(opts.id).val();
        }
        biz.utils.initValidate(validOpts);

        //提供初始化组件前的事件
        opts.beforeInit.call(this,treeObj);

        return treeObj;
    },
    defaults:{
    	width:198,
        zindex:2000,
        isParentSelect:false,
        disabled:false,
        data:{simpleData:{enable:false,idKey:"id"},key:{name:"name"},check:{enable: true}},
        valueName:"",//value值字段name，即树节点对象中作为value的字段名
        selected:"",//默认值选中值value，通过逗号分隔多个值，例如"shangdong,guangxi"
        position:"left",
		allowCheck:true,//beforeCkeck如果返回false，该值为false，否则为true
        allowClick:true,//beforeClick如果返回false，该值为false，否则为true
        autoHideMenu:true,//是否选择后自动隐藏菜单，checkbox除外
		displayHierarchy:true,//是否显示层级，默认显示
        beforeInit:function(){}
        
    }
 });
/*  Bizfoundation ui 5.1
 *  biz.datepicker.js datepicker组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

/**
 * Created with JetBrains PhpStorm.
 * User: jdh
 * Date: 13-8-19
 * Time: 下午2:50
 * To change this template use File | Settings | File Templates.
 */
/**
 * 创建一个datepicker控件,日期选择
 * @function
 * @return {Object} ui控件
 */
biz.datepicker = biz.createUI(function(options){
    if(typeof options == "object"){
        var me = this;
        me.target = options.id;
        me.uiType = 'datepicker'  ;
        options.target = options.id;
    }else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
}).extend({
        init:function(opts){
            var validOpts = biz.utils.getValidOptions(opts);
            $(opts.target).live(opts.event,function(){WdatePicker(opts)});
            biz.utils.initValidate(validOpts);
            return this;
        },
        defaults:{
            event:"focus" //focus or click
        },
        methods:{
            show:function(){
                $dp.show();
            },
            hide:function(){
                $dp.hide();
            },
            diffFormat:function(target,opt,isId){
                if(isId || typeof isId == undefined ){
                    $dp.$D(target,opt);
                }else{
                    $dp.$DV(target,opt);
                }
            },
            setValue : function(value){
                $(this.target).val(value);
            },
            getValue : function(){
                return $(this.target).val();
            }
        }
    });
/*  Bizfoundation ui 5.1
 *  biz.file.js file组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/**
 * 创建一个file控件,文件上传
 * @function
 * @return {Object} ui控件
 */
 biz.file = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'file';
	    options.target = options.id;
	    /*如果封装的属性结构与源结构对比需要调整，需要做以下两三步：
	     * 1、把options与this.defaults合并；
	     * 2、进行机构调整；
	     * 3、返回调整后属性options
	     * 源结构：  hint:{denied: "请选择正确的文件，后缀为：", wrongname: "请选择正确的文件，文件名为:"}
	     * 调整后结构  denied: "请选择正确的文件，后缀为：", wrongname: "请选择正确的文件，文件名为:"
	     *
	     */
	    options = $.extend(true,{},this.defaults,options) ;
	    options.hint = {"denied":options.denied?options.denied:0,"wrongname":options.wrongname?options.wrongname:0};
	    return options;
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	var validOpts = biz.utils.getValidOptions(opts);
        $(opts.target).file(opts); 
        if(opts.multi){//如果设置了是多文件上传
        	var newFileopts = opts;
            var i = 0; 
        	$('<button class="button" type="button" id="addmultiFile" style="margin-left:20px;">'+I18N.add+'</button>').insertAfter($(opts.id));
        	$("<div name='cleardiv' class='clear' style='margin-top:5px'></div>").insertAfter($(opts.id).parent());
			$("#addmultiFile").bind('click',function(){
				 newFileopts.target = opts.id+"_"+i;
				 var newFileId = newFileopts.target.substring(1,newFileopts.target.length);
				 var newFileName = $(opts.id)[0].name;
				 $("<input id='"+ newFileId +"' name='"+newFileName+"' type='file'/> ").insertBefore($(opts.id).parent());	
				 $(newFileopts.target).file(newFileopts);
				 $('<button class="button" type="button" id = "deleteFilebtn_'+i+'" name="deleteFilebtn" style="margin-left:20px;">'+I18N.del+'</button>').insertAfter($("#"+newFileId));
				 $("<div name='cleardiv' class='clear' style='margin-top:5px'></div>").insertAfter($("#"+newFileId).parent());
				 $("#deleteFilebtn_"+i).bind('click',function(){
					  $(this).prev().remove();//删除input file
					  if($(this).next().hasClass("clear"))
					  $(this).next().remove();//删除clear
					  $(this).remove();//删除del button
				 });
				 i++;
			});
        }

        biz.utils.initValidate(validOpts);
        return  $(opts.target);
    },
    defaults:{
        buttonText:I18N.file_bDefaultValue,
        inputText: "",
		accept: "", //格式如：“jpg|gif|png”
        unaccept:"",//格式同accept
		filename: "",//格式如：“file.zip”
		denied:I18N.file_suffix,
	    wrongname:I18N.file_name
    },
    methods:{
    	setValue:function(){
            //@todo添加空方法避免报错
        },
        getValue:function(){
            $(this.target).file("getValue");
        },
        reset:function(){
            $(this.target).file("reset");
        },
        destroy:function(){
            $(this.target).file("destroy");
        }
    }
 });

/*
	原生file
*/
(function($){
var wrapperClasses = 'csiui-file-wrapper ui-widget',
	inputClasses = 'csiui-file-input ui-widget-content ui-corner-left',
	buttonClasses = 'csiui-file-button ui-state-default ui-widget-header ui-corner-right',
	buttonTextClasses = 'csiui-file-button-text',
	fileClasses = 'csiui-file',
	hoverClasses = 'ui-state-hover',
	activeClasses = 'ui-state-active',
	stateClasses = hoverClasses + ' ' + activeClasses;

$.widget("csiui.file", {
	options: {
		buttonText: "浏览",
		inputText: "",
		accept:"",
		unaccept:"",
		filename:"",
		inputWidth:150,
        buttonWidth:"auto",
		hint:{
			denied:"请选择正确的文件，后缀为：{0}",
			wrongname:"请选择正确的文件，文件名为:{0}"
		}
	},
	_checkDeny: function(self){
		var opt = self.options;
		var filename = self._getText();
		if((opt.accept != "") || (opt.unaccept != "") ){
			var unfound = true,found=false;
			var index = filename.lastIndexOf('.');
			if(index == -1) return false;
			var suffix = filename.substring(index+1);
			if(opt.unaccept != ""){
                var unaccepts = opt.unaccept.split("|");
                for(var i=0;i<unaccepts.length;i++){
                    if(suffix == unaccepts[i]){
                        unfound = false;
                        break;
                    }
			    }
            }
			if(opt.accept != ""){
				var accepts = opt.accept.split("|");
				for(var i=0;i<accepts.length;i++){
					if(suffix == accepts[i]){
					    found = true;
						break;
					}
				}
			}else{
                found = true;
            }
			return unfound && found;
		}else{
			return true;
		}
	},
	_checkName: function(self){
		if(self.options.filename == self._getText() 
			|| self.options.filename == "") {
			return true;
		}else{
			return false;
		}
	},
	_create: function(){
		var self = this,
		options = self.options;
		self.fileFile = self.element,
		self.fileWrapper = $('<span></span>')
			.addClass(wrapperClasses)
			.hover(function(){
				self.fileButton.addClass(hoverClasses);
			},function(){
				self.fileButton.removeClass(stateClasses);
			}).bind('mousemove.file',function(e){
				var x = (e.pageX - $(this).offset().left) - (self.fileFile.width() / 1.2);
				var y = (e.pageY - $(this).offset().top) - (self.fileFile.height() / 2);
				self.fileFile.css('top', y).css('left', x);
			}).bind('mousedown.file',function(e){
				self.fileButton.addClass(activeClasses);
			}).bind('mouseup.file',function(e){
				self.fileButton.removeClass(activeClasses);
			}),
		self.fileFile
			.addClass(fileClasses)
			.wrap(self.fileWrapper)
			.attr("hidefocus",true),
		self.fileInput = $('<span></span>')
			.addClass(inputClasses)
			.text(self._getText())
			.insertBefore(self.fileFile)
			.width(options.inputWidth),
		self.fileButtonText = $('<span></span>')
			.addClass(buttonTextClasses)
			.text(options.buttonText)
		self.fileButton = $('<span></span>')
			.addClass(buttonClasses)
			.insertAfter(self.fileInput)
			.html(self.fileButtonText)
			.width(options.buttonWidth);
		self.fileFile.bind('change.file',function(){
			self.fileInput.text(self._getText());
			if(!self._checkDeny(self)){
				var msg = options.hint.denied ;
                msg = msg.replace("{0}" , options.accept);
                msg = msg.replace("{1}" , options.unaccept);
                jAlert(msg, I18N.promp);
				self.reset();
			} 
			if(!self._checkName(self)){
				var msg = options.hint.wrongname;
                msg = msg.replace("{0}" , options.filename);
                jAlert(msg, I18N.promp);
				self.reset();
			}
		}).bind('focusin.file',function(){
			self.fileButton.addClass(hoverClasses);
		}).bind('focusout.file',function(){
			self.fileButton.removeClass(hoverClasses);
		});

	},
	_getText: function(){
		var self = this;
		fileValue = self.getValue();
		inputTextValue = self.options.inputText;

		if(fileValue == ''){
			return inputTextValue;
		}else{
			var res;
			if(biz.isWindows){		
				res =  fileValue.substring(fileValue.lastIndexOf("\\")+1);
			}else{
				res = fileValue.substring(fileValue.lastIndexOf("\/")+1);
			}
			return res;
			
		}
	},
	getValue: function(){
		var self = this;
		return fileValue = self.fileFile.val();
	},
	reset: function() {
		var self = this;
		self.fileInput.text(self.options.inputText);
	},
	destroy: function(){
		var self = this;
		self.fileInput.remove();
		self.fileButton.remove();
		self.fileButtonText.remove();
		self.fileFile.removeClass(fileClasses).unwrap(self.fileWrapper);
		self.fileWrapper.remove();
		$.Widget.prototype.destroy.call( self );
	},
	_setOption: function(option, value){
		var self = this;
		$.Widget.prototype._setOption.apply( self, arguments );
		switch(option){
			case "buttonText":
				self.fileButtonText.text(value);
				break;
			case "inputText":
				self.fileInput.text(self._getText());
				break;
		}
	}
});
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.select.js select组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 *	  biz.bgiframe.js
 *	  biz.tmpl.js
 */

/**
 * 创建一个select控件,下拉选择框
 * @function
 * @return {Object} ui控件
 */
 biz.select = biz.createUI(function(options){
	if(typeof options == "object"){ 
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'select';
	    options.target = options.id;
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	var obj,validOpts = biz.utils.getValidOptions(opts);
    	if(typeof opts.disabled !== undefined ){$(opts.target).attr("disabled", opts.disabled);}
        if(opts.isCascade){
            var setting = opts;
            if(setting.data){setting.list = setting.data;setting.data = undefined}
            if(setting.url){setting.ajax =$.extend({},setting.ajaxOptions,{url:setting.url}); setting.url = undefined}
            obj = $(opts.target).cascade(setting);
        }else{
            obj = $(opts.target).combobox(opts);
        }
        biz.utils.initValidate(validOpts);
        return obj;
    },
    defaults:{
        isCascade:false,
        url:"",
        data:[],
        parent:"" ,
        timeout:10,
        event:"change",
        ajaxOptions:{},
        value:""
    },
    methods:{
    	getValue:function(){
            return $(this.target).val();
        },
        setValue:function(value){
        	var $this = this;
			if($this.isCascade){
				//每隔100毫秒检查下拉框值，如存在对其进行设值
				function showTime(id,value){
					if($(id).val()!=undefined&&$(id).val()!=null) {
						$($this.target).val(value);
						$($this.target).triggerHandler("change");
					}else{
						setTimeout(function(){showTime(id,value)}, 100);	
					}
				}
				showTime($this.target,value);	
			}else{
				$($this.target).val(value);
				$($this.target).triggerHandler("change");
			}
        },
        enable:function(){
            $(this.target).attr("disabled", false);
        },
        disable:function(value){
        	$(this.target).attr("disabled", true);
        }
    }
 });

/*
	原生select组件
*/
(function($){
	$.widget("ui.combobox", {
		options:{
			clear:true,
			url:"",
			data:"",
			value:"",//默认值
			ajaxOptions:{}
		},
		_create: function() {
			var opt = this.options,$t= this.element,
				id = $(this.element).attr("id"),
				paraSource = opt.data ? opt.data : [];
			if(opt.data != ""){
				if(opt.clear){
					$(this.element).empty();
				}
				$.tmpl("optionTmpl",opt.data).appendTo($t);
				if(opt.value != ""){
					if (($.browser.msie) && ($.browser.version == "6.0")){
						setTimeout(function(){$($t).val(opt.value);}, 100);	
					}else{
					    $($t).val(opt.value);
					}
				}
			}

			if(opt.url != ""){
				$.ajax($.extend({
					dataType: "json",
					type: "POST",
					url: opt.url,
					success: function(data) {
						paraSource = data;
						if(opt.clear)$("#"+id).empty();
						$.tmpl("optionTmpl",data).appendTo($t);
						if(opt.value != ""){
							if (($.browser.msie) && ($.browser.version == "6.0")){
								setTimeout(function(){$($t).val(opt.value);}, 100);	
							}else{
							    $($t).val(opt.value);
							}
						}
					},
					//添加错误信息处理
                    error:function(xhr,st,err){
                           //biz.utils.loadError(xhr,st,err);
                    }
				},opt.ajaxOptions));
			}
			//绑定onchange事件
			$.isFunction(opt.onchange) ? $($t).on("change",function(e){
				var selectedValue = $t.val();
				var returnRes = [];
				for(var i=0;i<paraSource.length;i++){
                     if(paraSource[i].value == selectedValue){
						returnRes = paraSource[i];
                        break;
                     }
				}
				opt.onchange.call(this,e,returnRes);
			}) : "";
		}
	});
	
//级联下拉框部分
$.ui = $.ui || {}; $.ui.cascade = $.ui.cascade || {}; 
  
$.fn.cascade = function(opt) { 
var parent = opt.parent,
	paraSource = opt.list ? opt.list : [];
if( opt.event ){
	//namespace our event 
	opt.event = opt.event.replace('.cascade','') + '.cascade';
}

opt = $.extend({}, {	  
	list: [], //static list to use as datasource 
	timeout: 10,//delay before firing getList operation
	getList: function(select) { $(this).trigger("updateList", [opt.list]); }, //function to fetch datasource
	template: function(str) { return "<option value='" + str.value + "'>" + str.name + "</option>"; },//applied to each item in datasource      
	match: function(selectedValue) { return this.first == selectedValue; ;}, //'this' is the js object, or the current list item from 'getList',
	event: "change.cascade",	//event to listen on parent which fires the cascade
	getParentValue: function(parent) { return $(parent).val(); } //delegate for retrieving the parent element's value
}, opt);

if($.ui.cascade.ext) {
	for(var ext in $.ui.cascade.ext) {
        if(opt[ext]) {
          opt = $.extend(opt, $.ui.cascade.ext[ext](opt));
          delete opt[ext];
        }
	} 
}

return this.each(function() {  
	var source = $(parent);				
	var self = $(this);		  
	
	//bind any events in extensions to each instance
	if($.ui.cascade.event) {
		for(var e in $.ui.cascade.event) {					
			self.bind(e + ".cascade",[source],$.ui.cascade.event[e]);		        
		} 
	}
	
	$(source).bind(opt.event,function() {							
		self.trigger("loading.cascade",[source[0]]);
		
		var selectTimeout = $.data(self, "selectTimeout");			
		if(selectTimeout) { window.clearInterval(selectTimeout); }			
		$.data(self, "selectTimeout", window.setTimeout(function() { 				
				self.trigger("cascade"); 
		}, opt.timeout));					
		
	});
	
    self.bind("cascade", function() {	
      self.one("updateList", function(e, list) {	
    	paraSource = list;
        list = $(list)
          .filter(function() { return opt.match.call(this, opt.getParentValue(parent)); })
          .map(function() { 
            var node = $(opt.template(this))[0];				                
            return node; 
          });
		  
		self.empty();//clear the source/select
		
        if(list.length){ 
			self.html(list);				
		}
		
		/*fix ie6下grid里面的级联无效
        if (($.browser.msie) && ($.browser.version == "6.0")){
       	  if(num == 0){source.trigger("change.cascade"); num++;}
        }*/

		self.trigger("loaded.cascade",[source[0]]);//be sure to fire even if there is no data
		
		if( self.is(":input") ) {
			self.trigger("change.cascade");
		}	

		//修复ie9下如果opt.value在list不存在，显示为空问题
		if(typeof opt.value != "undefined") {
			for(var i = 0; i < list.length ;i++){
				if(list[i].value == opt.value){
				 	//fix ie6下grid里面的级联无效*/
					if (($.browser.msie) && ($.browser.version == "6.0")){
						setTimeout(function(){self.val(opt.value);}, 100);	
					}else{
						self.val(opt.value);
					}
					break;
				}
			}
		}
      });
	
      opt.getList.call(self[0],source);	//call with child element as this
	  
    });
    source.trigger(opt.event);
    //绑定onchange事件
    $.isFunction(opt.onchange) ? self.on("change",function(e){
		var selectedValue = self.val();
		var returnRes = [];
		for(var i=0;i<paraSource.length;i++){
            if (paraSource[i].value == selectedValue ) {
				returnRes = paraSource[i];
                break;
            }
        }
		opt.onchange.call(this,e,returnRes);
	}) : "";
});
};
	$.ui = $.ui || {};
$.ui.cascade = $.ui.cascade || {};
$.ui.cascade.ext = $.ui.cascade.ext || {};
$.ui.cascade.event = $.ui.cascade.event || {};

$.ui.cascade.ext.ajax = function(opt) {				
	var ajax = opt.ajax;//ajax options hash...not just the url
	return { getList: function(parent) { 					
		var _ajax = {};
		var $this = $(this);//child element
		var defaultAjaxOptions = {
			type: "POST",
			dataType: "json",
			success: function(json) { $this.trigger("updateList", [json]); },
			error:function(xhr,st,err){ /*biz.utils.loadError(xhr,st,err);*/},//添加错误信息处理
			data: $.isFunction( opt.datafuc )?opt.datafuc.call($this,ajax.data):$.extend(_ajax.data,ajax.data,{ val: opt.getParentValue(parent) })				
		};						
		//overwrite opt.ajax with required props (json,successcallback,data)		
		//this lets us still pass in handling the other ajax callbacks and options
		$.extend(_ajax,defaultAjaxOptions,ajax);	
		
		$.ajax(_ajax);		 		  
	} };
};

$.ui.cascade.ext.templateText = function(opt) {
var template = $.makeTemplate(opt.templateText, "<%", "%>");
return { template: function(obj) { return template(obj); } };
};	

/*these events are bound on every instance...so the indicator appears  on each target */
/* 
*	CSS: .cascade-loading: { background: transparent url("${staticDir}/Content/images/indicator.gif") no-repeat center; }
*/
$.ui.cascade.event.loading = function(e,source) { 		
	$(this).empty();				
	var position = {
		'z-index':'6000',
		'position':'absolute',
		'width':'16px'
	};				
	$.extend(position,$(this).offset());						
	position.top = position.top + 3;
	position.left = position.left + 3;				
	$("<div class='csiui-cascade-loading'>&nbsp;</div>").appendTo("body").css(position);
	$(this)[0].disabled = true;				
};
$.ui.cascade.event.loaded = function(e,source) { 		
	$(this)[0].disabled = false;
	$(".csiui-cascade-loading").remove();		
};
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.button.js button组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 *    biz.tmpl.js
 */


/**
 * 创建一个button控件,按钮
 * @function
 * @return {Object} ui控件
 */
 biz.button = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'button';
	    options.target = options.id;
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
        if(opts.isButtonset){
            return  $(opts.target).buttonset(opts);
        }else{
//        	$(opts.target).addClass("btn btn-primary");
            return  $(opts.target).button(opts);
        }
    },
    defaults:{
        isButtonset:false,
        disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		}
    },
    methods:{
        enable:function(){
            $(this.target).button("enable");
        },
        disable:function(){
            $(this.target).button("disable");
        },
        destroy:function(){
            $(this.target).button("destroy");
        },
        /*
         *opts为属性对象时为给多个属性同时设置值；{属性1:"属性值1"，属性2:"属性值2"}
         *opts为字符串时为给单个属性取值或设置值
         */
        option:function(opts ,value){
            //          $(this.target).button("option",opts,value);
            if(value){
        		$(this.target).button("option",opts,value);
        	}else{
        		return $(this.target).button("option",opts);
        	}
        },
        widget:function(){
            $(this.target).button("widget");
        },
        refresh:function(){
            $(this.target).button("refresh");
        }
    }
 });

/*
	原生button
*/
(function(a, b) {
	var c, d, e, f, g = "ui-button ui-widget ui-state-default ui-corner-all",
		h = "ui-state-hover ui-state-active ",
		i = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
		j = function() {
			var b = a(this).find(":ui-button");
			setTimeout(function() {
				b.button("refresh")
			}, 1)
		}, k = function(b) {
			var c = b.name,
				d = b.form,
				e = a([]);
			return c && (d ? e = a(d).find("[name='" + c + "']") : e = a("[name='" + c + "']", b.ownerDocument).filter(function() {
				return !this.form
			})), e
		};
	a.widget("ui.button", {
		options: {
			disabled: null,
			text: !0,
			label: null,
			icons: {
				primary: null,
				secondary: null
			}
		},
		_create: function() {
			this.element.closest("form").unbind("reset.button").bind("reset.button", j), typeof this.options.disabled != "boolean" ? this.options.disabled = !! this.element.propAttr("disabled") : this.element.propAttr("disabled", this.options.disabled), this._determineButtonType(), this.hasTitle = !! this.buttonElement.attr("title");
			var b = this,
				h = this.options,
				i = this.type === "checkbox" || this.type === "radio",
				l = "ui-state-hover" + (i ? "" : " ui-state-active"),
				m = "ui-state-focus";
			h.label === null && (h.label = this.buttonElement.html()), this.buttonElement.addClass(g).attr("role", "button").bind("mouseenter.button", function() {
				if (h.disabled) return;
				a(this).addClass("ui-state-hover"), this === c && a(this).addClass("ui-state-active")
			}).bind("mouseleave.button", function() {
				if (h.disabled) return;
				a(this).removeClass(l)
			}).bind("click.button", function(a) {
				h.disabled && (a.preventDefault(), a.stopImmediatePropagation())
			}), this.element.bind("focus.button", function() {
				b.buttonElement.addClass(m)
			}).bind("blur.button", function() {
				b.buttonElement.removeClass(m)
			}), i && (this.element.bind("change.button", function() {
				if (f) return;
				b.refresh()
			}), this.buttonElement.bind("mousedown.button", function(a) {
				if (h.disabled) return;
				f = !1, d = a.pageX, e = a.pageY
			}).bind("mouseup.button", function(a) {
				if (h.disabled) return;
				if (d !== a.pageX || e !== a.pageY) f = !0
			})), this.type === "checkbox" ? this.buttonElement.bind("click.button", function() {
				if (h.disabled || f) return !1;
				a(this).toggleClass("ui-state-active"), b.buttonElement.attr("aria-pressed", b.element[0].checked)
			}) : this.type === "radio" ? this.buttonElement.bind("click.button", function() {
				if (h.disabled || f) return !1;
				a(this).addClass("ui-state-active"), b.buttonElement.attr("aria-pressed", "true");
				var c = b.element[0];
				k(c).not(c).map(function() {
					return a(this).button("widget")[0]
				}).removeClass("ui-state-active").attr("aria-pressed", "false")
			}) : (this.buttonElement.bind("mousedown.button", function() {
				if (h.disabled) return !1;
				a(this).addClass("ui-state-active"), c = this, a(document).one("mouseup", function() {
					c = null
				})
			}).bind("mouseup.button", function() {
				if (h.disabled) return !1;
				a(this).removeClass("ui-state-active")
			}).bind("keydown.button", function(b) {
				if (h.disabled) return !1;
				(b.keyCode == a.ui.keyCode.SPACE || b.keyCode == a.ui.keyCode.ENTER) && a(this).addClass("ui-state-active")
			}).bind("keyup.button", function() {
				a(this).removeClass("ui-state-active")
			}), this.buttonElement.is("a") && this.buttonElement.keyup(function(b) {
				b.keyCode === a.ui.keyCode.SPACE && a(this).click()
			})), this._setOption("disabled", h.disabled), this._resetButton()
		},
		_determineButtonType: function() {
			this.element.is(":checkbox") ? this.type = "checkbox" : this.element.is(":radio") ? this.type = "radio" : this.element.is("input") ? this.type = "input" : this.type = "button";
			if (this.type === "checkbox" || this.type === "radio") {
				var a = this.element.parents().filter(":last"),
					b = "label[for='" + this.element.attr("id") + "']";
				this.buttonElement = a.find(b), this.buttonElement.length || (a = a.length ? a.siblings() : this.element.siblings(), this.buttonElement = a.filter(b), this.buttonElement.length || (this.buttonElement = a.find(b))), this.element.addClass("ui-helper-hidden-accessible");
				var c = this.element.is(":checked");
				c && this.buttonElement.addClass("ui-state-active"), this.buttonElement.attr("aria-pressed", c)
			} else this.buttonElement = this.element
		},
		widget: function() {
			return this.buttonElement
		},
		destroy: function() {
			this.element.removeClass("ui-helper-hidden-accessible"), this.buttonElement.removeClass(g + " " + h + " " + i).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()), this.hasTitle || this.buttonElement.removeAttr("title"), a.Widget.prototype.destroy.call(this)
		},
		_setOption: function(b, c) {
			a.Widget.prototype._setOption.apply(this, arguments);
			if (b === "disabled") {
				c ? this.element.propAttr("disabled", !0) : this.element.propAttr("disabled", !1);
				return
			}
			this._resetButton()
		},
		refresh: function() {
			var b = this.element.is(":disabled");
			b !== this.options.disabled && this._setOption("disabled", b), this.type === "radio" ? k(this.element[0]).each(function() {
				a(this).is(":checked") ? a(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : a(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false")
			}) : this.type === "checkbox" && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"))
		},
		_resetButton: function() {
			if (this.type === "input") {
				this.options.label && this.element.val(this.options.label);
				return
			}
			var b = this.buttonElement.removeClass(i),
				c = a("<span></span>", this.element[0].ownerDocument).addClass("ui-button-text").html(this.options.label).appendTo(b.empty()).text(),
				d = this.options.icons,
				e = d.primary && d.secondary,
				f = [];
			d.primary || d.secondary ? (this.options.text && f.push("ui-button-text-icon" + (e ? "s" : d.primary ? "-primary" : "-secondary")), d.primary && b.prepend("<span class='ui-button-icon-primary ui-icon " + d.primary + "'></span>"), d.secondary && b.append("<span class='ui-button-icon-secondary ui-icon " + d.secondary + "'></span>"), this.options.text || (f.push(e ? "ui-button-icons-only" : "ui-button-icon-only"), this.hasTitle || b.attr("title", c))) : f.push("ui-button-text-only"), b.addClass(f.join(" "))
		}
	}), a.widget("ui.buttonset", {
		options: {
			items: ":button, :submit, :reset, :checkbox, :radio, a, :data(button)"
		},
		_create: function() {
			this.element.addClass("ui-buttonset")
		},
		_init: function() {
			this.refresh()
		},
		_setOption: function(b, c) {
			b === "disabled" && this.buttons.button("option", b, c), a.Widget.prototype._setOption.apply(this, arguments)
		},
		refresh: function() {
			var b = this.element.css("direction") === "rtl";
			this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
				return a(this).button("widget")[0]
			}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(b ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(b ? "ui-corner-left" : "ui-corner-right").end().end()
		},
		destroy: function() {
			this.element.removeClass("ui-buttonset"), this.buttons.map(function() {
				return a(this).button("widget")[0]
			}).removeClass("ui-corner-left ui-corner-right").end().button("destroy"), a.Widget.prototype.destroy.call(this)
		}
	})
})(jQuery);
/*! jQuery UI - v1.8.21 - 2012-06-05
 */
/*  Bizfoundation ui 5.1
 *  biz.radio.js radio组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 *    biz.tmpl.js
 */


 /**
 * 创建一个radio控件,单选框
 * @function
 * @return {Object} ui控件
 */
 biz.radio = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'radio';
	    $(options.id).attr("uiType","radio");//添加uiType属性，用于查询框查询时，辨别是否是checkbox控件
	    options.target = options.id;
	}else if(typeof options == 'string'){
        //使用方式：biz.radio("#radioid","方法名",参数1,参数2……);
	     var tempValue,args = $.makeArray(arguments).slice(1);
	     $(arguments[0]).each(function(){
             tempValue =  $(this).radio.apply($(this),args);
	     })
	     return tempValue;
 }else{
        jAlert(I18N.param_error + options , I18N.promp);
    } 
 }).extend({
    init:function(opts){
    	var validOpts = biz.utils.getValidOptions(opts);
        var radioObj = $(opts.target).radio(opts);
        biz.utils.initValidate(validOpts);
     	return radioObj;
    },
    defaults:{
        data:"",
        url:""
    },
    methods:{
    	check:function(elem){
            $(this.target).radio("check",elem) ;
        },
        uncheck:function(elem){
             $(this.target).radio("uncheck",elem) ;
        },
        enable:function(elem){
            $(this.target).radio("enable",elem) ;
        },
        disable:function(elem){
            $(this.target).radio("disable",elem) ;
        },
        getCheckValue:function(name){
            return $(this.target).radio("getCheckValue",name);
        },
        getUncheckValue:function(name){
            return $(this.target).radio("getUncheckValue",name);
        },
		setValue:function(value){
            $(this.target).radio("setValue",value) ;
        },
		getValue:function(){
            return $(this.target).radio("getValue") ;
        }
    }
 });

 /*
    原生radio
 */
 (function($){
    $.widget("ui.radio", {
        options:{
            url:"",
            value:undefined,
            data:"",
            ajaxOptions:{},
            separator:",",
            name:""//name属性，对应生成input的name
        },
        _create: function() {
            var opt = this.options,tempValue = opt.value,$t=this.element;
            var id = $(this.element).attr("id");
            if(opt.data != ""){
                $(this.element).empty();
                //修改数据格式为:[{name:"男",value:"1"},{name:"女",value:"0"}],
                 //如为旧格式:[{name:"sex",label:"男",value:"1"},{name:"sex",label:"女",value:"0"}]则不对格式进行处理*/
                $(opt.data).each(function(i,dataObj){
                    if(opt.data[i].label==undefined){
                        opt.data[i].label = dataObj.name;
                        opt.data[i].name = opt.name;
                    }
                })
                $.tmpl("radioTmpl",opt.data).appendTo($t);
                if(tempValue){
                    if(!$.isArray(tempValue)){tempValue = tempValue.split(opt.separator)}
                    $(tempValue).each(function(i,value){
                        var sel = $($t).find(" input[value='" + value + "']");
                        //$(sel).attr("checked", true);
                        $(sel)[0].checked = true;
                    })
                }
            }
            if(opt.url != ""){
                var _ajaxOptions = opt.ajaxOptions; 
                var _ajaxOptionsSuccess = _ajaxOptions.success;
                var newSuccessF = {
                        dataType: "json",
                        type:"POST",
                        url: opt.url,
                        async:false,
                        success: function(data) {
                            $("#"+id).empty();
                            $(data).each(function(i,dataObj){
                                if(data[i].label==undefined){
                                    data[i].label = dataObj.name;
                                    data[i].name = opt.name;
                                }
                            })
                            $.tmpl("radioTmpl",data).appendTo($t);
                            if(tempValue){
                                if(!$.isArray(tempValue)){tempValue = tempValue.split(opt.separator)}
                                $(tempValue).each(function(i,value){
                                    var sel = $($t).find(" input[value='" + value + "']");
                                    //$(sel).attr("checked", true);
                                    $(sel)[0].checked = true;
                                })
                            }
                            if(_ajaxOptionsSuccess){    
                                _ajaxOptionsSuccess.call(this,data);
                            }
                        }
                    };
                _ajaxOptions.success = undefined;
                $.ajax($.extend(newSuccessF,_ajaxOptions));
            }
        },
        check: function(value) {
            var $t = this.element;
            if($(value,$t).length > 0 && ($(value,$t)[0].nodeName || $(value,$t)[0].nodename)){//兼容旧版本api方式
                if(!$(value,$t).attr("disabled")){
                    $(value,$t)[0].checked = true;
                }
            }else if(!!value){
                if(!$.isArray(value)){value = value.split(this.options.separator)}
                $(value).each(function(i,tempvalue){
                    var checkEle = $("input[value="+tempvalue+"]",$t);
                    if(!checkEle.attr("disabled")){checkEle[0].checked = true;}
                })
            }
        },
        uncheck: function(value) {
            var $t = this.element;
            if($(value,$t).length > 0 && ($(value,$t)[0].nodeName || $(value,$t)[0].nodename)){//兼容旧版本api方式
                if(!$(value,$t).attr("disabled")){
                    $(value,$t)[0].checked = false;
                }
            }else  if(!!value){
                if(!$.isArray(value)){value = value.split(this.options.separator)}
                $(value).each(function(i,tempvalue){
                    var checkEle = $("input[value="+tempvalue+"]",$t);
                    if(!checkEle.attr("disabled")){checkEle[0].checked = false;}
                })
            }
        },
        enable: function(values){
            var $t = this.element;
            //如果values为空，所有radio启用
            if(!values){$("input",$t).each(function(){$(this).attr("disabled",false);});return;}
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                $(values,$t).attr("disabled",false);
            }else  if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $.each(values,function(i,value){
                    $("input[value="+value+"]",$t).attr("disabled",false);
                })
            }
        },
        disable: function(values){
            var $t = this.element;
            //如果values为空，所有radio禁用
            if(!values){$("input",$t).each(function(){$(this).attr("disabled",true);});return;}
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                $(values,$t).attr("disabled",true);
            }else if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $(values).each(function(i,value){
                    $("input[value="+value+"]",$t).attr("disabled",true);
                })
            }
        },
        getCheckValue: function(name) {
            var checkElement = name?"input[type=radio][name='"+name+"']:checked":"input[type=radio]:checked";
            return  $(checkElement,this.element).val();
        },
        getUncheckValue: function(name) {
            var str = "" ,separator = this.options.separator,
                checkElement = name?"input[type=radio][name='"+name+"']:not(:checked)":"input[type=radio]:not(:checked)";
            $(checkElement,this.element).each(function(){
                str = (str == ""? "":(str+separator)) + $(this).val();
            })
            return  str;
        },
        setValue:function(value){
            this.check(value);
        },
        getValue:function(){
            return this.getCheckValue();
        }
    });
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.checkbox.js checkbox组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 *    biz.tmpl.js
 */


 /*
	创建一个checkbox控件,复选框
 * @function
 * @return {Object} ui控件
 */
 biz.checkbox = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'checkbox';
	    $(options.id).attr("uiType","checkbox");//添加uiType属性，用于查询框查询时，辨别是否是checkbox控件
	    options.target = options.id;
	}else if(typeof options == 'string'){
        //使用方式：biz.checkbox("#checkboxid","方法名",参数1,参数2……);
	     var tempValue,args = $.makeArray(arguments).slice(1);
	     $(arguments[0]).each(function(){
              tempValue =  $(this).checkbox.apply($(this),args);
	     })
	     return tempValue;
  }else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	var validOpts = biz.utils.getValidOptions(opts);
    	var checkObj =  $(opts.target).checkbox(opts);
    	biz.utils.initValidate(validOpts);
    	return checkObj;
    },
    defaults:{
        data:"",
        url:""
    },
    methods:{
    	check:function(elem){
            $(this.target).checkbox("check",elem) ;
        },
        uncheck:function(elem){
             $(this.target).checkbox("uncheck",elem) ;
        },
        checkAll:function(name){
            $(this.target).checkbox("checkAll",name);
        },
        uncheckAll:function(name){
            $(this.target).checkbox("uncheckAll",name);
        },
        toggles:function(name){
             $(this.target).checkbox("toggle",name);
        },
        enable:function(elem){
            $(this.target).checkbox("enable",elem) ;
        },
        disable:function(elem){
            $(this.target).checkbox("disable",elem) ;
        },
        enableAll:function(name){
            $(this.target).checkbox("enableAll",name);
        },
        disableAll:function(name){
            $(this.target).checkbox("disableAll",name);
        },
        getCheckValues:function(name){
            return $(this.target).checkbox("getCheckValues",name);
        },
        getUncheckValues:function(name){
            return $(this.target).checkbox("getUncheckValues",name);
        },
		setValue:function(value){
            $(this.target).checkbox("setValue",value) ;
        },
		getValue:function(){
            return $(this.target).checkbox("getValue") ;
        }
    }
 });

/*
	原生checkbox
*/
(function($){
    $.widget("ui.checkbox", {
        options:{
            url:"",
            separator:",",
            value:undefined,
            data:"",
            ajaxOptions:{},
            name:""//name属性，对应生成input的name
        },
        _create: function() {
            var opt = this.options,$t=this.element;
            var id = $(this.element).attr("id");
            if(opt.data != ""){
                $(this.element).empty();
                //修改数据格式为:[{name:"男",value:"1"},{name:"女",value:"0"}],
                // 如为旧格式:[{name:"sex",label:"男",value:"1"},{name:"sex",label:"女",value:"0"}]则不对格式进行处理*/
                $(opt.data).each(function(i,dataObj){
                	if(opt.data[i].label==undefined){
                        opt.data[i].label = dataObj.name;
                        opt.data[i].name = opt.name;
                    }
                })
                $.tmpl("checkboxTmpl",opt.data).appendTo($t);
                if(opt.value){
                    //value支持["a","b"]或者"a,b"两种格式
                    valueArray = $.isArray(opt.value) ? opt.value : opt.value.split(opt.separator);
                    for(var val in valueArray){
                        var sel = $($t).find(" input[value='" + valueArray[val] + "']");
                        //$(sel).attr("checked", true);
                        $(sel)[0].checked = true;
                    }
                }
            }
            if(opt.url != ""){
	            var _ajaxOptions = opt.ajaxOptions; 
	            var _ajaxOptionsSuccess = _ajaxOptions.success;
	            var newSuccessF = {
                    dataType: "json",
                    type:"POST",
                    url: opt.url,
                    async:false,
                    success: function(data) {
                        $("#"+id).empty();
                        $(data).each(function(i,dataObj){
                            if(data[i].label==undefined){
                                data[i].label = dataObj.name;
                                data[i].name = opt.name;
                            }
                        })
                        $.tmpl("checkboxTmpl",data).appendTo($t);
                        if(opt.value){
                        	valueArray = $.isArray(opt.value) ? opt.value : opt.value.split(opt.separator);
                            for(var val in valueArray){
                                var sel = $($t).find(" input[value='" + valueArray[val] + "']");
                                //$(sel).attr("checked", true);
                                $(sel)[0].checked = true;
                            }
                        }
                        if(_ajaxOptionsSuccess){	
                        	_ajaxOptionsSuccess.call(this,data);
                        }
                    }        
                };
                _ajaxOptions.success = undefined;
                $.ajax($.extend(newSuccessF,_ajaxOptions));
            }
        },
        check: function(values) { 
            var disabled,$t = this.element;
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                disabled = $(values,$t).attr("disabled");
                if(!disabled){
                    $(values,$t)[0].checked = true;
                }
            }else if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $.each(values,function(i,value){
                    var checkEle = $("input[value="+value+"]",$t);
                    if(!checkEle.attr("disabled")){checkEle[0].checked = true;}
                })
            }
        },
        uncheck: function(values) {
            var disabled,$t = this.element;
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                disabled = $(values,$t).attr("disabled");
                if(!disabled){
                    $(values,$t)[0].checked = false;
                }
            }else if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $.each(values,function(i,value){
                    var checkEle = $("input[value="+value+"]",$t);
                    if(!checkEle.attr("disabled")){checkEle[0].checked = false;}
                })
            }
        },
        toggle: function(name) {
            var checkElement = name?"input[type=checkbox][name='"+name+"']":"input[type=checkbox]";
            $(checkElement,this.element).each(function(){
                var checked = $(this).attr("checked");
                var disabled = $(this).attr("disabled");
                if(!disabled){
                    $(this).attr("checked",!checked);
                }
            });
        },
        checkAll: function(name){
            var checkElement = name?"input[type=checkbox][name='"+name+"']":"input[type=checkbox]";
            $(checkElement,this.element).each(function(){
                var disabled = $(this).attr("disabled");
                if(!disabled){
                    $(this)[0].checked = true;
                }
            });
        },
        uncheckAll: function(name){
            var checkElement = name?"input[type=checkbox][name='"+name+"']":"input[type=checkbox]";
            $(checkElement,this.element).each(function(){
                var disabled = $(this).attr("disabled");
                if(!disabled){
                    $(this)[0].checked = false;
                }
            });
        },
        enable: function(values){
            var $t = this.element;
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                $(values,$t).attr("disabled",false);
            }else if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $.each(values,function(i,value){
                    $("input[value="+value+"]",$t).attr("disabled",false);
                })
            }
        },
        disable: function(values){
            var $t = this.element;
            if($(values,$t).length > 0 && ($(values,$t)[0].nodeName || $(values,$t)[0].nodename)){//兼容旧版本api方式
                $(values,$t).attr("disabled",true);
            }else if(!!values){
                if(!$.isArray(values)){values = values.split(this.options.separator)}
                $(values).each(function(i,value){
                    $("input[value="+value+"]",$t).attr("disabled",true);
                })
            }
        },
        enableAll: function(name){
            var checkElement = name?"input[type=checkbox][name='"+name+"']":"input[type=checkbox]";
            $(checkElement,this.element).each(function(){
                $(this).attr("disabled",false);
            })
        },
        disableAll: function(name){
            var checkElement = name?"input[type=checkbox][name='"+name+"']":"input[type=checkbox]";
            $(checkElement,this.element).each(function(){
                $(this).attr("disabled",true);
            })
        },
        getCheckValues: function(name) {
            var str = "",separator = this.options.separator,
            	checkElement = name?"input[type=checkbox][name='"+name+"']:checked":"input[type=checkbox]:checked";
            $(checkElement,this.element).each(function(i){
                str+= (((i==0)?"":separator) + $(this).val());
            }) ;
            return str;
        },
        getUncheckValues: function(name) {
            var str = "",separator = this.options.separator,
            	checkElement = name?"input[type=checkbox][name='"+name+"']:not(:checked)":"input[type=checkbox]:not(:checked)";
            $(checkElement,this.element).each(function(i){
                str+= (((i==0)?"":separator) + $(this).val());
            }) ;
            return str;
        },
		setValue:function(values){
			this.uncheckAll();
			this.check(values);
		},
		getValue:function(){
			return this.getCheckValues();
		}
    });
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.ajaxsubmit.js ajaxsubmit组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/**
 * 创建一个ajaxsubmit控件,异步提交form表单
 * @function
 * @return {Object} ui控件
 */
biz.ajaxsubmit = biz.createUI(function(options) {
  if (typeof options == "object") {
    var me = this;
    me.uiType = 'ajaxsubmit';
  } else if (typeof options == 'string') {
    //使用方式：biz.ajaxsubmit("#formid","方法名",参数1,参数2……);
    var tempValue, args = $.makeArray(arguments).slice(1);
    $(arguments[0]).each(function() {
      tempValue = $(this)[args[0]].apply($(this), args.slice(1));
    })
    return tempValue;
  } else {
    jAlert(I18N.param_error + options, I18N.promp);
  }
}).extend({
  init: function(opts) {
    var inputName, $input, postData = {};
    //新增、编辑操作时，如checkbox、radio没选中，字段name以""提交
    if (opts.isPostEmpty === true) {
      $("div[uitype='checkbox'],div[uitype='radio']", opts.id).each(function() {
        inputName = $("input:first", this).attr("name"), $input = $("input:checked", this);
        if ($input.length == 0) {
          postData[inputName] = "";
        }
      })
      opts.data = opts.data || {};
      $.extend(true, opts.data, postData);
    };
    return $(opts.id).omAjaxSubmit(opts);
  },
  defaults: {
    isPostEmpty: true,
    error: function(xhr, error, thrown) {
//      biz.utils.loadError(xhr, error, thrown);
    }
  },
  methods: {}
});


/*
  原生ajaxsubmit
*/
/*
 * $Id$
 * operamasks-ui omAjaxSubmit 2.0
 *
 * Copyright 2011, AUTHORS.txt (http://ui.operamasks.org/about)
 * Dual licensed under the MIT or LGPL Version 2 licenses.
 * http://ui.operamasks.org/license
 *
 * http://ui.operamasks.org/docs/
 */
(function($) {

  /*
  Usage Note:
  -----------
  Do not use both omAjaxSubmit and ajaxForm on the same form.  These
  functions are intended to be exclusive.  Use omAjaxSubmit if you want
  to bind your own submit handler to the form.  For example,

  $(document).ready(function() {
    $('#myForm').bind('submit', function(e) {
      e.preventDefault(); // <-- important
      $(this).omAjaxSubmit({
        target: '#output'
      });
    });
  });

  Use ajaxForm when you want the plugin to manage all the event binding
  for you.  For example,

  $(document).ready(function() {
    $('#myForm').ajaxForm({
      target: '#output'
    });
  });

  When using ajaxForm, the omAjaxSubmit function will be invoked for you
  at the appropriate time.
*/

  /**
   * @name omAjaxSubmit
   * @class
   * <div>
   * omAjaxSubmit() 提供使用ajax方式提交HTML form的一种机制。本插件会监听表单的submit事件，<br/>
   * 覆盖传统的submit事件监听器，而使用ajax方式来处理submit事件。在表单提交之前，本插件会收集<br/>
   * 所有的表单字段，并将之序列化后附加在ajax请求的数据域(data)中。支持所有标准的html可提交的<br/>
   * 表。元素。
   * </div><br/>
   * <b>事件回调</b><br/>
   * <div>
   * 通过丰富的配置参数，omAjaxSubmit可以高度自定制。同时提供多个事件回调函数，在每一次完整<br/>
   * 的表单提交的过程中，用户有时机能够对提交的请求进行修改。
   * </div>
   * <pre>beforeSerialize:</pre>
   * <div style="text-indent:2em;">在form序列化之前执行的回调函数。在获取所有form表单字段的值之前，该函数提供了一个操作form的时机</div>
   * <pre>beforeSubmit:</pre>
   * <div style="text-indent:2em;">在form被提交之前执行的回调函数。该函数提供了一个时机来执行预提交的逻辑，比如表单校验</div><br/>
   * <b>工具方法</b><br/>
   * <div>omAjaxSubmit还提供了一系列静态工具方法，用于方便地操作表单及其字段。</div>
   * <pre>$.fn.formToArray()</pre>
   * <div style="text-indent:2em;">将表单所有元素转换成key/value的数组，例如[{name:'username', value:'jack'},{name:'password', value:'secret'}]，<br/>
   * 注意:该数组将作为参数传递给beforeSubmit函数</div>
   * <pre>$.fn.formSerialize()</pre>
   * <div style="text-indent:2em;">将表单数据序列化成可提交的字符串，例如name1=value1&amp;name2=value2</div>
   * <pre>$.fn.fieldSerialize()</pre>
   * <div style="text-indent:2em;">将表单所有元素序列化成可提交的字符串，例如name1=value1&amp;name2=value2</div>
   * <pre>$.fn.fieldValue()</pre>
   * <div style="text-indent:2em;">获取当前元素(或元素数组)的值</div>
   * <pre>$.fieldValue(successful)</pre>
   * <div style="text-indent:2em;">静态工具方法，用于获取元素的值，参数successful的意义同上</div>
   * <pre>$.fn.clearForm()</pre>
   * <div style="text-indent:2em;">清空当前表单各个元素的值</div>
   * <pre>$.fn.clearFields()</pre>
   * <div style="text-indent:2em;">清空当前元素(或元素数组)的值</div>
   * <pre>$.fn.resetForm()</pre>
   * <div style="text-indent:2em;">重置当前表单各个元素的值</div>
   * <pre>$.fn.enable(b)</pre>
   * <div style="text-indent:2em;">设置当前元素(或元素数组)的使能状态</div>
   * <pre>$.fn.selected(selected)</pre>
   * <div style="text-indent:2em;">设置当前元素(或元素数组)的选中状态</div><br/>
   * <b>示例</b><br/>
   * <pre>
   *  $(document).ready(function() {
   *      $('#myForm').bind('submit', function(e) {
   *          e.preventDefault(); //阻止form默认的提交行为
   *              $(this).omAjaxSubmit(//使用ajax提交
   *                  {
   *                      target: '#output'
   *                  }
   *              );
   *      });
   *  });
   *
   * </pre>
   * @constructor
   * @param options 标准config对象
   * @example
   *  $('#formId').omAjaxSubmit({target: '#output'});
   */
  $.fn.omAjaxSubmit = function(options) {
    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
    if (!this.length) {
      log('omAjaxSubmit: skipping submit process - no element selected');
      return this;
    }

    var method, action, url, $form = this;

    if (typeof options == 'function') {
      options = {
        success: options
      };
    }

    method = this.attr('method');
    action = this.attr('action');

    url = (typeof action === 'string') ? $.trim(action) : '';
    url = url || window.location.href || '';
    if (url) {
      // clean url (don't include hash vaue)
      url = (url.match(/^([^#]+)/) || [])[1];
    }

    options = $.extend(true, {
      /**
       * 表单提交的url。
       * @name omAjaxSubmit#url
       * @type String
       * @default form的action属性值
       * @example
       * $('#formId').omAjaxSubmit({url : 'result.jsp'});
       */
      url: url,
      /**
       * 当表单提交成功并取到响应时，执行的回调函数。
       * @name omAjaxSubmit#success
       * @param responseText 响应的文本。具体的取值根据options中的dataType有关，请参考dataType属性的说明文档。
       * @param statusText 响应的状态，在该回调中，常见的取值为success
       * @param xhr XMLHttpRequest对象
       * @param $form 经过jQuery包装的form对象
       * @event
       * @default 无
       * @example
       * //定义一个函数
       * function showResponse(responseText, statusText, xhr, $form) {
       *  alert('submit success!');
       * }
       * //提交成功取到响应时的回调函数
       * $('#formId').omAjaxSubmit({success: showResponse});
       */
      success: $.ajaxSettings.success,
      /**
       * 表单的提交方法，取值为：'GET' 或者 'POST'。
       * @name omAjaxSubmit#method
       * @type String
       * @default 'GET'
       * @example
       * $('#formId').omAjaxSubmit({method:'POST'});
       */
      method: method || 'GET',
      /**
       * iframe的src属性值，该属性在页面中有iframe的时候才用得到，通常此时form中有文件需要上传。<br/>
       * 默认值是about:blank ，如果当前页面地址使用 https 协议，则该值为javascript:false
       * @blocked
       */
      iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
    }, options);

    // hook for manipulating the form data before it is extracted;
    // convenient for use with rich editors like tinyMCE or FCKEditor
    var veto = {};
    this.trigger('form-pre-serialize', [this, options, veto]);
    if (veto.veto) {
      log('omAjaxSubmit: submit vetoed via form-pre-serialize trigger');
      return this;
    }

    /**
     * 在form序列化之前执行的回调函数。在获取form表单元素的值之前，该函数提供了一个操作form的时机。<br/>
     * 该函数接受2个参数<br/>
     * @name omAjaxSubmit#beforeSerialize
     * @event
     * @param $form form对应的jQuery对象
     * @param options 传给ajaxSubmit的options对象
     * @return false 取消form的提交
     * @example
     * beforeSerialize: function($form, options) {
     *     // return false to cancel submit
     * }
     */
    // provide opportunity to alter form data before it is serialized
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
      log('omAjaxSubmit: submit aborted via beforeSerialize callback');
      return this;
    }

    /**
     *
     * 是否以严格的语义化顺序提交form表单元素。同时，设置了该属性会忽略表单中的image标签。<br/>
     * 该属性一般不用设置(默认为false)。只有当你的服务器对semantic order有严格要求，<br/>
     * 并且你的表单中含有image时，你才需要设置它为true<br/>
     * @blocked
     */
    var n, v, a = this.formToArray(options.semantic);
    /**
     * ajax提交中的附加数据，以JSON的形式组成(key/value)。如果value是数组，将会被展开;如果value是函数，将会被求值。
     * @type JSON
     * @name omAjaxSubmit#data
     * @default 无
     * @example
     * data: { key1: 'value1', key2: 'value2' }
     */
    if (options.data) {
      options.extraData = options.data;
      for (n in options.data) {
        if (options.data[n] instanceof Array) {
          for (var k in options.data[n]) {
            a.push({
              name: n,
              value: options.data[n][k]
            });
          }
        } else {
          v = options.data[n];
          v = $.isFunction(v) ? v() : v; // if value is fn, invoke it
          a.push({
            name: n,
            value: v
          });
        }
      }
    }

    /**
     * 在form被提交之前执行的回调函数。该函数提供了一个时机来执行预提交的逻辑，或者可以用来进行校验表单元素。<br/>
     * 该函数接受3个参数:arr, $form, options。<br/>
     * 若函数返回false，则会取消form的提交。<br/>
     * @name omAjaxSubmit#beforeSubmit
     * @type Function
     * @event
     * @param arr 一个数组，包含form所有字段的key/value值，例如: [{key:value},{key1:value1},{key2:value2}]
     * @param $form form对应的jQuery对象
     * @param options 传递给ajaxSubmit的options参数
     * @return false 取消提交表单
     * @example
     * beforeSubmit: function(arr, $form, options) {
     *     // The array of form data takes the following form:
     *     // [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
     *     // return false to cancel submit
     * }
     */
    // give pre-submit callback an opportunity to abort the submit
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
      log('omAjaxSubmit: submit aborted via beforeSubmit callback');
      return this;
    }

    // fire vetoable 'validate' event
    this.trigger('form-submit-validate', [a, this, options, veto]);
    if (veto.veto) {
      log('omAjaxSubmit: submit vetoed via form-submit-validate trigger');
      return this;
    }

    var q = $.param(a);

    if (options.method.toUpperCase() == 'GET') {
      options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
      options.data = null; // data is null for 'get'
    } else {
      options.data = q; // data is the query string for 'post'
    }

    var callbacks = [];
    /**
     * 在form成功提交后，是否将form字段重置
     * @name omAjaxSubmit#resetForm
     * @type Boolean
     * @default false
     * @example
     * //提交后重置表单字段
     * $('#formId').omAjaxSubmit({resetForm: true});
     */
    if (options.resetForm) {
      callbacks.push(function() {
        $form.resetForm();
      });
    }
    /**
     * 在form成功提交后，是否将form字段清空。<br/>
     * @name omAjaxSubmit#clearForm
     * @type Boolean
     * @default false
     * @example
     * $('#formId').omAjaxSubmit({clearForm: true});
     */
    if (options.clearForm) {
      callbacks.push(function() {
        $form.clearForm();
      });
    }

    /**
     * 响应的数据格式，可选的取值为'xml'， 'script'， 'json'或者null。该选项表明了响应将要被如何处理。<br/>
     * 与jQuery.httpData一一对应，其各种取值情况处理如下：<br/>
     * <pre>
     *      'xml':  响应将会被认为是xml格式的，并作为第一个参数传递给success回调函数
     *      'json': 响应将会被认为是json格式的，其将会被求值，结果将会作为第一个参数传递给success回调函数
     *      'script':响应将会被认为是js脚本，其将在全局上下文中被执行
     * </pre>
     * @name omAjaxSubmit#dataType
     * @type String
     * @default 无
     * @example
     * $('#formId').omAjaxSubmit({dataType : 'json'});
     */
    /**
     * 指定了一个更新区域，该区域将会被ajax响应更新。<br/>
     * 该值可以是DOM元素，jQuery对象，或者一个可以被jQuery选择到的选择器。
     * @name omAjaxSubmit#target
     * @type DOM, jQuery, or String
     * @default 无
     * @example
     * $('#formId').omAjaxSubmit({target : '#targetDivId'});
     */
    // perform a load on the target only if dataType is not provided
    if (!options.dataType && options.target) {
      var oldSuccess = options.success || function() {};
      callbacks.push(function(data) {
        /**
         * 可选配置，是否替换target指定的区域。<br/>
         * 设为true将会整体替换target对应的DOM节点，设为false将只会替换节点的内容。<br/>
         * @name omAjaxSubmit#replaceTarget
         * @type Boolean
         * @default false
         * @example
         * $('#formId').omAjaxSubmit({replaceTarget : true});
         */
        var fn = options.replaceTarget ? 'replaceWith' : 'html';
        $(options.target)[fn](data).each(oldSuccess, arguments);
      });
    } else if (options.success) {
      callbacks.push(options.success);
    }

    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
      var context = options.context || options; // jQuery 1.4+ supports scope context 
      for (var i = 0, max = callbacks.length; i < max; i++) {
        callbacks[i].apply(context, [data, status, xhr || $form, $form]);
      }
    };

    // are there files to upload?
    var fileInputs = $('input:file', this).length > 0;
    var mp = 'multipart/form-data';
    var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

    /**
     * 是否总是将form的响应指向一个iframe，该属性在有文件上传的情况下有用。
     * @blocked
     */
    // options.iframe allows user to force iframe mode
    // 06-NOV-09: now defaulting to iframe mode if file input is detected
    if (options.iframe !== false && (fileInputs || options.iframe || multipart)) {
      // hack to fix Safari hang (thanks to Tim Molendijk for this)
      // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
      if (options.closeKeepAlive) {
        $.get(options.closeKeepAlive, function() {
          fileUpload(a);
        });
      } else {
        fileUpload(a);
      }
    } else {
      // IE7 massage (see issue 57)
      /*if ($.browser.msie && method == 'get') { 
      var ieMeth = $form[0].getAttribute('method');
      if (typeof ieMeth === 'string')
        options.method = ieMeth;
    }*/
      options.type = options.method;
      $.ajax(options);
    }

    // fire 'notify' event
    this.trigger('form-submit-notify', [this, options]);
    return this;


    // private function for handling file uploads (hat tip to YAHOO!)

    function fileUpload(a) {
      var form = $form[0],
        el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
      var useProp = !! $.fn.prop;

      if (a) {
        // ensure that every serialized input is still enabled
        for (i = 0; i < a.length; i++) {
          el = $(form[a[i].name]);
          el[useProp ? 'prop' : 'attr']('disabled', false);
        }
      }

      if ($(':input[name=submit],:input[id=submit]', form).length) {
        // if there is an input with a name or id of 'submit' then we won't be
        // able to invoke the submit fn on the form (at least not x-browser)
        alert('Error: Form elements must not have name or id of "submit".');
        return;
      }

      s = $.extend(true, {}, $.ajaxSettings, options);
      s.context = s.context || s;
      id = 'jqFormIO' + (new Date().getTime());
      /**
       * 指定一个iframe元素。当本插件处理有文件上传的form时，一般会临时创建一个隐藏的iframe来接收响应。<br/>
       * 配置该属性，用户可以使用一个已存在的iframe，而不是使用临时iframe。<br/>
       * 注意使用该属性后，本插件不会再去尝试处理服务器的响应。<br/>
       * @blocked
       */
      if (s.iframeTarget) {
        $io = $(s.iframeTarget);
        n = $io.attr('name');
        if (n == null)
          $io.attr('name', id);
        else
          id = n;
      } else {
        $io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />');
        $io.css({
          position: 'absolute',
          top: '-1000px',
          left: '-1000px'
        });
      }
      io = $io[0];


      xhr = { // mock object
        aborted: 0,
        responseText: null,
        responseXML: null,
        status: 0,
        statusText: 'n/a',
        getAllResponseHeaders: function() {},
        getResponseHeader: function() {},
        setRequestHeader: function() {},
        abort: function(status) {
          var e = (status === 'timeout' ? 'timeout' : 'aborted');
          log('aborting upload... ' + e);
          this.aborted = 1;
          $io.attr('src', s.iframeSrc); // abort op in progress
          xhr.error = e;
          s.error && s.error.call(s.context, xhr, e, status);
          g && $.event.trigger("ajaxError", [xhr, s, e]);
          s.complete && s.complete.call(s.context, xhr, e);
        }
      };

      g = s.global;
      // trigger ajax global events so that activity/block indicators work like normal
      if (g && !$.active++) {
        $.event.trigger("ajaxStart");
      }
      if (g) {
        $.event.trigger("ajaxSend", [xhr, s]);
      }

      if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
        if (s.global) {
          $.active--;
        }
        return;
      }
      if (xhr.aborted) {
        return;
      }

      // add submitting element to data if we know it
      sub = form.clk;
      if (sub) {
        n = sub.name;
        if (n && !sub.disabled) {
          s.extraData = s.extraData || {};
          s.extraData[n] = sub.value;
          if (sub.type == "image") {
            s.extraData[n + '.x'] = form.clk_x;
            s.extraData[n + '.y'] = form.clk_y;
          }
        }
      }

      var CLIENT_TIMEOUT_ABORT = 1;
      var SERVER_ABORT = 2;

      function getDoc(frame) {
        var doc = frame.contentWindow ? frame.contentWindow.document : frame.contentDocument ? frame.contentDocument : frame.document;
        return doc;
      }

      // take a breath so that pending repaints get some cpu time before the upload starts

      function doSubmit() {
        // make sure form attrs are set
        var t = $form.attr('target'),
          a = $form.attr('action');

        // update form attrs in IE friendly way
        form.setAttribute('target', id);
        if (!method) {
          form.setAttribute('method', 'POST');
        }
        if (a != s.url) {
          form.setAttribute('action', s.url);
        }

        // ie borks in some cases when setting encoding
        if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {
          $form.attr({
            encoding: 'multipart/form-data',
            enctype: 'multipart/form-data'
          });
        }

        // support timout
        if (s.timeout) {
          timeoutHandle = setTimeout(function() {
            timedOut = true;
            cb(CLIENT_TIMEOUT_ABORT);
          }, s.timeout);
        }

        // look for server aborts

        function checkState() {
          try {
            var state = getDoc(io).readyState;
            log('state = ' + state);
            if (state.toLowerCase() == 'uninitialized')
              setTimeout(checkState, 50);
          } catch (e) {
            log('Server abort: ', e, ' (', e.name, ')');
            cb(SERVER_ABORT);
            timeoutHandle && clearTimeout(timeoutHandle);
            timeoutHandle = undefined;
          }
        }

        // add "extra" data to form if provided in options
        var extraInputs = [];
        try {
          if (s.extraData) {
            for (var n in s.extraData) {
              extraInputs.push(
                $('<input type="hidden" name="' + n + '" />').attr('value', s.extraData[n])
                .appendTo(form)[0]);
            }
          }

          if (!s.iframeTarget) {
            // add iframe to doc and submit the form
            $io.appendTo('body');
            io.attachEvent ? io.attachEvent('onload', cb) : io.addEventListener('load', cb, false);
          }
          setTimeout(checkState, 15);
          form.submit();
        } finally {
          // reset attrs and remove "extra" input elements
          form.setAttribute('action', a);
          if (t) {
            form.setAttribute('target', t);
          } else {
            $form.removeAttr('target');
          }
          $(extraInputs).remove();
        }
      }
      /**
       * 强制同步，如果设置了该属性，在form提交时将立即进行文件上传，否则在提交表单后会延迟10毫秒再进行文件上传。<br/>
       * 在延迟的这一短暂时间里，浏览器有机会更新DOM结构，比如想要向用户展示"请稍后..."的提示。<br/>
       * 显示这些的提示是需要时间来更新DOM结构的。暂停这一会儿时间，再真正提交表单，可以增加易用性。<br/>
       * @blocked
       */
      if (s.forceSync) {
        doSubmit();
      } else {
        setTimeout(doSubmit, 10); // this lets dom updates render
      }

      var data, doc, domCheckCount = 50,
        callbackProcessed;

      function cb(e) {
        if (xhr.aborted || callbackProcessed) {
          return;
        }
        try {
          doc = getDoc(io);
        } catch (ex) {
          log('cannot access response document: ', ex);
          e = SERVER_ABORT;
        }
        if (e === CLIENT_TIMEOUT_ABORT && xhr) {
          xhr.abort('timeout');
          return;
        } else if (e == SERVER_ABORT && xhr) {
          xhr.abort('server abort');
          return;
        }

        if (!doc || doc.location.href == s.iframeSrc) {
          // response not received yet
          if (!timedOut)
            return;
        }
        io.detachEvent ? io.detachEvent('onload', cb) : io.removeEventListener('load', cb, false);

        var status = 'success',
          errMsg;
        try {
          if (timedOut) {
            throw 'timeout';
          }

          var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
          log('isXml=' + isXml);
          if (!isXml && window.opera && (doc.body == null || doc.body.innerHTML == '')) {
            if (--domCheckCount) {
              // in some browsers (Opera) the iframe DOM is not always traversable when
              // the onload callback fires, so we loop a bit to accommodate
              log('requeing onLoad callback, DOM not available');
              setTimeout(cb, 250);
              return;
            }
            // let this fall through because server response could be an empty document
            //log('Could not access iframe DOM after mutiple tries.');
            //throw 'DOMException: not available';
          }

          //log('response detected');
          var docRoot = doc.body ? doc.body : doc.documentElement;
          xhr.responseText = docRoot ? docRoot.innerHTML : null;
          xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
          if (isXml)
            s.dataType = 'xml';
          xhr.getResponseHeader = function(header) {
            var headers = {
              'content-type': s.dataType
            };
            return headers[header];
          };
          // support for XHR 'status' & 'statusText' emulation :
          if (docRoot) {
            xhr.status = Number(docRoot.getAttribute('status')) || xhr.status;
            xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
          }

          var dt = s.dataType || '';
          var scr = /(json|script|text)/.test(dt.toLowerCase());
          if (scr || s.textarea) {
            // see if user embedded response in textarea
            var ta = doc.getElementsByTagName('textarea')[0];
            if (ta) {
              xhr.responseText = ta.value;
              // support for XHR 'status' & 'statusText' emulation :
              xhr.status = Number(ta.getAttribute('status')) || xhr.status;
              xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
            } else if (scr) {
              // account for browsers injecting pre around json response
              var pre = doc.getElementsByTagName('pre')[0];
              var b = doc.getElementsByTagName('body')[0];
              if (pre) {
                xhr.responseText = pre.textContent ? pre.textContent : pre.innerHTML;
              } else if (b) {
                xhr.responseText = b.innerHTML;
              }
            }
          } else if (s.dataType == 'xml' && !xhr.responseXML && xhr.responseText != null) {
            xhr.responseXML = toXml(xhr.responseText);
          }

          try {
            data = httpData(xhr, s.dataType, s);
          } catch (e) {
            status = 'parsererror';
            xhr.error = errMsg = (e || status);
          }
        } catch (e) {
          log('error caught: ', e);
          status = 'error';
          xhr.error = errMsg = (e || status);
        }

        if (xhr.aborted) {
          log('upload aborted');
          status = null;
        }

        if (xhr.status) { // we've set xhr.status
          status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
        }

        // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
        if (status === 'success') {
          s.success && s.success.call(s.context, data, 'success', xhr);
          g && $.event.trigger("ajaxSuccess", [xhr, s]);
        } else if (status) {
          if (errMsg == undefined)
            errMsg = xhr.statusText;
          s.error && s.error.call(s.context, xhr, status, errMsg);
          g && $.event.trigger("ajaxError", [xhr, s, errMsg]);
        }

        g && $.event.trigger("ajaxComplete", [xhr, s]);

        if (g && !--$.active) {
          $.event.trigger("ajaxStop");
        }

        s.complete && s.complete.call(s.context, xhr, status);

        callbackProcessed = true;
        if (s.timeout)
          clearTimeout(timeoutHandle);

        // clean up
        setTimeout(function() {
          if (!s.iframeTarget)
            $io.remove();
          xhr.responseXML = null;
        }, 100);
      }

      var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
          if (window.ActiveXObject) {
            doc = new ActiveXObject('Microsoft.XMLDOM');
            doc.async = 'false';
            doc.loadXML(s);
          } else {
            doc = (new DOMParser()).parseFromString(s, 'text/xml');
          }
          return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
        };
      var parseJSON = $.parseJSON || function(s) {
          return window['eval']('(' + s + ')');
        };

      var httpData = function(xhr, type, s) { // mostly lifted from jq1.4.4

        var ct = xhr.getResponseHeader('content-type') || '',
          xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
          data = xml ? xhr.responseXML : xhr.responseText;

        if (xml && data.documentElement.nodeName === 'parsererror') {
          $.error && $.error('parsererror');
        }
        if (s && s.dataFilter) {
          data = s.dataFilter(data, type);
        }
        if (typeof data === 'string') {
          if (type === 'json' || !type && ct.indexOf('json') >= 0) {
            data = parseJSON(data);
          } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
            $.globalEval(data);
          }
        }
        return data;
      };
    }
  };

  /**
   * ajaxForm() provides a mechanism for fully automating form submission.
   *
   * The advantages of using this method instead of omAjaxSubmit() are:
   *
   * 1: This method will include coordinates for <input type="image" /> elements (if the element
   *  is used to submit the form).
   * 2. This method will include the submit element's name/value data (for the element that was
   *  used to submit the form).
   * 3. This method binds the submit() method to the form for you.
   *
   * The options argument for ajaxForm works exactly as it does for omAjaxSubmit.  ajaxForm merely
   * passes the options argument along after properly binding events for submit elements and
   * the form itself.
   */
  $.fn.ajaxForm = function(options) {
    // in jQuery 1.3+ we can fix mistakes with the ready state
    if (this.length === 0) {
      var o = {
        s: this.selector,
        c: this.context
      };
      if (!$.isReady && o.s) {
        log('DOM not ready, queuing ajaxForm');
        $(function() {
          $(o.s, o.c).ajaxForm(options);
        });
        return this;
      }
      // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
      log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
      return this;
    }

    return this.ajaxFormUnbind().bind('submit.form-plugin', function(e) {
      if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
        e.preventDefault();
        $(this).omAjaxSubmit(options);
      }
    }).bind('click.form-plugin', function(e) {
      var target = e.target;
      var $el = $(target);
      if (!($el.is(":submit,input:image"))) {
        // is this a child element of the submit el?  (ex: a span within a button)
        var t = $el.closest(':submit');
        if (t.length == 0) {
          return;
        }
        target = t[0];
      }
      var form = this;
      form.clk = target;
      if (target.type == 'image') {
        if (e.offsetX != undefined) {
          form.clk_x = e.offsetX;
          form.clk_y = e.offsetY;
        } else if (typeof $.fn.offset == 'function') { // try to use dimensions plugin
          var offset = $el.offset();
          form.clk_x = e.pageX - offset.left;
          form.clk_y = e.pageY - offset.top;
        } else {
          form.clk_x = e.pageX - target.offsetLeft;
          form.clk_y = e.pageY - target.offsetTop;
        }
      }
      // clear form vars
      setTimeout(function() {
        form.clk = form.clk_x = form.clk_y = null;
      }, 100);
    });
  };

  // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
  $.fn.ajaxFormUnbind = function() {
    return this.unbind('submit.form-plugin click.form-plugin');
  };

  /**
   * formToArray() gathers form element data into an array of objects that can
   * be passed to any of the following ajax functions: $.get, $.post, or load.
   * Each object in the array has both a 'name' and 'value' property.  An example of
   * an array for a simple login form might be:
   *
   * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
   *
   * It is this array that is passed to pre-submit callback functions provided to the
   * omAjaxSubmit() and ajaxForm() methods.
   */
  $.fn.formToArray = function(semantic) {
    var a = [];
    if (this.length === 0) {
      return a;
    }

    var form = this[0];
    var els = semantic ? form.getElementsByTagName('*') : form.elements;
    if (!els) {
      return a;
    }

    var i, j, n, v, el, max, jmax;
    for (i = 0, max = els.length; i < max; i++) {
      el = els[i];
      n = el.name;
      if (!n) {
        continue;
      }

      if (semantic && form.clk && el.type == "image") {
        // handle image inputs on the fly when semantic == true
        if (!el.disabled && form.clk == el) {
          a.push({
            name: n,
            value: $(el).val()
          });
          a.push({
            name: n + '.x',
            value: form.clk_x
          }, {
            name: n + '.y',
            value: form.clk_y
          });
        }
        continue;
      }

      v = $.fieldValue(el, true);
      if (v && v.constructor == Array) {
        for (j = 0, jmax = v.length; j < jmax; j++) {
          a.push({
            name: n,
            value: v[j]
          });
        }
      } else if (v !== null && typeof v != 'undefined') {
        a.push({
          name: n,
          value: v
        });
      }
    }

    if (!semantic && form.clk) {
      // input type=='image' are not found in elements array! handle it here
      var $input = $(form.clk),
        input = $input[0];
      n = input.name;
      if (n && !input.disabled && input.type == 'image') {
        a.push({
          name: n,
          value: $input.val()
        });
        a.push({
          name: n + '.x',
          value: form.clk_x
        }, {
          name: n + '.y',
          value: form.clk_y
        });
      }
    }
    return a;
  };

  /**
   * Serializes form data into a 'submittable' string. This method will return a string
   * in the format: name1=value1&amp;name2=value2
   */
  $.fn.formSerialize = function(semantic) {
    //hand off to jQuery.param for proper encoding
    return $.param(this.formToArray(semantic));
  };

  /**
   * Serializes all field elements in the jQuery object into a query string.
   * This method will return a string in the format: name1=value1&amp;name2=value2
   */
  $.fn.fieldSerialize = function(successful) {
    var a = [];
    this.each(function() {
      var n = this.name;
      if (!n) {
        return;
      }
      var v = $.fieldValue(this, successful);
      if (v && v.constructor == Array) {
        for (var i = 0, max = v.length; i < max; i++) {
          a.push({
            name: n,
            value: v[i]
          });
        }
      } else if (v !== null && typeof v != 'undefined') {
        a.push({
          name: this.name,
          value: v
        });
      }
    });
    //hand off to jQuery.param for proper encoding
    return $.param(a);
  };

  /**
   * Returns the value(s) of the element in the matched set.  For example, consider the following form:
   *
   *  <form><fieldset>
   *    <input name="A" type="text" />
   *    <input name="A" type="text" />
   *    <input name="B" type="checkbox" value="B1" />
   *    <input name="B" type="checkbox" value="B2"/>
   *    <input name="C" type="radio" value="C1" />
   *    <input name="C" type="radio" value="C2" />
   *  </fieldset></form>
   *
   *  var v = $(':text').fieldValue();
   *  // if no values are entered into the text inputs
   *  v == ['','']
   *  // if values entered into the text inputs are 'foo' and 'bar'
   *  v == ['foo','bar']
   *
   *  var v = $(':checkbox').fieldValue();
   *  // if neither checkbox is checked
   *  v === undefined
   *  // if both checkboxes are checked
   *  v == ['B1', 'B2']
   *
   *  var v = $(':radio').fieldValue();
   *  // if neither radio is checked
   *  v === undefined
   *  // if first radio is checked
   *  v == ['C1']
   *
   * The successful argument controls whether or not the field element must be 'successful'
   * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
   * The default value of the successful argument is true.  If this value is false the value(s)
   * for each element is returned.
   *
   * Note: This method *always* returns an array.  If no valid value can be determined the
   *     array will be empty, otherwise it will contain one or more values.
   */
  $.fn.fieldValue = function(successful) {
    for (var val = [], i = 0, max = this.length; i < max; i++) {
      var el = this[i];
      var v = $.fieldValue(el, successful);
      if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
        continue;
      }
      v.constructor == Array ? $.merge(val, v) : val.push(v);
    }
    return val;
  };

  /**
   * Returns the value of the field element.
   */
  $.fieldValue = function(el, successful) {
    var n = el.name,
      t = el.type,
      tag = el.tagName.toLowerCase();
    if (successful === undefined) {
      successful = true;
    }

    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
      (t == 'checkbox' || t == 'radio') && !el.checked ||
      (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
      tag == 'select' && el.selectedIndex == -1)) {
      return null;
    }

    if (tag == 'select') {
      var index = el.selectedIndex;
      if (index < 0) {
        return null;
      }
      var a = [],
        ops = el.options;
      var one = (t == 'select-one');
      var max = (one ? index + 1 : ops.length);
      for (var i = (one ? index : 0); i < max; i++) {
        var op = ops[i];
        if ((!one && op.selected) || one) {
          var v = op.value;
          if (!v) { // extra pain for IE...
            v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
          }
          if (one) {
            return v;
          }
          a.push(v);
        }
      }
      return a;
    }
    return $(el).val();
  };

  /**
   * Clears the form data.  Takes the following actions on the form's input fields:
   *  - input text fields will have their 'value' property set to the empty string
   *  - select elements will have their 'selectedIndex' property set to -1
   *  - checkbox and radio inputs will have their 'checked' property set to false
   *  - inputs of type submit, button, reset, and hidden will *not* be effected
   *  - button elements will *not* be effected
   */
  $.fn.clearForm = function() {
    return this.each(function() {
      $('input,select,textarea', this).clearFields();
    });
  };

  /**
   * Clears the selected form elements.
   */
  $.fn.clearFields = $.fn.clearInputs = function() {
    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
    return this.each(function() {
      var t = this.type,
        tag = this.tagName.toLowerCase();
      if (re.test(t) || tag == 'textarea') {
        this.value = '';
      } else if (t == 'checkbox' || t == 'radio') {
        this.checked = false;
      } else if (tag == 'select') {
        this.selectedIndex = -1;
      }
    });
  };

  /**
   * Resets the form data.  Causes all form elements to be reset to their original value.
   */
  $.fn.resetForm = function() {
    return this.each(function() {
      // guard against an input with the name of 'reset'
      // note that IE reports the reset function as an 'object'
      if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
        this.reset();
      }
    });
  };


  /**
   * Checks/unchecks any matching checkboxes or radio buttons and
   * selects/deselects and matching option elements.
   */
  $.fn.selected = function(select) {
    if (select === undefined) {
      select = true;
    }
    return this.each(function() {
      var t = this.type;
      if (t == 'checkbox' || t == 'radio') {
        this.checked = select;
      } else if (this.tagName.toLowerCase() == 'option') {
        var $sel = $(this).parent('select');
        if (select && $sel[0] && $sel[0].type == 'select-one') {
          // deselect all other options
          $sel.find('option').selected(false);
        }
        this.selected = select;
      }
    });
  };

  // helper fn for console logging

  function log() {
    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');
    if (window.console && window.console.log) {
      window.console.log(msg);
    } else if (window.opera && window.opera.postError) {
      window.opera.postError(msg);
    }
  };

})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.validate.js validate组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/*
	原生validate
*/ 
/**
 * jQuery Validation Plugin 1.9.0
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright (c) 2006 - 2011 J枚rn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

(function($) {

$.extend($.fn, {
	// http://docs.jquery.com/Plugins/Validation/validate
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length) {
			options && options.debug && window.console && console.warn( "nothing selected, can't validate, returning nothing" );
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data(this[0], 'validator');
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr('novalidate', 'novalidate');

		validator = new $.validator( options, this[0] );
		$.data(this[0], 'validator', validator);

		if ( validator.settings.onsubmit ) {

			var inputsAndButtons = this.find("input, button");

			// allow suppresing validation by adding a cancel class to the submit button
			inputsAndButtons.filter(".cancel").click(function () {
				validator.cancelSubmit = true;
			});

			// when a submitHandler is used, capture the submitting button
			if (validator.settings.submitHandler) {
				inputsAndButtons.filter(":submit").click(function () {
					validator.submitButton = this;
				});
			}

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug )
					// prevent form submit to be able to see console output
					event.preventDefault();

				function handle() {
					if ( validator.settings.submitHandler ) {
						if (validator.submitButton) {
							// insert a hidden input as a replacement for the missing submit button
							var hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
						}
						validator.settings.submitHandler.call( validator, validator.currentForm );
						if (validator.submitButton) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://docs.jquery.com/Plugins/Validation/valid
	valid: function() {
        if ( $(this[0]).is('form')) {
            return this.validate().form();
        } else {
            var valid = true;
            var validator = $(this[0].form).validate();
            this.each(function() {
				valid &= validator.element(this);
            });
            return valid;
        }
    },
	// attributes: space seperated list of attributes to retrieve and remove
	removeAttrs: function(attributes) {
		var result = {},
			$element = this;
		$.each(attributes.split(/\s/), function(index, value) {
			result[value] = $element.attr(value);
			$element.removeAttr(value);
		});
		return result;
	},
	// http://docs.jquery.com/Plugins/Validation/rules
	rules: function(command, argument) {
		var element = this[0];

		if (command) {
			var settings = $.data(element.form, 'validator').settings;
			var staticRules = settings.rules;
			var existingRules = $.validator.staticRules(element);
			switch(command) {
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				staticRules[element.name] = existingRules;
				if (argument.messages)
					settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
				break;
			case "remove":
				if (!argument) {
					delete staticRules[element.name];
					return existingRules;
				}
				var filtered = {};
				$.each(argument.split(/\s/), function(index, method) {
					filtered[method] = existingRules[method];
					delete existingRules[method];
				});
				return filtered;
			}
		}

		var data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.metadataRules(element),
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.staticRules(element)
		), element);

		// make sure required is at front
		if (data.required) {
			var param = data.required;
			delete data.required;
			data = $.extend({required: param}, data);
		}

		return data;
	}
});

// Custom selectors
$.extend($.expr[":"], {
	// http://docs.jquery.com/Plugins/Validation/blank
	blank: function(a) {return !$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/filled
	filled: function(a) {return !!$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/unchecked
	unchecked: function(a) {return !a.checked;}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

$.validator.format = function(source, params) {
	if ( arguments.length == 1 )
		return function() {
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply( this, args );
		};
	if ( arguments.length > 2 && params.constructor != Array  ) {
		params = $.makeArray(arguments).slice(1);
	}
	if ( params.constructor != Array ) {
		params = [ params ];
	}
	$.each(params, function(i, n) {
		source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
	});
	return source;
};

$.extend($.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function(element, event) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
				this.settings.unhighlight && this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				this.addWrapper(this.errorsFor(element)).hide();
			}
		},
		onfocusout: function(element, event) {
		    //modify  by futh 焦点离开控件立即触发校验
			//if ( !this.checkable(element) && (element.name in this.submitted || !this.optional(element)) ) {
				this.element(element);
			//}
		},
		onkeyup: function(element, event) {
			if ( element.name in this.submitted || element == this.lastElement ) {
				this.element(element);
			}
		},
        onchange: function(element, event) {
			if ( element.name in this.submitted || element == this.lastElement ) {
				this.element(element);
			}
		},
		onclick: function(element, event) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted )
				this.element(element);
			// or option elements, check parent select in that case
			else if (element.parentNode.name in this.submitted)
				this.element(element.parentNode);
		},
		highlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
	setDefaults: function(settings) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		accept: "Please enter a value with a valid extension.",
		maxlength: $.validator.format("Please enter no more than {0} characters."),
		minlength: $.validator.format("Please enter at least {0} characters."),
		rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
		range: $.validator.format("Please enter a value between {0} and {1}."),
		max: $.validator.format("Please enter a value less than or equal to {0}."),
		min: $.validator.format("Please enter a value greater than or equal to {0}.")
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {});
			$.each(this.settings.groups, function(key, value) {
				$.each(value.split(/\s/), function(index, name) {
					groups[name] = key;
				});
			});
			var rules = this.settings.rules;
			$.each(rules, function(key, value) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, "");
				validator.settings[eventType] && validator.settings[eventType].call(validator, this[0], event);
			}
			$(this.currentForm)
				.validateDelegate(":text, :password, :file, textarea", "focusin focusout keyup", delegate)
				.validateDelegate(":radio, :checkbox, option", "click", delegate)
                .validateDelegate(":text,select", "change", delegate);

			if (this.settings.invalidHandler)
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/form
		form: function() {
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if (!this.valid())
				$(this.currentForm).triggerHandler("invalid-form", [this]);
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
				this.check( elements[i] );
			}
			return this.valid();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/element
		element: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );
			this.lastElement = element;
			this.prepareElement( element );
			this.currentElements = $(element);
			var result = this.check( element );
			if ( result ) {
				delete this.invalid[element.name];
			} else {
				this.invalid[element.name] = true;
			}
			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/showErrors
		showErrors: function(errors) {
			if(errors) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[name],
						element: this.findByName(name)[0]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function(element) {
					return !(element.name in errors);
				});
			}
			this.settings.showErrors
				? this.settings.showErrors.call( this, this.errorMap, this.errorList )
				: this.defaultShowErrors();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/resetForm
		resetForm: function() {
			if ( $.fn.resetForm )
				$( this.currentForm ).resetForm();
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements().removeClass( this.settings.errorClass );
		},

		numberOfInvalids: function() {
			return this.objectLength(this.invalid);
		},

		objectLength: function( obj ) {
			var count = 0;
			for ( var i in obj )
				count++;
			return count;
		},

		hideErrors: function() {
			this.addWrapper( this.toHide ).hide();
		},

		valid: function() {
			return this.size() == 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if( this.settings.focusInvalid ) {
				try {
					$(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
					.filter(":visible")
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep(this.errorList, function(n) {
				return n.element.name == lastActive.name;
			}).length == 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				!this.name && validator.settings.debug && window.console && console.error( "%o has no name assigned", this);

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) )
					return false;

				rulesCache[this.name] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[0];
		},

		errors: function() {
			return $( this.settings.errorElement + "." + this.settings.errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $([]);
			this.toHide = $([]);
			this.currentElements = $([]);
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor(element);
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $(element).rules();
			var dependencyMismatch = false;
			for (var method in rules ) {
				var rule = { method: method, parameters: rules[method] };
				try {
					var result = $.validator.methods[method].call( this, element.value.replace(/\r/g, ""), element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result == "dependency-mismatch" ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result == "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor(element) );
						return;
					}

					if( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch(e) {
					this.settings.debug && window.console && console.log("exception occured when checking element " + element.id
						 + ", check the '" + rule.method + "' method", e);
					throw e;
				}
			}
			if (dependencyMismatch)
				return;
			if ( this.objectLength(rules) )
				this.successList.push(element);
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's "messages" metadata
		customMetaMessage: function(element, method) {
			if (!$.metadata)
				return;

			var meta = this.settings.meta
				? $(element).metadata()[this.settings.meta]
				: $(element).metadata();

			return meta && meta.messages && meta.messages[method];
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[name];
			return m && (m.constructor == String
				? m
				: m[method]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for(var i = 0; i < arguments.length; i++) {
				if (arguments[i] !== undefined)
					return arguments[i];
			}
			return undefined;
		},

		defaultMessage: function( element, method) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customMetaMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[method],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message == "function" ) {
				message = message.call(this, rule.parameters, element);
			} else if (theregex.test(message)) {
				message = jQuery.format(message.replace(theregex, '{$1}'), rule.parameters);
			}
			this.errorList.push({
				message: message,
				element: element
			});

			this.errorMap[element.name] = message;
			this.submitted[element.name] = message;
		},

		addWrapper: function(toToggle) {
			if ( this.settings.wrapper )
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			return toToggle;
		},

		defaultShowErrors: function() {
			for ( var i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				this.settings.highlight && this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				this.showLabel( error.element, error.message );
			}
			if( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if (this.settings.success) {
				for ( var i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if (this.settings.unhighlight) {
				for ( var i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not(this.invalidElements());
		},

		invalidElements: function() {
			return $(this.errorList).map(function() {
				return this.element;
			});
		},

		showLabel: function(element, message) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// refresh error/success class
				label.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// check if we have a generated label, replace the message then
				label.attr("generated") && label.html(message);
			} else {
				// create label
				label = $("<" + this.settings.errorElement + "/>")
					.attr({"for":  this.idOrName(element), generated: true})
					.addClass(this.settings.errorClass)
					.html(message || "");
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
				}
				if ( !this.labelContainer.append(label).length )
					this.settings.errorPlacement
						? this.settings.errorPlacement(label, $(element) )
						: label.insertAfter(element);
			}
			if ( !message && this.settings.success ) {
				label.text("");
				typeof this.settings.success == "string"
					? label.addClass( this.settings.success )
					: this.settings.success( label );
			}
			this.toShow = this.toShow.add(label);
		},

		errorsFor: function(element) {
			var name = this.idOrName(element);
    		return this.errors().filter(function() {
				return $(this).attr('for') == name;
			});
		},

		idOrName: function(element) {
			return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
		},

		validationTargetFor: function(element) {
			// if radio/checkbox, validate first element in group instead
			if (this.checkable(element)) {
				element = this.findByName( element.name ).not(this.settings.ignore)[0];
			}
			return element;
		},

		checkable: function( element ) {
			return /radio|checkbox/i.test(element.type);
		},

		findByName: function( name ) {
			// select by name and filter by form for performance over form.find("[name=...]")
			var form = this.currentForm;
			return $(document.getElementsByName(name)).map(function(index, element) {
				return element.form == form && element.name == name && element  || null;
			});
		},

		getLength: function(value, element) {
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				return $("option:selected", element).length;
			case 'input':
				if( this.checkable( element) )
					return this.findByName(element.name).filter(':checked').length;
			}
			return value.length;
		},

		depend: function(param, element) {
			return this.dependTypes[typeof param]
				? this.dependTypes[typeof param](param, element)
				: true;
		},

		dependTypes: {
			"boolean": function(param, element) {
				return param;
			},
			"string": function(param, element) {
				return !!$(param, element.form).length;
			},
			"function": function(param, element) {
				return param(element);
			}
		},

		optional: function(element) {
			return !$.validator.methods.required.call(this, $.trim(element.value), element) && "dependency-mismatch";
		},

		startRequest: function(element) {
			if (!this.pending[element.name]) {
				this.pendingRequest++;
				this.pending[element.name] = true;
			}
		},

		stopRequest: function(element, valid) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if (this.pendingRequest < 0)
				this.pendingRequest = 0;
			delete this.pending[element.name];
			if ( valid && this.pendingRequest == 0 && this.formSubmitted && this.form() ) {
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest == 0 && this.formSubmitted) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
				this.formSubmitted = false;
			}
		},

		previousValue: function(element) {
			return $.data(element, "previousValue") || $.data(element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: {required: true},
		email: {email: true},
		url: {url: true},
		date: {date: true},
		dateISO: {dateISO: true},
		dateDE: {dateDE: true},
		number: {number: true},
		numberDE: {numberDE: true},
		digits: {digits: true},
		creditcard: {creditcard: true}
	},

	addClassRules: function(className, rules) {
		className.constructor == String ?
			this.classRuleSettings[className] = rules :
			$.extend(this.classRuleSettings, className);
	},

	classRules: function(element) {
		var rules = {};
		var classes = $(element).attr('class');
		classes && $.each(classes.split(' '), function() {
			if (this in $.validator.classRuleSettings) {
				$.extend(rules, $.validator.classRuleSettings[this]);
			}
		});
		return rules;
	},

	attributeRules: function(element) {
		var rules = {};
		var $element = $(element);

		for (var method in $.validator.methods) {
			var value;
			// If .prop exists (jQuery >= 1.6), use it to get true/false for required
			if (method === 'required' && typeof $.fn.prop === 'function') {
				value = $element.prop(method);
			} else {
				value = $element.attr(method);
			}
			if (value) {
				rules[method] = value;
			} else if ($element[0].getAttribute("type") === method) {
				rules[method] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
		if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
			delete rules.maxlength;
		}

		return rules;
	},

	metadataRules: function(element) {
		if (!$.metadata) return {};

		var meta = $.data(element.form, 'validator').settings.meta;
		return meta ?
			$(element).metadata()[meta] :
			$(element).metadata();
	},

	staticRules: function(element) {
		var rules = {};
		var validator = $.data(element.form, 'validator');
		if (validator.settings.rules) {
			rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
		}
		return rules;
	},

	normalizeRules: function(rules, element) {
		// handle dependency check
		$.each(rules, function(prop, val) {
			// ignore rule when param is explicitly false, eg. required:false
			if (val === false) {
				delete rules[prop];
				return;
			}
			if (val.param || val.depends) {
				var keepRule = true;
				switch (typeof val.depends) {
					case "string":
						keepRule = !!$(val.depends, element.form).length;
						break;
					case "function":
						keepRule = val.depends.call(element, element);
						break;
				}
				if (keepRule) {
					rules[prop] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[prop];
				}
			}
		});

		// evaluate parameters
		$.each(rules, function(rule, parameter) {
			rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
		});

		// clean number parameters
		$.each(['minlength', 'maxlength', 'min', 'max'], function() {
			if (rules[this]) {
				rules[this] = Number(rules[this]);
			}
		});
		$.each(['rangelength', 'range'], function() {
			if (rules[this]) {
				rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
			}
		});

		if ($.validator.autoCreateRanges) {
			// auto-create ranges
			if (rules.min && rules.max) {
				rules.range = [rules.min, rules.max];
				delete rules.min;
				delete rules.max;
			}
			if (rules.minlength && rules.maxlength) {
				rules.rangelength = [rules.minlength, rules.maxlength];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		// To support custom messages in metadata ignore rule methods titled "messages"
		if (rules.messages) {
			delete rules.messages;
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function(data) {
		if( typeof data == "string" ) {
			var transformed = {};
			$.each(data.split(/\s/), function() {
				transformed[this] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/addMethod
	addMethod: function(name, method, message) {
		$.validator.methods[name] = method;
		$.validator.messages[name] = message != undefined ? message : $.validator.messages[name];
		if (method.length < 3) {
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},

	methods: {

		// http://docs.jquery.com/Plugins/Validation/Methods/required
		required: function(value, element, param) {
			// check if dependency is met
			if ( !this.depend(param, element) )
				return "dependency-mismatch";
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				// could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val && val.length > 0;
			case 'input':
				if ( this.checkable(element) )
					return this.getLength(value, element) > 0;
			default:
				return $.trim(value).length > 0;
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/remote
		remote: function(value, element, param) {
			if ( this.optional(element) )
				return "dependency-mismatch";

			var previous = this.previousValue(element);
			if (!this.settings.messages[element.name] )
				this.settings.messages[element.name] = {};
			previous.originalMessage = this.settings.messages[element.name].remote;
			this.settings.messages[element.name].remote = previous.message;

			param = typeof param == "string" && {url:param} || param;

			if ( this.pending[element.name] ) {
				return "pending";
			}
			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			var validator = this;
			this.startRequest(element);
			var data = {};
			data[element.name] = value;
			$.ajax($.extend(true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				success: function(response) {
					validator.settings.messages[element.name].remote = previous.originalMessage;
					var valid = response === true;
					if ( valid ) {
						var submitted = validator.formSubmitted;
						validator.prepareElement(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						validator.showErrors();
					} else {
						var errors = {};
						var message = response || validator.defaultMessage( element, "remote" );
						errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/minlength
		minlength: function(value, element, param) {
			return this.optional(element) || this.getLength($.trim(value), element) >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/maxlength
		maxlength: function(value, element, param) {
			return this.optional(element) || this.getLength($.trim(value), element) <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/rangelength
		rangelength: function(value, element, param) {
			var length = this.getLength($.trim(value), element);
			return this.optional(element) || ( length >= param[0] && length <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/min
		min: function( value, element, param ) {
			return this.optional(element) || value >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/max
		max: function( value, element, param ) {
			return this.optional(element) || value <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/range
		range: function( value, element, param ) {
			return this.optional(element) || ( value >= param[0] && value <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/email
		email: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
			return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/url
		url: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/date
		date: function(value, element) {
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/dateISO
		dateISO: function(value, element) {
			return this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/number
		number: function(value, element) {
			return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d{1,2})?$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/digits
		digits: function(value, element) {
			return this.optional(element) || /^\d+$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/creditcard
		// based on http://en.wikipedia.org/wiki/Luhn
		creditcard: function(value, element) {
			if ( this.optional(element) )
				return "dependency-mismatch";
			// accept only spaces, digits and dashes
			if (/[^0-9 -]+/.test(value))
				return false;
			var nCheck = 0,
				nDigit = 0,
				bEven = false;

			value = value.replace(/\D/g, "");

			for (var n = value.length - 1; n >= 0; n--) {
				var cDigit = value.charAt(n);
				var nDigit = parseInt(cDigit, 10);
				if (bEven) {
					if ((nDigit *= 2) > 9)
						nDigit -= 9;
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) == 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/accept
		accept: function(value, element, param) {
			param = typeof param == "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
			return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/equalTo
		equalTo: function(value, element, param) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
				$(element).valid();
			});
			return value == target.val();
		}

	}

});

// deprecated, use $.validator.format instead
$.format = $.validator.format;

})(jQuery);

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
;(function($) {
	var pendingRequests = {};
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter(function(settings, _, xhr) {
			var port = settings.port;
			if (settings.mode == "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {
		// Proxy ajax
		var ajax = $.ajax;
		$.ajax = function(settings) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if (mode == "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				return (pendingRequests[port] = ajax.apply(this, arguments));
			}
			return ajax.apply(this, arguments);
		};
	}
})(jQuery);

// provides cross-browser focusin and focusout events
// IE has native support, in other browsers, use event caputuring (neither bubbles)

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
;(function($) {
	// only implement if not provided by jQuery core (since 1.4)
	// TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
	if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
		$.each({
			focus: 'focusin',
			blur: 'focusout'
		}, function( original, fix ){
			$.event.special[fix] = {
				setup:function() {
					this.addEventListener( original, handler, true );
				},
				teardown:function() {
					this.removeEventListener( original, handler, true );
				},
				handler: function(e) {
					arguments[0] = $.event.fix(e);
					arguments[0].type = fix;
					return $.event.handle.apply(this, arguments);
				}
			};
			function handler(e) {
				e = $.event.fix(e);
				e.type = fix;
				return $.event.handle.call(this, e);
			}
		});
	};
	$.extend($.fn, {
		validateDelegate: function(delegate, type, handler) {
			return this.bind(type, function(event) {
				var target = $(event.target);
				if (target.is(delegate)) {
					return handler.apply(target, arguments);
				}
			});
		}
	});
})(jQuery);



 /**
 * 创建一个validate控件,校验
 * @function
 * @return {Object} ui控件
 */
 biz.validate = biz.createUI(function(options){
	if(typeof options == "object"){	
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'validate';
	    options.target = options.id;
	}else{
		//全局方法使用方式：biz.validate("方法名",参数1,参数2……);
        var tempValue,args = $.makeArray(arguments).slice(1);
        tempValue = this.validate.prototype.methods[arguments[0]].apply(this,args);
        return tempValue;
        // jAlert(I18N.param_error + options , I18N.promp);
    }	
 }).extend({
    init:function(opts){
         var $t = this,$this = $(opts.target)[0],tempOpts = $.extend({},opts),returnObj = {} ;
         tempOpts.target = undefined;
         tempOpts.id = undefined;
         tempOpts.optType = undefined;
         if($this.nodeName.toLowerCase() == "input" || $this.nodeName.toLowerCase() == "textarea"|| $this.nodeName.toLowerCase() == "select"){
             //默认给input所在form初始化校验
             $($this.form).each(function(){$(this).validate({ignore:"",errorClass:"error validatebox",ignoreTitle: true,showErrors: $t.showErrors})});
             $(opts.target).rules("add",tempOpts);
             returnObj =  $(opts.target);
         }else if($this.nodeName.toLowerCase() == "div"  ){//add by futh 验证checkbox、radio必填
			 $($(opts.target).find("input")[0].form).each(function(){$(this).validate({ignore:"",errorClass:"error validatebox",ignoreTitle: true,showErrors: $t.showErrors})});
           
		   //获取div 下面的 checkbox or  radio元素
			var tempCheckBoxObj = $(opts.target).find(".checkbox");
			if(tempCheckBoxObj!=null && tempCheckBoxObj.length>0){
				 tempCheckBoxObj.rules("add",tempOpts);
                 returnObj =  tempCheckBoxObj ;
			}
			var tempRadioObj = $(opts.target).find(".radio");
			if(tempRadioObj!=null && tempRadioObj.length>0){
				 tempRadioObj.rules("add",tempOpts);
                 returnObj =  tempRadioObj ;
			}
            
		 }else if($this.nodeName.toLowerCase() == "form"){
             returnObj =  $(opts.target).validate($.extend({ignore:"",errorClass:"error validatebox",ignoreTitle: true,showErrors: $t.showErrors},tempOpts)) ;
         }
         return  returnObj;
    },
    defaults:{
        // optType:"add"//add or remove
    },
    methods:{
    	//全局方法，获取设置form校验属性
        setting:function(element,options){
           var settings = $(element).validate().settings;
           if(typeof options == "string"){
                return settings[options];
           }else{
              for(var opt in options){
                  settings[opt] = options[opt];
              }
           }
        },
    	//全局方法，校验是否通过
        valid:function(element){
           return $(element).valid();
        },
        //动态添加校验规则的方法
        addRules:function(opts){
        	$(this).rules("add",opts);
        },
        //动态删除校验规则的方法
        removeRules:function(opts){
        	$(this).rules("remove",opts);
        	$(this).valid();
        	//移除鼠标提示
        	$(this).unbind("mouseenter").unbind("mouseleave");
        },
        //全局方法，设置默认值
        setDefaults:function(defaults){
           $.validator.setDefaults(defaults);
        },
        //全局方法，用于扩展校验规则
        addMethod:function(name,methodfuc,message){
           $.validator.addMethod(name,methodfuc,message);
        },
        //全局方法，用于扩展校验规则
        addClassRules:function(name,rules){
           $.validator.addClassRules(name,rules);
        },
        //全局方法，用于设置提示信息
        messages :function(message){
           $.extend($.validator.messages,message);
        },
        /**
	     * JQuery.Validate组件扩展：自定义校验信息提示框
	    */
        showErrors:function(){
            var t = this;
			for ( var i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				this.settings.highlight && this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );

				var elename = this.idOrName(error.element);
				// 错误信息div
				var errdiv = $('div[validId='+ elename + ']');
				if(errdiv.length == 0){ // 没有div则创建
					errdiv = $('<div>'
							+ '<div class="errmsgdiv fl errmsg"></div>'
							+ '</div>');
					errdiv.attr({"validId":  this.idOrName(error.element), generated: true})
					.addClass(this.settings.errorClass);
					errdiv.appendTo($('body'));
				}
				//file组件的必填校验
				if($(error.element).hasClass("csiui-file")){
					var fileerrdiv = $('<div name="_diverr" class="diverr"></div>');
					if($(error.element).parent()!=null &&  $(error.element).parent().hasClass("csiui-file-wrapper") && $(error.element).parent().parent().attr("name")!="_diverr"){
						$(error.element).parent().wrap(fileerrdiv);
					}
				}

				if($(error.element)[0].type == "textarea"){
						var position_x = 1 - 16/ $(error.element)[0].clientWidth + "";
						position_x = position_x.substring(2,4) + "%";
						$(error.element).css("background-position-x",position_x);
				}
				
				if($(error.element)[0].type == "checkbox"||$(error.element)[0].type == "radio"){
					//$(error.element).removeClass("error");
					//$(error.element).removeClass("validatebox");
					var errorElementList = $(error.element).parent().parent().find(".error");
					var errorElementLenth = errorElementList==null?0:errorElementList.length;
					for ( var j = 0; j < errorElementLenth; j++ ) {
						var errorElement = errorElementList.get(j);
						if($(errorElement).hasClass("error")){
							$(errorElement).removeClass("error");
							$(errorElement).removeClass("validatebox");
						}
					}

				    if($(error.element).parent()!=null&&$(error.element).parent().parent()!=null&&$(error.element).parent().parent().parent()!=null){
				    	  if($(error.element).parent().parent().parent().attr("name")!="_diverr"){
						       var checkboxerrdiv = $('<div name="_diverr" class="diverr"></div>');
						       $(error.element).parent().parent().wrap(checkboxerrdiv);
						    }
				    }
				}else if($(error.element)[0].type == "select-one"||$(error.element)[0].type == "select-multiple"){
				    if($(error.element).parent().attr("name")!="_diverr"){
						var selecterrdiv = $('<div name="_diverr" class="diverr"></div>');
						$(error.element).wrap(selecterrdiv);
					}
				}
				//给comboboxlist  和 comboboxtree添加校验
				var spanE = $(error.element).next(); 
				var isCblistOrCbtree = false;
				var isnullselectedvalue = true;
				var hasSelectedtext = false;
				var hasValue = false;
				if(spanE){
					if(spanE.hasClass("csiui-file-wrapper")&&spanE.hasClass("droplist")) {
						isCblistOrCbtree = true;
					}
					if(isCblistOrCbtree){
						hasSelectedtext  =  $(error.element).attr("selectedtext") == undefined?false:true;
						isnullselectedvalue =  $(error.element).attr("selectedvalue") == ""?true:false;
						//是comboboxlist
						if(hasSelectedtext){		
		                	if(isnullselectedvalue){
		                		var spanE = $(error.element).next();
		                    	var comboboxllisterrdiv = $('<div name="_diverr" class="diverr"></div>');
		    					$(spanE).wrap(comboboxllisterrdiv);
		                	}
						}else{
							//是comboboxtree
							hasValue  =  $(error.element).attr("value") == undefined?false:$(error.element).attr("value") ==""?false:true;
							if(!hasValue) {
								var comboboxllisterrdiv = $('<div name="_diverr" class="diverr"></div>');
								$(spanE).wrap(comboboxllisterrdiv);
							}
	    					
						}
					}	
				}
				
				errdiv.find(".errmsg").html(error.message || "");//设置校验提示信息

				// 鼠标放到控件上校验提示信息
				if($(error.element)[0].type == "checkbox"||$(error.element)[0].type == "radio"){
					if($(error.element).parent()!=null&&$(error.element).parent().parent()!=null){
						$(error.element).parent().parent().hover(
								function(e){
									$('div[validId="'+ t.idOrName($(this).find("input")[0]) + '"]').css({left : (e.pageX+10) + 'px',top : (e.pageY + 5) + 'px'}); // 显示在鼠标位置偏移20的位置
									$('div[validId="'+ t.idOrName($(this).find("input")[0]) + '"]').fadeIn(200);
								},
								function(){
									$('div[validId="'+ t.idOrName($(this).find("input")[0]) + '"]').fadeOut(200);
								}
						);
					}
				}else if(isCblistOrCbtree){
					var spanE = $(error.element).next();
					$(spanE).hover(
							function(e){
								var elename = t.idOrName($(this).prev()[0]);
								$('div[validId="'+ elename + '"]').css({left : (e.pageX+10) + 'px',top : (e.pageY + 5) + 'px'}); // 显示在鼠标位置偏移20的位置
								$('div[validId="'+ elename + '"]').fadeIn(200);
							},
							function(){
								var elename = t.idOrName($(this).prev()[0]);
								$('div[validId="'+ elename + '"]').fadeOut(200);
							}
					);
				}else{
					$(error.element).hover(
							function(e){
								$('div[validId="'+ t.idOrName(this) + '"]').css({left : (e.pageX+10) + 'px',top : (e.pageY + 5) + 'px'}); // 显示在鼠标位置偏移20的位置
								$('div[validId="'+ t.idOrName(this) + '"]').fadeIn(200);
							},
							function(){
								$('div[validId="'+ t.idOrName(this) + '"]').fadeOut(200);
							}
					);
				}
			}

			// 校验成功的去掉错误提示
			for ( var i = 0; this.successList[i]; i++ ) {
				   // var elename = this.idOrName($(this.successList[i]).prev()[0]);
					$('div[validId="'+ this.idOrName(this.successList[i]) + '"]').remove();
					if("file"==this.successList[i].type){
						if($(this.successList[i]).parent().parent().attr("name")=="_diverr"){
							$(this.successList[i]).parent().unwrap();
						}
						
					}
					if("checkbox"==this.successList[i].type||"radio"==this.successList[i].type){
						if($(this.successList[i]).parent()!=null&&$(this.successList[i]).parent().parent()!=null&&$(this.successList[i]).parent().parent().parent()!=null){
							if($(this.successList[i]).parent().parent().parent().attr("name")=="_diverr"){
						    	$(this.successList[i]).parent().parent().unwrap();
						    }else{
						    	 $(this.successList[i])
						    }
						} 
					}else if("select-one"==this.successList[i].type||"select-multiple"==this.successList[i].type){
						if($(this.successList[i]).parent().attr("name")=="_diverr"){
					        $(this.successList[i]).unwrap();
					    }
					}else{
					  //添加对comboboxlist的特殊处理
						var spanErrorDivE = $(this.successList[i]).next();
					    var spanE = $(spanErrorDivE).children()==undefined?null:$(spanErrorDivE).children()[0];
						if(spanE){
							if($(spanE).hasClass("csiui-file-wrapper")&&$(spanE).hasClass("droplist")) {
								isCblistOrCbtree = true;
							}
						}
					   if(isCblistOrCbtree){
						  if($(spanE)!=null){
						        $(spanE).unwrap();
						  }
					   }else{
					  	  $(this.successList[i]).removeClass("validatebox");
					   }
					 
					}
			}
			// 自定义高亮
			if (this.settings.unhighlight) {
				for ( var i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
        }
    }
 });

jQuery.extend(jQuery.validator.messages, {  
    required: I18N.validator_required,  
    remote: I18N.validator_remote,  
    email: I18N.validator_email,  
    url: I18N.validator_url,  
    date:I18N.validator_date,  
    dateISO: I18N.validator_dateISO,  
    number: I18N.validator_number,  
    digits: I18N.validator_digits,  
    creditcard: I18N.validator_creditcard,  
    equalTo: I18N.validator_equalTo,  
    accept: I18N.validator_accept,  
    maxlength: jQuery.validator.format(I18N.validator_maxlength_1+"{0}"+I18N.validator_maxlength_2),  
    minlength: jQuery.validator.format(I18N.validator_minlength_1+"{0}"+I18N.validator_minlength_2),  
    rangelength: jQuery.validator.format(I18N.validator_rangelength_1+"{0}"+I18N.validator_rangelength_2+"{1}"+I18N.validator_rangelength_3),  
    range: jQuery.validator.format(I18N.validator_range_1+" {0}"+I18N.validator_range_2+" {1}"+ I18N.validator_range_3),  
    max: jQuery.validator.format(I18N.validator_max_1+" {0}"+I18N.validator_max_2),  
    min: jQuery.validator.format(I18N.validator_min_1+" {0}"+I18N.validator_min_2) 
});
    // 字符验证  
    jQuery.validator.addMethod("string", function(value, element) {  
        return this.optional(element) || /^[\u0391-\uFFE5\w]+$/.test(value);  
    }, I18N.validator_specialSignal);
 
    // 只能输入中文  
    jQuery.validator.addMethod("stringCH", function(value, element) {  
        return this.optional(element) || /^[\u4E00-\u9FA5]+$/g.test(value);  
    }, I18N.validator_chineseOnly);  

    // 只能输入26个字母  
    jQuery.validator.addMethod("stringEN", function(value, element) {  
        var length = value.length;  
        for(var i = 0; i < value.length; i++){  
            if(value.charCodeAt(i) > 127){  
                length++;  
            }  
        }    
        return this.optional(element) || /^[A-Za-z]+$/g.test(value);  
    }, I18N.validator_letterOnly);  

    //ip地址
    jQuery.validator.addMethod("ip", function(value, element) {  
		return this.optional(element) || (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/.test(value) && (RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256));  
	}, I18N.validator_IP);
	
	//port
    jQuery.validator.addMethod("port", function(value, element) {  
		return this.optional(element) || (value < 65536 && value > 0);  
	}, I18N.validator_Port); 
	
	// 邮政编码验证
	jQuery.validator.addMethod("postalcode", function(value, element) {
		var tel = /^[0-9]{6}$/;
		return this.optional(element) || (tel.test(value));
	}, I18N.validator_Postalcode); 
	
	// 手机号码验证
	jQuery.validator.addMethod("mobile", function(value, element) {
		var length = value.length;
		//长度为11，以13，15，18开头的
		return this.optional(element) || (length == 11 && /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(value));
	}, I18N.validator_mobile); 
	
	//字母数字
	jQuery.validator.addMethod("alnum", function(value, element) {
		return this.optional(element) || /^[a-zA-Z0-9]+$/.test(value);
	}, I18N.validator_alnum);
	
	//自然数
	jQuery.validator.addMethod("naturalnum", function(value, element) {
		return this.optional(element) || (/^[0-9]+$/.test(value) && (value > 0));
	},I18N.validator_naturalnum);
	
	//身份证号码
	jQuery.validator.addMethod("idcardno", function(value, element) {
		return this.optional(element) || isIdCardNo(value);   
	}, I18N.validator_idcardno);
	
	//时间
	jQuery.validator.addMethod("time", function(value, element) {
	    var tel = /^(\d{2}):(\d{2}):(\d{2})\s*([ap]m)?$/;
		return this.optional(element) || (tel.test(value));   
	}, I18N.validator_time);
	
/**
 * 身份证号码验证
 *
 */
function isIdCardNo(num) {
 var factorArr = new Array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2,1);
 var parityBit=new Array("1","0","X","9","8","7","6","5","4","3","2");
 var varArray = new Array();
 var intValue;
 var lngProduct = 0;
 var intCheckDigit;
 var intStrLen = num.length;
 var idNumber = num;
   // initialize
     if ((intStrLen != 15) && (intStrLen != 18)) {
         return false;
     }
     // check and set value
     for(i=0;i<intStrLen;i++) {
         varArray[i] = idNumber.charAt(i);
         if ((varArray[i] < '0' || varArray[i] > '9') && (i != 17)) {
             return false;
         } else if (i < 17) {
             varArray[i] = varArray[i] * factorArr[i];
         }
     }
     
     if (intStrLen == 18) {
         //check date
         var date8 = idNumber.substring(6,14);
         if (isDate8(date8) == false) {
            return false;
         }
         // calculate the sum of the products
         for(i=0;i<17;i++) {
             lngProduct = lngProduct + varArray[i];
         }
         // calculate the check digit
         intCheckDigit = parityBit[lngProduct % 11];
         // check last digit
         if (varArray[17] != intCheckDigit) {
             return false;
         }
     }
     else{        //length is 15
         //check date
         var date6 = idNumber.substring(6,12);
         if (isDate6(date6) == false) {

             return false;
         }
     }
     return true;
     
 }
 function isDate6(sDate) {
     if (!/^[0-9]{6}$/.test(sDate)) {
         return false;
     }
     var year, month, day;
     year = sDate.substring(0, 4);
     month = sDate.substring(4, 6);
     if (year < 1700 || year > 2500) return false
     if (month < 1 || month > 12) return false
     return true
 }
 /**
 * 判断是否为“YYYYMMDD”式的时期
 *
 */
 function isDate8(sDate) {
     if (!/^[0-9]{8}$/.test(sDate)) {
         return false;
     }
     var year, month, day;
     year = sDate.substring(0, 4);
     month = sDate.substring(4, 6);
     day = sDate.substring(6, 8);
     var iaMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
     if (year < 1700 || year > 2500) return false
     if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) iaMonthDays[1] = 29;
     if (month < 1 || month > 12) return false
     if (day < 1 || day > iaMonthDays[month - 1]) return false
     return true
 }
 function isDate6(sDate) {
     if (!/^[0-9]{6}$/.test(sDate)) {
         return false;
     }
     var year, month, day;
     year = sDate.substring(0, 4);
     month = sDate.substring(4, 6);
     if (year < 1700 || year > 2500) return false
     if (month < 1 || month > 12) return false
     return true
 }
 /**
 * 判断是否为“YYYYMMDD”式的时期
 *
 */
 function isDate8(sDate) {
     if (!/^[0-9]{8}$/.test(sDate)) {
         return false;
     }
     var year, month, day;
     year = sDate.substring(0, 4);
     month = sDate.substring(4, 6);
     day = sDate.substring(6, 8);
     var iaMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
     if (year < 1700 || year > 2500) return false
     if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) iaMonthDays[1] = 29;
     if (month < 1 || month > 12) return false
     if (day < 1 || day > iaMonthDays[month - 1]) return false
     return true
 }
 



/*  Bizfoundation ui 5.1
 *  biz.alert.js alert组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

 /**
 * 创建一个alert控件,提示框
 * @function
 * @return {Object} ui控件
 */
 biz.alert = biz.createUI(function(options){
	if(typeof options == "object"){
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'alert'  ;
	    //$.extend($.alerts ,options ) ;
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
        //var targetElem = opts.targetElem ? opts.targetElem:("#"+opts.id);
        var alertObj =  $.alerts ;
        switch(opts.type){
            case "alert":
                alertObj.alert(opts.message, opts.title?opts.title:I18N.warn , opts.callback);
                break;
            case "confirm":
                alertObj.confirm(opts.message, opts.title?opts.title:I18N.promp , opts.callback);
                break ;
            case "prompt":
                alertObj.prompt(opts.message, opts.value, opts.title?opts.title:I18N.promp , opts.callback);
                break;
            case "hide":
                jHide(opts.times);
                break;
        }
        return $(opts.id);
    },
    defaults:{
        type:"alert"
    }
 });


 /*
    原生alert
 */
 (function($) {
    
    $.alerts = {
        
         time:null,
        // These properties can be read/written by accessing $.alerts.propertyName from your scripts at any time
        
        verticalOffset: -75,                // vertical offset of the dialog from center screen, in pixels
        horizontalOffset: 0,                // horizontal offset of the dialog from center screen, in pixels/
        repositionOnResize: true,           // re-centers the dialog on window resize
        overlayOpacity: .3,                // transparency level of overlay
        overlayColor: '#cccccc',               // base color of overlay
        draggable: true,                    // make the dialogs draggable (requires UI Draggables plugin)
        okButton: '&nbsp;OK&nbsp;',         // text for the OK button
        cancelButton: '&nbsp;Cancel&nbsp;', // text for the Cancel button
        dialogClass: null,                  // if specified, this class will be applied to all dialogs
        
        // Public methods
        
        alert: function(message, title, callback) {
            if( title == null ) title = 'Alert';
            $.alerts._show(title, message, null, 'alert', function(result) {
                if( callback ) callback(result);
            });
        },
        
        confirm: function(message, title, callback) {
            if( title == null ) title = 'Confirm';
            $.alerts._show(title, message, null, 'confirm', function(result) {
                if( callback ) callback(result);
            });
        },
            
        prompt: function(message, value, title, callback) {
            if( title == null ) title = 'Prompt';
            $.alerts._show(title, message, value, 'prompt', function(result) {
                if( callback ) callback(result);
            });
        },
        
        // Private methods
        _show: function(title, msg, value, type, callback) {
            $.alerts._hide();
            $.alerts._overlay('show');
            var iframeContainer ="";
            if( $.browser.msie && parseInt($.browser.version) <= 6 ){
                  iframeContainer = "<iframe id='iframeContainer' style='margin-left:-1px;border: none;filter:alpha(opacity=0);-moz-opacity:0;position:absolute; z-index:-1'></iframe>";
            }
            $("BODY").append(
              '<div id="popup_container"> ' +iframeContainer+
                '<h1 id="popup_title"></h1>' +                
                '<div id="popup_content">' +
                  '<div id="popup_message"></div>' +
                '</div>' +
              '</div>');
            
            if( $.alerts.dialogClass ) $("#popup_container").addClass($.alerts.dialogClass);
            
            // IE6 Fix
            var pos = ($.browser.msie && parseInt($.browser.version) <= 6 ) ? 'absolute' : 'fixed'; 
            $("#popup_container").css({
                position: pos,
                zIndex: 99999,
                padding: 0,
                margin: 0
            });
            $("#popup_title").text(title);
            $("#popup_content").addClass(type);
            $("#popup_message").text(msg);
            $("#popup_message").html( $("#popup_message").text().replace(/\n/g, '<br />') );
            $("#popup_container").css({
                minWidth: $("#popup_container").outerWidth(),
                maxWidth: $("#popup_container").outerWidth()
            });
            
            
            $.alerts._reposition();
            $.alerts._maintainPosition(true);
            
            switch( type ) {
                case 'alert':
                    $("#popup_message").after('<div id="popup_panel" style="text-align: right;"><button  value="' + $.alerts.okButton + '" id="popup_ok" /></div>');
                
                    $("#popup_ok").button({ label:I18N.confirm}).click( function() {
                        if($.alerts.time){
                           clearTimeout($.alerts.time);
                           $.alerts.time = null;
                        }
                        $.alerts._hide();
                        callback(true);
                    });
                    $("#popup_ok").focus().keypress( function(e) {
                        if( e.keyCode == 13 || e.keyCode == 27 ) $("#popup_ok").trigger('click');
                    });
                break;
                case 'confirm':
                    $("#popup_message").after('<div id="popup_panel" style="text-align: right;"><button value="' + $.alerts.okButton + '" id="popup_ok" /> <button value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
                    $("#popup_ok").button({ label:I18N.confirm}).click( function() {
                        $.alerts._hide();
                        if( callback ) callback(true);
                    });
                    $("#popup_cancel").button({ label:I18N.cancel}).click( function() {
                        $.alerts._hide();
                        if( callback ) callback(false);
                    });
                    $("#popup_ok").focus();
                    $("#popup_ok, #popup_cancel").keypress( function(e) {
                        if( e.keyCode == 13 ) $("#popup_ok").trigger('click');
                        if( e.keyCode == 27 ) $("#popup_cancel").trigger('click');
                    });
                break;
                case 'prompt':
                    $("#popup_message").append('<br /><input type="text" size="30" id="popup_prompt" />').after('<div id="popup_panel"><button value="' + $.alerts.okButton + '" id="popup_ok" /> <button value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
                    //$("#popup_prompt").width( $("#popup_message").width() );
                    $("#popup_ok").button({ label:I18N.confirm}).click( function() {
                        var val = $("#popup_prompt").val();
                        $.alerts._hide();
                        if( callback ) callback( val );
                    });
                    $("#popup_cancel").button({ label:I18N.cancel}).click( function() {
                        $.alerts._hide();
                        if( callback ) callback( null );
                    });
                    $("#popup_prompt, #popup_ok, #popup_cancel").keypress( function(e) {
                        if( e.keyCode == 13 ) $("#popup_ok").trigger('click');
                        if( e.keyCode == 27 ) $("#popup_cancel").trigger('click');
                    });
                    if( value ) $("#popup_prompt").val(value);
                    $("#popup_prompt").focus().select();
                break;
            }
           if( $.browser.msie && parseInt($.browser.version) <= 6 ){
                $("#iframeContainer").css({
                    width: $("#popup_container").outerWidth(),
                    height: $("#popup_container").outerHeight()
                });
           }
            
            // Make draggable
            if( $.alerts.draggable ) {
                try {
                    $("#popup_container").draggable({ handle: $("#popup_title") });
                    $("#popup_title").css({ cursor: 'move' });
                } catch(e) { /* requires jQuery UI draggables */ }
            }
        },
        
        _hide: function() {
            $("#popup_container").remove();
            $.alerts._overlay('hide');
            $.alerts._maintainPosition(false);
        },
        
        _overlay: function(status) {
            switch( status ) {
                case 'show':
                    $.alerts._overlay('hide');
                    var iframeoverlay ="";
                    if( $.browser.msie && parseInt($.browser.version) <= 6 ){
                          iframeoverlay = "<iframe id='iframeoverlay' style='border: none;height:100%;width:100%;filter:alpha(opacity=0);-moz-opacity:0;position:absolute;'></iframe>";
                    }
                    $("BODY").append('<div id="popup_overlay">'+iframeoverlay+'</div>');
                    $("#popup_overlay").css({
                        position: 'absolute',
                        zoom: 1,
                        zIndex: 99998,
                        top: '0px',
                        left: '0px',
                        width: '100%',
                        height: $(document).height(),
                        background: $.alerts.overlayColor,
                        opacity: $.alerts.overlayOpacity
                    });
                        
                break;
                case 'hide':
                    $("#popup_overlay").remove();
                break;
            }
        },
        
        _reposition: function() {
            
            var top = (($(window).height() / 2) - ($("#popup_container").outerHeight() / 2)) + $.alerts.verticalOffset;
            var left = (($(window).width() / 2) - ($("#popup_container").outerWidth() / 2)) + $.alerts.horizontalOffset;
            if( top < 0 ) top = 0;
            if( left < 0 ) left = 0;

            // IE6 fix
            if( $.browser.msie && parseInt($.browser.version) <= 6 ) top = top + $(window).scrollTop();
            
            $("#popup_container").css({
                top: top + 'px',
                left: left + 'px'
            });
            $("#popup_overlay").height( $(document).height() );
            
        },
        
        _maintainPosition: function(status) {
            if( $.alerts.repositionOnResize ) {
                switch(status) {
                    case true:
                        $(window).bind('resize', $.alerts._reposition);
                    break;
                    case false:
                        $(window).unbind('resize', $.alerts._reposition);
                    break;
                }
            }
        }
        
    }
    
    // Shortuct functions
    jAlert = function(message, title, callback) {
        $.alerts.alert(message, title, callback);
    }
    
    jConfirm = function(message, title, callback) {
        $.alerts.confirm(message, title, callback);
    };
        
    jPrompt = function(message, value, title, callback) {
        $.alerts.prompt(message, value, title, callback);
    };
    jHide = function(timeout){
        if(timeout){
        
           $.alerts.time = setTimeout($.alerts._hide,timeout);
        }
    };
})(jQuery);
/*  Bizfoundation ui 5.1
 *  biz.dialog.js dialog组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


 /**
 * 创建一个dialog控件,弹出框
 * @function
 * @return {Object} ui控件
*/
 biz.dialog = biz.createUI(function(options){
	if(typeof options == "object"){	
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'dialog' ;
	    options.target = options.id;
	    //把扩展方法加到dialog组件上
	    $.extend($.ui.dialog.prototype,this._methods||{});
	    options = $.extend(true,{},this.defaults,options) ;
	    if(options.titleIco && options.title){
	        options.title = "<a href= '#'> </a> <span>"+options.title+"</span>";
	    }
	    return options;
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }
 }).extend({
    init:function(opts){
    	//修复当第一个元素为datepicker时存在死循环问题，isDescription为false设置高度为0
    	$(opts.target).prepend("<table class='descriptiontable'  border=0 cellSpacing=0 cellPadding=0 width='100%'"+(opts.isDescription?"":"style='display:none'")+"><tr><td "+(opts.isDescription?"height=50":"height=0")+"  width=50 align='center' >"
                +"<a href= '#' onfocus='this.blur();' "+(opts.isDescription?"":"style='height:0px'")+"> </a></td><td  "+(opts.isDescription?"style='LINE-HEIGHT: 16px; align:left'":"style='height:0px'")+"><div style='FONT-WEIGHT: bold;'>"+(opts.desTitle?opts.desTitle:"")
                +"</div><div>" +(opts.desContent?opts.desContent:"")+"</div></td></tr></table>");
         $(opts.target).dialog(opts);
         if(opts.times)setTimeout(function(){ 
         	$(opts.target).dialog("close")
         },opts.times);
         return this;
    },
    defaults:{
        isDescription :false,
        desTitle:"",
        desContent:"",
        titleIco:true,
        bgiframe:true,
        autoOpen:false
       // times:3000
    },
    methods:{
        destroy:function(){
            $(this.target).dialog("destroy");
        },
        close:function(){
            $(this.target).dialog("close");
        },
        disable:function(){
            $(this.target).dialog("disable");
        },
        enable:function(){
            $(this.target).dialog("enable");
        },
        /*
         *opts为属性对象时为给多个属性同时设置值；{属性1:"属性值1"，属性2:"属性值2"}
         *opts为字符串时为给单个属性取值或设置值
         */
        option:function(opts ,value){
            //$(this.target).dialog("option",opts,value);
            if(value){
        		$(this.target).dialog("option",opts,value);
        	}else{
        		return $(this.target).dialog("option",opts);
        	}
        },
        widget:function(){
            $(this.target).dialog("widget");
        },
        isOpen:function(){
            $(this.target).dialog("isOpen");
        },
        moveToTop:function(){
            $(this.target).dialog("moveToTop");
        },
        open:function(){
        	var $t = this;
            $($t.target).dialog("open");
            if($t.times) setTimeout(function(){ $($t.target).dialog("close")},$t.times);
        }
    },
    _methods:{
    }
 });

/*
	原生dialog
*/
(function(a, b) {
	var c = "ui-dialog ui-widget ui-widget-content ui-corner-all ",
		d = {
			buttons: !0,
			height: !0,
			maxHeight: !0,
			maxWidth: !0,
			minHeight: !0,
			minWidth: !0,
			width: !0
		}, e = {
			maxHeight: !0,
			maxWidth: !0,
			minHeight: !0,
			minWidth: !0
		}, f = a.attrFn || {
			val: !0,
			css: !0,
			html: !0,
			text: !0,
			data: !0,
			width: !0,
			height: !0,
			offset: !0,
			click: !0
		};
	a.widget("ui.dialog", {
		options: {
			autoOpen: !0,
			buttons: {},
			closeOnEscape: !0,
			closeText: "close",
			dialogClass: "",
			draggable: !0,
			hide: null,
			height: "auto",
			maxHeight: !1,
			maxWidth: !1,
			minHeight: 150,
			minWidth: 150,
			modal: !1,
			position: {
				my: "center",
				at: "center",
				collision: "fit",
				using: function(b) {
					var c = a(this).css(b).offset().top;
					c < 0 && a(this).css("top", b.top - c)
				}
			},
			resizable: !0,
			show: null,
			stack: !0,
			title: "",
			width: 300,
			zIndex: 1e3
		},
		_create: function() {
			this.originalTitle = this.element.attr("title"), typeof this.originalTitle != "string" && (this.originalTitle = ""), this.options.title = this.options.title || this.originalTitle;
			var b = this,
				d = b.options,
				e = d.title || "&#160;",
				f = a.ui.dialog.getTitleId(b.element),
				g = (b.uiDialog = a("<div></div>")).appendTo(document.body).hide().addClass(c + d.dialogClass).css({
					zIndex: d.zIndex
				}).attr("tabIndex", -1).css("outline", 0).keydown(function(c) {
					d.closeOnEscape && !c.isDefaultPrevented() && c.keyCode && c.keyCode === a.ui.keyCode.ESCAPE && (b.close(c), c.preventDefault())
				}).attr({
					role: "dialog",
					"aria-labelledby": f
				}).mousedown(function(a) {
					b.moveToTop(!1, a)
				}),
				h = b.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(g),
				i = (b.uiDialogTitlebar = a("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(g),
				j = a('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role", "button").hover(function() {
					j.addClass("ui-state-hover")
				}, function() {
					j.removeClass("ui-state-hover")
				}).focus(function() {
					j.addClass("ui-state-focus")
				}).blur(function() {
					j.removeClass("ui-state-focus")
				}).click(function(a) {
					return b.close(a), !1
				}).appendTo(i),
				k = (b.uiDialogTitlebarCloseText = a("<span></span>")).addClass("ui-icon ui-icon-closethick").text(d.closeText).appendTo(j),
				l = a("<span></span>").addClass("ui-dialog-title").attr("id", f).html(e).prependTo(i);
			a.isFunction(d.beforeclose) && !a.isFunction(d.beforeClose) && (d.beforeClose = d.beforeclose), i.find("*").add(i).disableSelection(), d.draggable && a.fn.draggable && b._makeDraggable(), d.resizable && a.fn.resizable && b._makeResizable(), b._createButtons(d.buttons), b._isOpen = !1, a.fn.bgiframe && g.bgiframe()
		},
		_init: function() {
			this.options.autoOpen && this.open()
		},
		destroy: function() {
			var a = this;
			return a.overlay && a.overlay.destroy(), a.uiDialog.hide(), a.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"), a.uiDialog.remove(), a.originalTitle && a.element.attr("title", a.originalTitle), a
		},
		widget: function() {
			return this.uiDialog
		},
		close: function(b) {
			var c = this,
				d, e;
			if (!1 === c._trigger("beforeClose", b)) return;
			return c.overlay && c.overlay.destroy(), c.uiDialog.unbind("keypress.ui-dialog"), c._isOpen = !1, c.options.hide ? c.uiDialog.hide(c.options.hide, function() {
				c._trigger("close", b)
			}) : (c.uiDialog.hide(), c._trigger("close", b)), a.ui.dialog.overlay.resize(), c.options.modal && (d = 0, a(".ui-dialog").each(function() {
				this !== c.uiDialog[0] && (e = a(this).css("z-index"), isNaN(e) || (d = Math.max(d, e)))
			}), a.ui.dialog.maxZ = d), c
		},
		isOpen: function() {
			return this._isOpen
		},
		moveToTop: function(b, c) {
			var d = this,
				e = d.options,
				f;
			return e.modal && !b || !e.stack && !e.modal ? d._trigger("focus", c) : (e.zIndex > a.ui.dialog.maxZ && (a.ui.dialog.maxZ = e.zIndex), d.overlay && (a.ui.dialog.maxZ += 1, d.overlay.$el.css("z-index", a.ui.dialog.overlay.maxZ = a.ui.dialog.maxZ)), f = {
				scrollTop: d.element.scrollTop(),
				scrollLeft: d.element.scrollLeft()
			}, a.ui.dialog.maxZ += 1, d.uiDialog.css("z-index", a.ui.dialog.maxZ), d.element.attr(f), d._trigger("focus", c), d)
		},
		open: function() {
			if (this._isOpen) return;
			var b = this,
				c = b.options,
				d = b.uiDialog;
			return b.overlay = c.modal ? new a.ui.dialog.overlay(b) : null, b._size(), b._position(c.position), d.show(c.show), b.moveToTop(!0), c.modal && d.bind("keydown.ui-dialog", function(b) {
				if (b.keyCode !== a.ui.keyCode.TAB) return;
				var c = a(":tabbable", this),
					d = c.filter(":first"),
					e = c.filter(":last");
				if (b.target === e[0] && !b.shiftKey) return d.focus(1), !1;
				if (b.target === d[0] && b.shiftKey) return e.focus(1), !1
			}), a(b.element.find(":tabbable").get().concat(d.find(".ui-dialog-buttonpane :tabbable").get().concat(d.get()))).eq(0).focus(), b._isOpen = !0, b._trigger("open"), b
		},
		_createButtons: function(b) {
			var c = this,
				d = !1,
				e = a("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),
				g = a("<div></div>").addClass("ui-dialog-buttonset").appendTo(e);
			c.uiDialog.find(".ui-dialog-buttonpane").remove(), typeof b == "object" && b !== null && a.each(b, function() {
				return !(d = !0)
			}), d && (a.each(b, function(b, d) {
				d = a.isFunction(d) ? {
					click: d,
					text: b
				} : d;
				var e = a('<button type="button"></button>').click(function() {
					d.click.apply(c.element[0], arguments)
				}).appendTo(g);
				a.each(d, function(a, b) {
					if (a === "click") return;
					a in f ? e[a](b) : e.attr(a, b)
				}), a.fn.button && e.button()
			}), e.appendTo(c.uiDialog))
		},
		_makeDraggable: function() {
			function f(a) {
				return {
					position: a.position,
					offset: a.offset
				}
			}
			var b = this,
				c = b.options,
				d = a(document),
				e;
			b.uiDialog.draggable({
				cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
				handle: ".ui-dialog-titlebar",
				containment: "document",
				start: function(d, g) {
					e = c.height === "auto" ? "auto" : a(this).height(), a(this).height(a(this).height()).addClass("ui-dialog-dragging"), b._trigger("dragStart", d, f(g))
				},
				drag: function(a, c) {
					b._trigger("drag", a, f(c))
				},
				stop: function(g, h) {
					c.position = [h.position.left - d.scrollLeft(), h.position.top - d.scrollTop()], a(this).removeClass("ui-dialog-dragging").height(e), b._trigger("dragStop", g, f(h)), a.ui.dialog.overlay.resize()
				}
			})
		},
		_makeResizable: function(c) {
			function h(a) {
				return {
					originalPosition: a.originalPosition,
					originalSize: a.originalSize,
					position: a.position,
					size: a.size
				}
			}
			c = c === b ? this.options.resizable : c;
			var d = this,
				e = d.options,
				f = d.uiDialog.css("position"),
				g = typeof c == "string" ? c : "n,e,s,w,se,sw,ne,nw";
			d.uiDialog.resizable({
				cancel: ".ui-dialog-content",
				containment: "document",
				alsoResize: d.element,
				maxWidth: e.maxWidth,
				maxHeight: e.maxHeight,
				minWidth: e.minWidth,
				minHeight: d._minHeight(),
				handles: g,
				start: function(b, c) {
					a(this).addClass("ui-dialog-resizing"), d._trigger("resizeStart", b, h(c))
				},
				resize: function(a, b) {
					d._trigger("resize", a, h(b))
				},
				stop: function(b, c) {
					a(this).removeClass("ui-dialog-resizing"), e.height = a(this).height(), e.width = a(this).width(), d._trigger("resizeStop", b, h(c)), a.ui.dialog.overlay.resize()
				}
			}).css("position", f).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
		},
		_minHeight: function() {
			var a = this.options;
			return a.height === "auto" ? a.minHeight : Math.min(a.minHeight, a.height)
		},
		_position: function(b) {
			var c = [],
				d = [0, 0],
				e;
			if (b) {
				if (typeof b == "string" || typeof b == "object" && "0" in b) c = b.split ? b.split(" ") : [b[0], b[1]], c.length === 1 && (c[1] = c[0]), a.each(["left", "top"], function(a, b) {
					+c[a] === c[a] && (d[a] = c[a], c[a] = b)
				}), b = {
					my: c.join(" "),
					at: c.join(" "),
					offset: d.join(" ")
				};
				b = a.extend({}, a.ui.dialog.prototype.options.position, b)
			} else b = a.ui.dialog.prototype.options.position;
			e = this.uiDialog.is(":visible"), e || this.uiDialog.show(), this.uiDialog.css({
				top: 0,
				left: 0
			}).position(a.extend({
				of: window
			}, b)), e || this.uiDialog.hide()
		},
		_setOptions: function(b) {
			var c = this,
				f = {}, g = !1;
			a.each(b, function(a, b) {
				c._setOption(a, b), a in d && (g = !0), a in e && (f[a] = b)
			}), g && this._size(), this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", f)
		},
		_setOption: function(b, d) {
			var e = this,
				f = e.uiDialog;
			switch (b) {
				case "beforeclose":
					b = "beforeClose";
					break;
				case "buttons":
					e._createButtons(d);
					break;
				case "closeText":
					e.uiDialogTitlebarCloseText.text("" + d);
					break;
				case "dialogClass":
					f.removeClass(e.options.dialogClass).addClass(c + d);
					break;
				case "disabled":
					d ? f.addClass("ui-dialog-disabled") : f.removeClass("ui-dialog-disabled");
					break;
				case "draggable":
					var g = f.is(":data(draggable)");
					g && !d && f.draggable("destroy"), !g && d && e._makeDraggable();
					break;
				case "position":
					e._position(d);
					break;
				case "resizable":
					var h = f.is(":data(resizable)");
					h && !d && f.resizable("destroy"), h && typeof d == "string" && f.resizable("option", "handles", d), !h && d !== !1 && e._makeResizable(d);
					break;
				case "title":
					a(".ui-dialog-title", e.uiDialogTitlebar).html("" + (d || "&#160;"))
			}
			a.Widget.prototype._setOption.apply(e, arguments)
		},
		_size: function() {
			var b = this.options,
				c, d, e = this.uiDialog.is(":visible");
			this.element.show().css({
				width: "auto",
				minHeight: 0,
				height: 0
			}), b.minWidth > b.width && (b.width = b.minWidth), c = this.uiDialog.css({
				height: "auto",
				width: b.width
			}).height(), d = Math.max(0, b.minHeight - c);
			if (b.height === "auto")
				if (a.support.minHeight) this.element.css({
					minHeight: d,
					height: "auto"
				});
				else {
					this.uiDialog.show();
					var f = this.element.css("height", "auto").height();
					e || this.uiDialog.hide(), this.element.height(Math.max(f, d))
				} else this.element.height(Math.max(b.height - c, 0));
			this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
		}
	}), a.extend(a.ui.dialog, {
		version: "1.8.21",
		uuid: 0,
		maxZ: 0,
		getTitleId: function(a) {
			var b = a.attr("id");
			return b || (this.uuid += 1, b = this.uuid), "ui-dialog-title-" + b
		},
		overlay: function(b) {
			this.$el = a.ui.dialog.overlay.create(b)
		}
	}), a.extend(a.ui.dialog.overlay, {
		instances: [],
		oldInstances: [],
		maxZ: 0,
		events: a.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function(a) {
			return a + ".dialog-overlay"
		}).join(" "),
		create: function(b) {
			this.instances.length === 0 && (setTimeout(function() {
				a.ui.dialog.overlay.instances.length && a(document).bind(a.ui.dialog.overlay.events, function(b) {
					if (a(b.target).zIndex() < a.ui.dialog.overlay.maxZ) return !1
				})
			}, 1), a(document).bind("keydown.dialog-overlay", function(c) {
				b.options.closeOnEscape && !c.isDefaultPrevented() && c.keyCode && c.keyCode === a.ui.keyCode.ESCAPE && (b.close(c), c.preventDefault())
			}), a(window).bind("resize.dialog-overlay", a.ui.dialog.overlay.resize));
			var c = (this.oldInstances.pop() || a("<div></div>").addClass("ui-widget-overlay")).appendTo(document.body).css({
				width: this.width(),
				height: this.height()
			});
			return a.fn.bgiframe && c.bgiframe(), this.instances.push(c), c
		},
		destroy: function(b) {
			var c = a.inArray(b, this.instances);
			c != -1 && this.oldInstances.push(this.instances.splice(c, 1)[0]), this.instances.length === 0 && a([document, window]).unbind(".dialog-overlay"), b.remove();
			var d = 0;
			a.each(this.instances, function() {
				d = Math.max(d, this.css("z-index"))
			}), this.maxZ = d
		},
		height: function() {
			var b, c;
			return a.browser.msie && a.browser.version < 7 ? (b = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight), c = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight), b < c ? a(window).height() + "px" : b + "px") : a(document).height() + "px"
		},
		width: function() {
			var b, c;
			return a.browser.msie ? (b = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth), c = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth), b < c ? a(window).width() + "px" : b + "px") : a(document).width() + "px"
		},
		resize: function() {
			var b = a([]);
			a.each(a.ui.dialog.overlay.instances, function() {
				b = b.add(this)
			}), b.css({
				width: 0,
				height: 0
			}).css({
				width: a.ui.dialog.overlay.width(),
				height: a.ui.dialog.overlay.height()
			})
		}
	}), a.extend(a.ui.dialog.overlay.prototype, {
		destroy: function() {
			a.ui.dialog.overlay.destroy(this.$el)
		}
	})
})(jQuery);;
/*! jQuery UI - v1.8.21 - 2012-06-05

/*! jQuery UI - v1.8.21 - 2012-06-05
 */
/*  Bizfoundation ui 5.1
 *  biz.tabs.js tabs组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

/**
 * 创建一个Tab控件,标签页
 * @function
 * @return {Object} ui控件
 */
 biz.tabs = biz.createUI(function(options){
	if(typeof options == "object"){	 
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'tab';
	    options.target = options.id;
	    //把扩展方法加到tab组件上
	    $.extend($.ui.tabs.prototype,this._methods||{});
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    } 
 }).extend({
	 init:function(opts){
         $(opts.target).tabs(opts);
         //增加标签页位置处理
         switch(opts.position){
              case "bottom":
            	  $( opts.target ).addClass( "tabs-bottom" );
                  $( opts.target + " .ui-tabs-nav,"+  opts.target + " .ui-tabs-nav > *" )
                              .removeClass( "ui-corner-all ui-corner-top" )
                              .addClass( "ui-corner-bottom" );
                  $( opts.target + "  .ui-tabs-nav" ).appendTo( ".tabs-bottom" );
                  break;
              case "left":
                   $( opts.target ).addClass( "ui-tabs-vertical ui-helper-clearfix" );
                   $( opts.target + " li" ).removeClass( "ui-corner-top" ).addClass( "ui-corner-left" );
                   break;
              default: break;
         }
         return this;
	},
	defaults:{
	    position:"top"//标签页位置top、bottom、left
	},
    methods:{
        destroy:function(){
            $(this.target).tabs("destroy");
        },
        disable:function(index){
            $(this.target).tabs("disable",index);
        },
        enable:function(index){
            $(this.target).tabs("enable",index);
        },
        /*
         *opts为属性对象时为给多个属性同时设置值；{属性1:"属性值1"，属性2:"属性值2"}
         *opts为字符串时为给单个属性取值或设置值
         */
        option:function(opts ,value){
        	if(value){
        		$(this.target).tabs("option",opts,value);
        	}else{
        		return $(this.target).tabs("option",opts);
        	}
            
        },
        widget:function(){
            $(this.target).tabs("widget");
        },
        add:function(url , label , index){
            $(this.target).tabs("add",url , label , index);
        },
        remove:function(index){
            $(this.target).tabs("remove",index);
        },
        select:function(index){
            $(this.target).tabs( "select" , index );
        },
        load:function(index){
            $(this.target).tabs( "load" , index );
        },
        url:function( index , url){
            $(this.target).tabs( "url" , index , url );
        },
        length:function(){
            $(this.target).tabs( "length");
        },
        abort:function(){
            $(this.target).tabs( "abort");
        },
        rotate:function(ms , continuing ){
            $(this.target).tabs( "rotate" , ms , continuing );
        }
    }
 });

/*
	原生tabs
*/
(function(a, b) {
	function e() {
		return ++c
	}

	function f() {
		return ++d
	}
	var c = 0,
		d = 0;
	a.widget("ui.tabs", {
		options: {
			add: null,
			ajaxOptions: null,
			cache: !1,
			cookie: null,
			collapsible: !1,
			disable: null,
			disabled: [],
			enable: null,
			event: "click",
			fx: null,
			idPrefix: "ui-tabs-",
			load: null,
			panelTemplate: "<div></div>",
			remove: null,
			select: null,
			show: null,
			spinner: "<em>Loading&#8230;</em>",
			tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"
		},
		_create: function() {
			this._tabify(!0)
		},
		_setOption: function(a, b) {
			if (a == "selected") {
				if (this.options.collapsible && b == this.options.selected) return;
				this.select(b)
			} else this.options[a] = b, this._tabify()
		},
		_tabId: function(a) {
			return a.title && a.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF-]/g, "") || this.options.idPrefix + e()
		},
		_sanitizeSelector: function(a) {
			return a.replace(/:/g, "\\:")
		},
		_cookie: function() {
			var b = this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + f());
			return a.cookie.apply(null, [b].concat(a.makeArray(arguments)))
		},
		_ui: function(a, b) {
			return {
				tab: a,
				panel: b,
				index: this.anchors.index(a)
			}
		},
		_cleanup: function() {
			this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function() {
				var b = a(this);
				b.html(b.data("label.tabs")).removeData("label.tabs")
			})
		},
		_tabify: function(c) {
			function m(b, c) {
				b.css("display", ""), !a.support.opacity && c.opacity && b[0].style.removeAttribute("filter")
			}
			var d = this,
				e = this.options,
				f = /^#.+/;
			this.list = this.element.find("ol,ul").eq(0), this.lis = a(" > li:has(a[href])", this.list), this.anchors = this.lis.map(function() {
				return a("a", this)[0]
			}), this.panels = a([]), this.anchors.each(function(b, c) {
				var g = a(c).attr("href"),
					h = g.split("#")[0],
					i;
				h && (h === location.toString().split("#")[0] || (i = a("base")[0]) && h === i.href) && (g = c.hash, c.href = g);
				if (f.test(g)) d.panels = d.panels.add(d.element.find(d._sanitizeSelector(g)));
				else if (g && g !== "#") {
					a.data(c, "href.tabs", g), a.data(c, "load.tabs", g.replace(/#.*$/, ""));
					var j = d._tabId(c);
					c.href = "#" + j;
					var k = d.element.find("#" + j);
					k.length || (k = a(e.panelTemplate).attr("id", j).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(d.panels[b - 1] || d.list), k.data("destroy.tabs", !0)), d.panels = d.panels.add(k)
				} else e.disabled.push(b)
			}), c ? (this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all"), this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"), this.lis.addClass("ui-state-default ui-corner-top"), this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom"), e.selected === b ? (location.hash && this.anchors.each(function(a, b) {
				if (b.hash == location.hash) return e.selected = a, !1
			}), typeof e.selected != "number" && e.cookie && (e.selected = parseInt(d._cookie(), 10)), typeof e.selected != "number" && this.lis.filter(".ui-tabs-selected").length && (e.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))), e.selected = e.selected || (this.lis.length ? 0 : -1)) : e.selected === null && (e.selected = -1), e.selected = e.selected >= 0 && this.anchors[e.selected] || e.selected < 0 ? e.selected : 0, e.disabled = a.unique(e.disabled.concat(a.map(this.lis.filter(".ui-state-disabled"), function(a, b) {
				return d.lis.index(a)
			}))).sort(), a.inArray(e.selected, e.disabled) != -1 && e.disabled.splice(a.inArray(e.selected, e.disabled), 1), this.panels.addClass("ui-tabs-hide"), this.lis.removeClass("ui-tabs-selected ui-state-active"), e.selected >= 0 && this.anchors.length && (d.element.find(d._sanitizeSelector(d.anchors[e.selected].hash)).removeClass("ui-tabs-hide"), this.lis.eq(e.selected).addClass("ui-tabs-selected ui-state-active"), d.element.queue("tabs", function() {
				d._trigger("show", null, d._ui(d.anchors[e.selected], d.element.find(d._sanitizeSelector(d.anchors[e.selected].hash))[0]))
			}), this.load(e.selected)), a(window).bind("unload", function() {
				d.lis.add(d.anchors).unbind(".tabs"), d.lis = d.anchors = d.panels = null
			})) : e.selected = this.lis.index(this.lis.filter(".ui-tabs-selected")), this.element[e.collapsible ? "addClass" : "removeClass"]("ui-tabs-collapsible"), e.cookie && this._cookie(e.selected, e.cookie);
			for (var g = 0, h; h = this.lis[g]; g++) a(h)[a.inArray(g, e.disabled) != -1 && !a(h).hasClass("ui-tabs-selected") ? "addClass" : "removeClass"]("ui-state-disabled");
			e.cache === !1 && this.anchors.removeData("cache.tabs"), this.lis.add(this.anchors).unbind(".tabs");
			if (e.event !== "mouseover") {
				var i = function(a, b) {
					b.is(":not(.ui-state-disabled)") && b.addClass("ui-state-" + a)
				}, j = function(a, b) {
						b.removeClass("ui-state-" + a)
					};
				this.lis.bind("mouseover.tabs", function() {
					i("hover", a(this))
				}), this.lis.bind("mouseout.tabs", function() {
					j("hover", a(this))
				}), this.anchors.bind("focus.tabs", function() {
					i("focus", a(this).closest("li"))
				}), this.anchors.bind("blur.tabs", function() {
					j("focus", a(this).closest("li"))
				})
			}
			var k, l;
			e.fx && (a.isArray(e.fx) ? (k = e.fx[0], l = e.fx[1]) : k = l = e.fx);
			var n = l ? function(b, c) {
					a(b).closest("li").addClass("ui-tabs-selected ui-state-active"), c.hide().removeClass("ui-tabs-hide").animate(l, l.duration || "normal", function() {
						m(c, l), d._trigger("show", null, d._ui(b, c[0]))
					})
				} : function(b, c) {
					a(b).closest("li").addClass("ui-tabs-selected ui-state-active"), c.removeClass("ui-tabs-hide"), d._trigger("show", null, d._ui(b, c[0]))
				}, o = k ? function(a, b) {
					b.animate(k, k.duration || "normal", function() {
						d.lis.removeClass("ui-tabs-selected ui-state-active"), b.addClass("ui-tabs-hide"), m(b, k), d.element.dequeue("tabs")
					})
				} : function(a, b, c) {
					d.lis.removeClass("ui-tabs-selected ui-state-active"), b.addClass("ui-tabs-hide"), d.element.dequeue("tabs")
				};
			this.anchors.bind(e.event + ".tabs", function() {
				var b = this,
					c = a(b).closest("li"),
					f = d.panels.filter(":not(.ui-tabs-hide)"),
					g = d.element.find(d._sanitizeSelector(b.hash));
				if (c.hasClass("ui-tabs-selected") && !e.collapsible || c.hasClass("ui-state-disabled") || c.hasClass("ui-state-processing") || d.panels.filter(":animated").length || d._trigger("select", null, d._ui(this, g[0])) === !1) return this.blur(), !1;
				e.selected = d.anchors.index(this), d.abort();
				if (e.collapsible) {
					if (c.hasClass("ui-tabs-selected")) return e.selected = -1, e.cookie && d._cookie(e.selected, e.cookie), d.element.queue("tabs", function() {
						o(b, f)
					}).dequeue("tabs"), this.blur(), !1;
					if (!f.length) return e.cookie && d._cookie(e.selected, e.cookie), d.element.queue("tabs", function() {
						n(b, g)
					}), d.load(d.anchors.index(this)), this.blur(), !1
				}
				e.cookie && d._cookie(e.selected, e.cookie);
				if (g.length) f.length && d.element.queue("tabs", function() {
					o(b, f)
				}), d.element.queue("tabs", function() {
					n(b, g)
				}), d.load(d.anchors.index(this));
				else throw "jQuery UI Tabs: Mismatching fragment identifier.";
				a.browser.msie && this.blur()
			}), this.anchors.bind("click.tabs", function() {
				return !1
			})
		},
		_getIndex: function(a) {
			return typeof a == "string" && (a = this.anchors.index(this.anchors.filter("[href$='" + a + "']"))), a
		},
		destroy: function() {
			var b = this.options;
			return this.abort(), this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs"), this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"), this.anchors.each(function() {
				var b = a.data(this, "href.tabs");
				b && (this.href = b);
				var c = a(this).unbind(".tabs");
				a.each(["href", "load", "cache"], function(a, b) {
					c.removeData(b + ".tabs")
				})
			}), this.lis.unbind(".tabs").add(this.panels).each(function() {
				a.data(this, "destroy.tabs") ? a(this).remove() : a(this).removeClass(["ui-state-default", "ui-corner-top", "ui-tabs-selected", "ui-state-active", "ui-state-hover", "ui-state-focus", "ui-state-disabled", "ui-tabs-panel", "ui-widget-content", "ui-corner-bottom", "ui-tabs-hide"].join(" "))
			}), b.cookie && this._cookie(null, b.cookie), this
		},
		add: function(c, d, e) {
			e === b && (e = this.anchors.length);
			var f = this,
				g = this.options,
				h = a(g.tabTemplate.replace(/#\{href\}/g, c).replace(/#\{label\}/g, d)),
				i = c.indexOf("#") ? this._tabId(a("a", h)[0]) : c.replace("#", "");
			h.addClass("ui-state-default ui-corner-top").data("destroy.tabs", !0);
			var j = f.element.find("#" + i);
			return j.length || (j = a(g.panelTemplate).attr("id", i).data("destroy.tabs", !0)), j.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide"), e >= this.lis.length ? (h.appendTo(this.list), j.appendTo(this.list[0].parentNode)) : (h.insertBefore(this.lis[e]), j.insertBefore(this.panels[e])), g.disabled = a.map(g.disabled, function(a, b) {
				return a >= e ? ++a : a
			}), this._tabify(), this.anchors.length == 1 && (g.selected = 0, h.addClass("ui-tabs-selected ui-state-active"), j.removeClass("ui-tabs-hide"), this.element.queue("tabs", function() {
				f._trigger("show", null, f._ui(f.anchors[0], f.panels[0]))
			}), this.load(0)), this._trigger("add", null, this._ui(this.anchors[e], this.panels[e])), this
		},
		remove: function(b) {
			b = this._getIndex(b);
			var c = this.options,
				d = this.lis.eq(b).remove(),
				e = this.panels.eq(b).remove();
			return d.hasClass("ui-tabs-selected") && this.anchors.length > 1 && this.select(b + (b + 1 < this.anchors.length ? 1 : -1)), c.disabled = a.map(a.grep(c.disabled, function(a, c) {
				return a != b
			}), function(a, c) {
				return a >= b ? --a : a
			}), this._tabify(), this._trigger("remove", null, this._ui(d.find("a")[0], e[0])), this
		},
		enable: function(b) {
			b = this._getIndex(b);
			var c = this.options;
			if (a.inArray(b, c.disabled) == -1) return;
			return this.lis.eq(b).removeClass("ui-state-disabled"), c.disabled = a.grep(c.disabled, function(a, c) {
				return a != b
			}), this._trigger("enable", null, this._ui(this.anchors[b], this.panels[b])), this
		},
		disable: function(a) {
			a = this._getIndex(a);
			var b = this,
				c = this.options;
			return a != c.selected && (this.lis.eq(a).addClass("ui-state-disabled"), c.disabled.push(a), c.disabled.sort(), this._trigger("disable", null, this._ui(this.anchors[a], this.panels[a]))), this
		},
		select: function(a) {
			a = this._getIndex(a);
			if (a == -1)
				if (this.options.collapsible && this.options.selected != -1) a = this.options.selected;
				else return this;
			return this.anchors.eq(a).trigger(this.options.event + ".tabs"), this
		},
		load: function(b) {
			b = this._getIndex(b);
			var c = this,
				d = this.options,
				e = this.anchors.eq(b)[0],
				f = a.data(e, "load.tabs");
			this.abort();
			if (!f || this.element.queue("tabs").length !== 0 && a.data(e, "cache.tabs")) {
				this.element.dequeue("tabs");
				return
			}
			this.lis.eq(b).addClass("ui-state-processing");
			if (d.spinner) {
				var g = a("span", e);
				g.data("label.tabs", g.html()).html(d.spinner)
			}
			return this.xhr = a.ajax(a.extend({}, d.ajaxOptions, {
				url: f,
				success: function(f, g) {
					c.element.find(c._sanitizeSelector(e.hash)).html(f), c._cleanup(), d.cache && a.data(e, "cache.tabs", !0), c._trigger("load", null, c._ui(c.anchors[b], c.panels[b]));
					try {
						d.ajaxOptions.success(f, g)
					} catch (h) {}
				},
				error: function(a, f, g) {
					c._cleanup(), c._trigger("load", null, c._ui(c.anchors[b], c.panels[b]));
					try {
						d.ajaxOptions.error(a, f, b, e)
					} catch (g) {}
				}
			})), c.element.dequeue("tabs"), this
		},
		abort: function() {
			return this.element.queue([]), this.panels.stop(!1, !0), this.element.queue("tabs", this.element.queue("tabs").splice(-2, 2)), this.xhr && (this.xhr.abort(), delete this.xhr), this._cleanup(), this
		},
		url: function(a, b) {
			return this.anchors.eq(a).removeData("cache.tabs").data("load.tabs", b), this
		},
		length: function() {
			return this.anchors.length
		}
	}), a.extend(a.ui.tabs, {
		version: "1.8.21"
	}), a.extend(a.ui.tabs.prototype, {
		rotation: null,
		rotate: function(a, b) {
			var c = this,
				d = this.options,
				e = c._rotate || (c._rotate = function(b) {
					clearTimeout(c.rotation), c.rotation = setTimeout(function() {
						var a = d.selected;
						c.select(++a < c.anchors.length ? a : 0)
					}, a), b && b.stopPropagation()
				}),
				f = c._unrotate || (c._unrotate = b ? function(a) {
					e()
				} : function(a) {
					a.clientX && c.rotate(null)
				});
			return a ? (this.element.bind("tabsshow", e), this.anchors.bind(d.event + ".tabs", f), e()) : (clearTimeout(c.rotation), this.element.unbind("tabsshow", e), this.anchors.unbind(d.event + ".tabs", f), delete this._rotate, delete this._unrotate), this
		}
	})
})(jQuery);;
/*! jQuery UI - v1.8.21 - 2012-06-05
 */
/*  Bizfoundation ui 5.1
 *  biz.doubleselect.js doubleselect组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */


/**
 * 创建一个doubleselect控件,双向选择器
 * @function
 * @return {Object} ui控件
 */
 biz.doubleselect = biz.createUI(function(options){
    if(typeof options == "object"){	 
	    var me = this;
	    me.target = options.id;
	    me.uiType = 'doubleselect';
	    options.id = biz.utils.id(options.id);
	}else{
        jAlert(I18N.param_error + options , I18N.promp);
    }	
 }).extend({
    init:function(opts){
        var obj =  new GBPSelectList(opts);
        obj.make();
        return obj;
    },
    defaults:{
        ajaxOptions:{
           error:function(xhr,st,err){
             	   //biz.utils.loadError(xhr,st,err);
           }
        }
    },
    methods:{}
 });

 /*
    原生doubleselect
 */
//构造函数 
function GBPSelectList(opts) {
    this.width            =  opts.width ? opts.width : "auto";                    //是否允许多选
    this.height            = opts.height ? opts.height : "auto";        //选择框的长度
    this.multiple            = true;                    //是否允许多选 
    this.listSize            = opts.size ? opts.size : 20;        //选择框的长度
    this.isTreeStyle         = Boolean(opts.isTreeStyle);    //是否用树状形式显示数据
    this.isShowCode          = Boolean(opts.isShowCode);     //如果是树状形式，是否显示层次码
    this.ctrlStyle           = opts.ctrlStyle?opts.ctrlStyle:"button";               //按钮样式

    this.needOrder           = true;                   //是否需要排序。（只在普通形式下起作用，树状时必须排序）
 
    this.data                = opts.data;                   
    this.itemList            = this.data;                   //存放所有选择元素的数组
    this.url                 = opts.url ? opts.url:"" ;     //数据源
    this.ajaxOptions         = opts.ajaxOptions ? opts.ajaxOptions:{} ;    //ajax请求参数

    this.leftSelect          = null;                    //左边的选择框控件 
    this.rightSelect         = null;                    //右边的选择框控件 
    this.leftDiv             = null;                    //左边放置列表框的层 
    this.rightDiv            = null;                    //右边放置列表框的层 
    this.leftDiv_innerHTML   = "";                      //左侧选择框层的内部元素， 
    this.rightDiv_innerHTML  = "";                      //右侧选择框层的内部元素 
    this.leftLabel           = null;                    //左边的文字标签控件 
    this.rightLabel          = null;                    //右边的文字标签控件 

    this.namespace           = opts.id;               //控件名称的前缀
    this.leftDivName         = "divAll";                //左边放置列表框的层的名称 
    this.rightDivName        = "divChecked";            //右边放置列表框的层的名称 
    this.leftSelectName      = "sltAll";                //左边列表框的名称 
    this.rightSelectName     = "sltChecked";            //右边列表框的名称 
    this.selectButton        = "btnSelect";             //选中按钮的名称 
    this.selectAllButton     = "btnSelectAll";          //选中所有按钮的名称 
    this.cancelButton        = "btnCancel";             //取消选择按钮的名称 
    this.cancelAllButton     = "btnCancelAll";          //取消所有按钮的名称 

    this.o_children          = [];                      //一级节点列表 
    this.root                = this;                    //根级节点-组件对象 
    this.nodes               = {};                      //存放所有节点 
    var o_this               = this;                    //组件对象引用 
    
    this.onSelect  =  opts.onSelect ? opts.onSelect : null;
    this.onSelectAll  =  opts.onSelectAll ? opts.onSelectAll : null;
    this.onCancel  =  opts.onCancel ? opts.onCancel : null;
    this.onCancelAll  =  opts.onCancelAll ? opts.onCancelAll : null;

    this.buildNode = function(){                        //处理组件显示数据，建立节点列表对象 
        if(this.isTreeStyle){ 
            //构造树形显示风格 
            _build(o_this, 0); 
        }else{ 
            //构造列表显示风格 
            for(var i = 0; i < this.itemList.length; i++){ 
                new GBP_SL_Item(o_this, this.itemList[i]); 
            } 
        } 
    }; 

    //在子类里迭代，是为了效率考虑。 
    function _build(father, level, start){ 
        if(!start) start = 0; 
        for(var i = start; i < o_this.itemList.length; i++){ 
            curLevel = o_this.itemList[i][4]; 
            //是否属于本级节点 
            if(curLevel == (level + 1)){ 
                var obj = new GBP_SL_Item(father, o_this.itemList[i]); 
                //继续下层递归 
                _build(obj, curLevel, i + 1); 
            }else if(curLevel <= level){ 
                //结束本层递归 
                break; 
            } 
        } 
    } 
} 

//对数据进行检查、过滤、排序处理 
GBPSelectList.prototype.prepareData = function() { 
    var list = new Array(); 
    var arrays = this.itemList; 
    var _pre;
    // 如设置url则ajax请求数据
    if(this.url !=""){
        $.ajax($.extend({
                     type:"POST",
                     dataType:"json",
                     url: this.url,
                     success:function(data, textStatus, jqXHR){
                         arrays =  data;
                     },
                     async:false
                  },this.ajaxOptions));
        this.itemList = arrays;
    }

    //按显示名排序 
    function _sortByName(a,b){ 
        if(a[1] == b[1]) return 0 
        return (a[1] > b[1]) ? 1 : -1; 
    } 

     //按层次码排序 
    function _sortByTreeCode(a,b){ 
        if(a[3] == b[3]) return 0 
        return (a[3] > b[3]) ? 1 : -1; 
    } 

    //检查数据是否完整，过滤不完整数据 
    for(var n = 0; n < arrays.length; n++){ 
        var len = list.length; 
        //列表节点至少要求有两项数据 
        //树形节点至少要求有五项数据 
        if((!this.isTreeStyle && arrays[n].length >= 2) || (this.isTreeStyle && arrays[n].length >= 5)){
             list[len] = arrays[n]; 
        } 
    } 

    //排序 
    if(this.isTreeStyle){ 
        list.sort(_sortByTreeCode); 
    }else if(this.needOrder){ 
        list.sort(_sortByName); 
    } 

    //使用已经排序的节点列表替换原来未排序的节点列表 
    this.itemList = list; 
} 

//构造组件，并显示在页面上 
GBPSelectList.prototype.make = function() { 
    //检查、过滤、排序数据 
    this.prepareData(); 

    var txt , obj; 

    txt = "<table width='"+this.width +"' height='"+ this.height +"' style= 'border-collapse: collapse'  bordercolor= '#E6EFFA'  align='center' cellpadding='0' cellspacing='2'>"

              + " <tr align='center'>" 
          //   + "   <td valign='top' width='30%'><div align='left' style='FONT-SIZE: 9pt;padding-top:2px;padding-bottom:2px;'>可用列表</div>"
               + "   <td valign='top' width='30%'>"
              + "     <div  id='" + this.namespace + this.leftDivName + "'></div>"
              + "   </td>" 
             + "   <td valign='middle' width='5%' >" 
             + "     <input type='button' name='" + this.namespace + this.selectButton + "' id='" + this.namespace + this.selectButton + "' class='" + this.ctrlStyle + "' style='width:40px;margin-left:3px;margin-right:3px;' value='  >  '><br><br>"
              + "     <input type='button' name='" + this.namespace + this.selectAllButton + "'  id='" + this.namespace + this.selectAllButton + "' class='" + this.ctrlStyle + "' style='width:40px;margin-left:3px;margin-right:3px;' value='  >> '><br><br>"
              + "     <input type='button' name='" + this.namespace + this.cancelButton + "' id='" + this.namespace + this.cancelButton + "' class='" + this.ctrlStyle + "' style='width:40px;margin-left:3px;margin-right:3px;' value='  <  '><br><br>"
              + "     <input type='button' name='" + this.namespace + this.cancelAllButton + "' id='" + this.namespace + this.cancelAllButton + "' class='" + this.ctrlStyle + "' style='width:40px;margin-left:3px;margin-right:3px;' value=' <<  '>"
              + "   </td>" 
           //  + "   <td valign='top' width='30%'><div align='left' style='FONT-SIZE: 9pt;padding-top:2px;padding-bottom:2px;'>已选择列表</div>"
                + "   <td valign='top' width='30%'>"
              + "     <div  id='" + this.namespace + this.rightDivName + "' align='left'></div>"
              + "   </td>" 
             + " </tr>" 
             + "</table>" ; 

    ///生成对象 
    //document.write(txt) ;
    $("#"+this.namespace).append(txt);

    var oThis = this; 
    
    //关联控制对象 
    this.leftDiv = document.getElementById(this.namespace + this.leftDivName); 
    this.rightDiv = document.getElementById(this.namespace + this.rightDivName);
 
    //关联按钮单击事件 
    obj = document.getElementById(this.namespace + this.selectButton); 
    obj.onclick = function() {
         if(oThis.onSelect){//用户自定义选中事件，合并选中处理逻辑
           //判断是否多选模式 
            var values = new Array(); 
            //处理哪个对象 
            var obj = oThis.leftSelect; 
            if(oThis.multiple){ 
                for(var i = 0; i < obj.options.length; i++){ 
                    if(obj.options[i].selected){ 
                        values[values.length] = obj.options[i].value; 
                    } 
                } 
            }else{ 
                if(obj.selectedIndex > -1){ 
                    values[0] = obj[obj.selectedIndex].value; 
                } 
            } 
           oThis.onSelect.call(oThis,values);
       }
        oThis.doSelect(1);
    };

    obj = document.getElementById(this.namespace + this.selectAllButton); 
    obj.onclick = function() { 
        if(oThis.onSelectAll){
            var values = new Array();  
            var obj = oThis.leftSelect; 
            if(oThis.multiple){ 
                for(var i = 0; i < obj.options.length; i++){ 
                        values[values.length] = obj.options[i].value; 
                } 
            }
           oThis.onSelectAll.call(oThis,values);
        }
        oThis.doAll(1);
    }; 

    obj = document.getElementById(this.namespace + this.cancelButton); 
    obj.onclick = function() { 
        if(oThis.onCancel){
            var values = new Array();  
            var obj = oThis.rightSelect; 
            if(oThis.multiple){ 
                for(var i = 0; i < obj.options.length; i++){ 
                    if(obj.options[i].selected){ 
                        values[values.length] = obj.options[i].value; 
                    } 
                } 
            }else{ 
                if(obj.selectedIndex > -1){ 
                    values[0] = obj[obj.selectedIndex].value; 
                } 
            } 
           oThis.onCancel.call(oThis,values);
        }
        oThis.doSelect(-1);
    }; 

    obj = document.getElementById(this.namespace + this.cancelAllButton); 
    obj.onclick = function() { 
        if(oThis.onCancelAll){
            var values = new Array();  
            var obj = oThis.rightSelect; 
            if(oThis.multiple){ 
                for(var i = 0; i < obj.options.length; i++){ 
                        values[values.length] = obj.options[i].value; 
                } 
            }
           oThis.onCancelAll.call(oThis,values);
        }
        oThis.doAll(-1) 
    }; 

    //生成节点对象列表 
    this.buildNode(); 

    //刷新页面显示 
    this.update(); 
}; 

//选中/取消选中 
GBPSelectList.prototype.doSelect = function(isSelect) { 
    var values = new Array(); 

    //处理哪个对象 
    var obj = (isSelect == 1) ? this.leftSelect : this.rightSelect; 

    //判断是否多选模式 
    if(this.multiple){ 
        for(var i = 0; i < obj.options.length; i++){ 
            if(obj.options[i].selected){ 
                values[values.length] = obj.options[i].value; 
            } 
        } 
    }else{ 
        if(obj.selectedIndex > -1){ 
            values[0] = obj[obj.selectedIndex].value; 
        } 
    } 

    if( values.length == 0) return; 

    //处理下级节点 
    for(var n = 0; n < values.length; n++){ 
        this.nodes[values[n]].doSelect(isSelect); 
    } 

    //刷新页面显示 
    this.update() 
}; 

//全部选中/取消 
GBPSelectList.prototype.doAll = function(isSelect) { 
    for(var i = 0; i < this.o_children.length; i++){ 
        this.o_children[i].doSelect(isSelect); 
    } 

    this.update() 
}; 

//更新select元素的界面显示 
GBPSelectList.prototype.update = function(){ 
    //用innerHTML来设置select元素，可以加快速度，减少屏幕闪烁 
    //给层元素赋初值 

    this.root.rightDiv_innerHTML = "<select id='" + this.namespace + this.rightSelectName + "' " +"name='" + this.namespace + this.rightSelectName + "' " + (this.multiple ? "multiple" : "") + " size='" + this.listSize + "' style='width:100%'>";
    this.root.leftDiv_innerHTML = "<select id='" + this.namespace + this.leftSelectName + "' " + (this.multiple ? "multiple" : "") + " size='" + this.listSize + "' style='width:100%'>";
 
    //处理子节点状态，根据子节点的状态设置父节点状态 
    for(var i = 0; i < this.o_children.length; i++){ 
        this.o_children[i].doStatus(); 
    } 
    //生成页面显示 
    for(var i = 0; i < this.o_children.length; i++){ 
        this.o_children[i].update(); 
    } 

    //直接用innerHTML，速度最快 
    this.leftDiv.innerHTML = this.root.leftDiv_innerHTML + "</select>";
    this.rightDiv.innerHTML = this.root.rightDiv_innerHTML + "</select>";

    //重新获取两侧select元素，并为其绑定双击事件 
    var oThis = this; 

    this.leftSelect = document.getElementById(this.namespace + this.leftSelectName);
    this.leftSelect.ondblclick = function() {        
         if(oThis.onSelect){//用户自定义选中事件，合并选中处理逻辑
               //判断是否多选模式 
                var values = new Array(); 
                //处理哪个对象 
                var obj = this; 
                if(this.multiple){ 
                    for(var i = 0; i < obj.options.length; i++){ 
                        if(obj.options[i].selected){ 
                            values[values.length] = obj.options[i].value; 
                        } 
                    } 
                }else{ 
                    if(obj.selectedIndex > -1){ 
                        values[0] = obj[obj.selectedIndex].value; 
                    } 
                } 
            oThis.onSelect.call(oThis,values);
         }
         oThis.doSelect(1) ;
    }; 

    this.rightSelect  = document.getElementById(this.namespace + this.rightSelectName);
    this.rightSelect .ondblclick = function() { 
        if(oThis.onCancel){//用户自定义选中事件，合并选中处理逻辑
           //判断是否多选模式 
            var values = new Array(); 
            //处理哪个对象 
            var obj = this; 
            if(this.multiple){ 
                for(var i = 0; i < obj.options.length; i++){ 
                    if(obj.options[i].selected){ 
                        values[values.length] = obj.options[i].value; 
                    } 
                } 
            }else{ 
                if(obj.selectedIndex > -1){ 
                    values[0] = obj[obj.selectedIndex].value; 
                } 
            } 
           oThis.onCancel.call(oThis,values);
        }
        oThis.doSelect(-1) 
    }; 
}; 

/*==================== 节点对象代码 ====================*/ 
/* 
1、构造方法 
2、节点选择/取消方法 
3、节点状态处理方法 
4、节点页面显示实现方法*/ 

//节点对象 
function GBP_SL_Item(o_parent, o_item){ 
    this.father = o_parent;                                //上级节点引用 
    this.root = o_parent.root;                             //根级节点引用 
    this.o_children = [];                                  //下级节点数组 
    this.info = o_item;                                    //节点对象 
    this.status = o_item[2] ?  1 : -1 ;                    //节点是否默认选中标志 
    this.level = this.root.isTreeStyle ? o_item[4] : 1;    //节点级次 
    this.value = o_item[0];                                //节点编号 
    this.showText = o_item[1];                             //节点显示名称 

    //根据定义处理显示名称格式 
    if(this.root.isShowCode) 
        // 是否显示层级编码 
        this.showText = this.showText + " - " + o_item[3]; 

    if(this.level > 0) 
        //处理显示缩进 
        this.showText = "__________________".substr(0, (this.level - 1)).replace(/_/g, "&nbsp;&nbsp;") + this.showText;
 
    //加入父级节点的下级节点列表 
    o_parent.o_children[o_parent.o_children.length] = this; 

    //加入所有节点列表 
    this.root.nodes[this.value] = this; 
} 

//节点的选择函数 
GBP_SL_Item.prototype.doSelect = function(isSelected){ 
    this.status = isSelected; 

    //选择上级会自动选择其所有下级 
    for(var i = 0; i < this.o_children.length; i++){ 
        this.o_children[i].doSelect(isSelected); 
    } 
}; 

//递归处理指定节点及其下级节点状态 
GBP_SL_Item.prototype.doStatus = function(){ 
    //没有下级节点 
    if(this.o_children.length == 0) return this.status; 

    var selectedCount = 0, partSelectCount = 0, unselectedCount = 0; 
    var returnStatus = null; 

    for(var i = 0; i < this.o_children.length; i++){ 
        //递归处理下级节点状态 
        returnStatus = this.o_children[i].doStatus(); 

        if(returnStatus == 1) selectedCount += 1; 
        if(returnStatus == 0) partSelectCount += 1; 
        if(returnStatus == -1) unselectedCount += 1; 
    } 

    if(selectedCount > 0 && unselectedCount == 0 && partSelectCount == 0){ 
        //下级全部选中 
        this.status = 1; 
    }else if(unselectedCount > 0 && selectedCount == 0 && partSelectCount == 0){
         //下级一个都没选中 
        this.status = -1; 
    }else{ 
        //下级部分选中 
        this.status = 0; 
    } 

    return this.status; 
}; 

//更新界面显示 
GBP_SL_Item.prototype.update = function(){ 
    //status：1表示选中；0表示下级部分选中；-1表示未选 
    if(this.status == -1 || this.status == 0){ 
        this.root.leftDiv_innerHTML += "<option value='" + this.value + "'>" + this.showText + "</option>\n";
     } 

    if(this.status == 1 || this.status == 0){ 
        this.root.rightDiv_innerHTML += "<option value='" + this.value + "'>" + this.showText + "</option>\n";
     } 

    //递归处理下级节点 
    for(var i = 0; i < this.o_children.length; i++){ 
        this.o_children[i].update(); 
    } 
}; 

/*==================== 组件扩展方法 ====================*/ 

//获得选中的值，返回的是个包含节点编号的数组 
GBPSelectList.prototype.getSelectedValues = function() { 
    var values = new Array(); 
    for(var n = 0; n < this.root.rightSelect.options.length; n++){
        values[n] = this.root.rightSelect.options[n].value;
    } 
    return values; 
}; 

//查看右侧记录的详细信息，返回的是个包含节点对象的二维数组 
GBPSelectList.prototype.getRows = function() { 
    var values = new Array(); 
    for(var n = 0; n < this.root.rightSelect.options.length; n++){
        values[values.length] = this.root.nodes[this.root.rightSelect.options[n].value].info;
     } 
    return values; 
}; 

//查看选中记录的详细信息，返回的是个包含节点对象的二维数组 
GBPSelectList.prototype.getSelectedRows = function() { 
    var values = new Array(); 
    for(var n = 0; n < this.root.rightSelect.options.length; n++){
        if(this.root.rightSelect[n].selected)
            values[values.length] = this.root.nodes[this.root.rightSelect.options[n].value].info;
     } 
    return values; 
}; 

 
/*  Bizfoundation ui 5.1
 *  biz.grid.js grid组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 *    biz.ui.checkbox.js
 *    biz.ui.radio.js
 *    biz.ui.alert.js
 *    biz.ui.select.js
 *    biz.ui.comboboxlist.js
 *    biz.ui.file.js
 *    biz.ui.comboboxtree.js
 *    biz.ui.autocomplete.js
 *    biz.ui.number.js
 */


// ==ClosureCompiler==
// @compilation_level SIMPLE_OPTIMIZATIONS

/**
 * @license jqGrid  4.4.0  - jQuery Grid
 * Copyright (c) 2008, Tony Tomov, tony@trirand.com
 * Dual licensed under the MIT and GPL licenses
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * Date: 2012-06-14
 */
//jsHint options
/*global document, window, jQuery, DOMParser, ActiveXObject, $, alert */

(function ($) {
"use strict";
$.jgrid = $.jgrid || {};
$.extend($.jgrid,{
	version : "4.4.0",
	htmlDecode : function(value){
		if(value && (value=='&nbsp;' || value=='&#160;' || (value.length===1 && value.charCodeAt(0)===160))) { return "";}
		return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");		
	},
	htmlEncode : function (value){
		return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
	},
	format : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1);
		if(format===undefined) { format = ""; }
		return format.replace(/\{(\d+)\}/g, function(m, i){
			return args[i];
		});
	},
	getCellIndex : function (cell) {
		var c = $(cell);
		if (c.is('tr')) { return -1; }
		c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0];
		if ($.browser.msie) { return $.inArray(c, c.parentNode.cells); }
		return c.cellIndex;
	},
	stripHtml : function(v) {
		v = v+"";
		var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
		if (v) {
			v = v.replace(regexp,"");
			return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g,"'") : "";
		} else {
			return v;
		}
	},
	stripPref : function (pref, id) {
		var obj = $.type( pref );
		if( obj == "string" || obj =="number") {
			pref =  String(pref);
			id = pref !== "" ? String(id).replace(String(pref), "") : id;
		}
		return id;
	},
	stringToDoc : function (xmlString) {
		var xmlDoc;
		if(typeof xmlString !== 'string') { return xmlString; }
		try	{
			var parser = new DOMParser();
			xmlDoc = parser.parseFromString(xmlString,"text/xml");
		}
		catch(e) {
			xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async=false;
			xmlDoc.loadXML(xmlString);
		}
		return (xmlDoc && xmlDoc.documentElement && xmlDoc.documentElement.tagName != 'parsererror') ? xmlDoc : null;
	},
	parse : function(jsonString) {
		var js = jsonString;
		if (js.substr(0,9) == "while(1);") { js = js.substr(9); }
		if (js.substr(0,2) == "/*") { js = js.substr(2,js.length-4); }
		if(!js) { js = "{}"; }
		return ($.jgrid.useJSON===true && typeof (JSON) === 'object' && typeof (JSON.parse) === 'function') ?
			JSON.parse(js) :
			eval('(' + js + ')');
	},
	parseDate : function(format, date) {
		var tsp = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},k,hl,dM, regdate = /[\\\/:_;.,\t\T\s-]/;
		if(date && date !== null && date !== undefined){
			date = $.trim(date);
			date = date.split(regdate);
			if ($.jgrid.formatter.date.masks[format] !== undefined) {
				format = $.jgrid.formatter.date.masks[format];
			}
			format = format.split(regdate);
			var dfmt  = $.jgrid.formatter.date.monthNames;
			var afmt  = $.jgrid.formatter.date.AmPm;
			var h12to24 = function(ampm, h){
				if (ampm === 0){ if (h === 12) { h = 0;} }
				else { if (h !== 12) { h += 12; } }
				return h;
			};
			for(k=0,hl=format.length;k<hl;k++){
				if(format[k] == 'M') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM < 12){
						date[k] = dM+1;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'F') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM > 11){
						date[k] = dM+1-12;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'a') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM < 2 && date[k] == afmt[dM]){
						date[k] = dM;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(format[k] == 'A') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM > 1 && date[k] == afmt[dM]){
						date[k] = dM-2;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(date[k] !== undefined) {
					tsp[format[k].toLowerCase()] = parseInt(date[k],10);
				}
			}
			tsp.m = parseInt(tsp.m,10)-1;
			var ty = tsp.y;
			if (ty >= 70 && ty <= 99) {tsp.y = 1900+tsp.y;}
			else if (ty >=0 && ty <=69) {tsp.y= 2000+tsp.y;}
			if(tsp.j !== undefined) { tsp.d = tsp.j; }
			if(tsp.n !== undefined) { tsp.m = parseInt(tsp.n,10)-1; }
		}
		return new Date(tsp.y, tsp.m, tsp.d, tsp.h, tsp.i, tsp.s, tsp.u);
	},
	jqID : function(sid){
		return String(sid).replace(/[!"#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g,"\\$&");
	},
	guid : 1,
	uidPref: 'jqg',
	randId : function( prefix )	{
		return (prefix? prefix: $.jgrid.uidPref) + ($.jgrid.guid++);
	},
	getAccessor : function(obj, expr) {
		var ret,p,prm = [], i;
		if( typeof expr === 'function') { return expr(obj); }
		ret = obj[expr];
		if(ret===undefined) {
			try {
				if ( typeof expr === 'string' ) {
					prm = expr.split('.');
				}
				i = prm.length;
				if( i ) {
					ret = obj;
					while (ret && i--) {
						p = prm.shift();
						ret = ret[p];
					}
				}
			} catch (e) {}
		}
		return ret;
	},
	getXmlData: function (obj, expr, returnObj) {
		var ret, m = typeof (expr) === 'string' ? expr.match(/^(.*)\[(\w+)\]$/) : null;
		if (typeof (expr) === 'function') { return expr(obj); }
		if (m && m[2]) {
			// m[2] is the attribute selector
			// m[1] is an optional element selector
			// examples: "[id]", "rows[page]"
			return m[1] ? $(m[1], obj).attr(m[2]) : $(obj).attr(m[2]);
		} else {
			ret = $(expr, obj);
			if (returnObj) { return ret; }
			//$(expr, obj).filter(':last'); // we use ':last' to be more compatible with old version of jqGrid
			return ret.length > 0 ? $(ret).text() : undefined;
		}
	},
	cellWidth : function () {
		var $testDiv = $("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;'></td></tr></table></div>"),
		testCell = $testDiv.appendTo("body")
			.find("td")
			.width();
		$testDiv.remove();
		return testCell !== 5;
	},
	ajaxOptions: {},
	from : function(source){
		// Original Author Hugo Bonacci
		// License MIT http://jlinq.codeplex.com/license
		var QueryObject=function(d,q){
		if(typeof(d)=="string"){
			d=$.data(d);
		}
		var self=this,
		_data=d,
		_usecase=true,
		_trim=false,
		_query=q,
		_stripNum = /[\$,%]/g,
		_lastCommand=null,
		_lastField=null,
		_orDepth=0,
		_negate=false,
		_queuedOperator="",
		_sorting=[],
		_useProperties=true;
		if(typeof(d)=="object"&&d.push) {
			if(d.length>0){
				if(typeof(d[0])!="object"){
					_useProperties=false;
				}else{
					_useProperties=true;
				}
			}
		}else{
			throw "data provides is not an array";
		}
		this._hasData=function(){
			return _data===null?false:_data.length===0?false:true;
		};
		this._getStr=function(s){
			var phrase=[];
			if(_trim){
				phrase.push("jQuery.trim(");
			}
			phrase.push("String("+s+")");
			if(_trim){
				phrase.push(")");
			}
			if(!_usecase){
				phrase.push(".toLowerCase()");
			}
			return phrase.join("");
		};
		this._strComp=function(val){
			if(typeof(val)=="string"){
				return".toString()";
			}else{
				return"";
			}
		};
		this._group=function(f,u){
			return({field:f.toString(),unique:u,items:[]});
		};
		this._toStr=function(phrase){
			if(_trim){
				phrase=$.trim(phrase);
			}
			phrase=phrase.toString().replace(/\\/g,'\\\\').replace(/\"/g,'\\"');
			return _usecase ? phrase : phrase.toLowerCase();
		};
		this._funcLoop=function(func){
			var results=[];
			$.each(_data,function(i,v){
				results.push(func(v));
			});
			return results;
		};
		this._append=function(s){
			var i;
			if(_query===null){
				_query="";
			} else {
				_query+=_queuedOperator === "" ? " && " :_queuedOperator;
			}
			for (i=0;i<_orDepth;i++){
				_query+="(";
			}
			if(_negate){
				_query+="!";
			}
			_query+="("+s+")";
			_negate=false;
			_queuedOperator="";
			_orDepth=0;
		};
		this._setCommand=function(f,c){
			_lastCommand=f;
			_lastField=c;
		};
		this._resetNegate=function(){
			_negate=false;
		};
		this._repeatCommand=function(f,v){
			if(_lastCommand===null){
				return self;
			}
			if(f!==null&&v!==null){
				return _lastCommand(f,v);
			}
			if(_lastField===null){
				return _lastCommand(f);
			}
			if(!_useProperties){
				return _lastCommand(f);
			}
			return _lastCommand(_lastField,f);
		};
		this._equals=function(a,b){
			return(self._compare(a,b,1)===0);
		};
		this._compare=function(a,b,d){
			var toString = Object.prototype.toString;
			if( d === undefined) { d = 1; }
			if(a===undefined) { a = null; }
			if(b===undefined) { b = null; }
			if(a===null && b===null){
				return 0;
			}
			if(a===null&&b!==null){
				return 1;
			}
			if(a!==null&&b===null){
				return -1;
			}
			if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') {
				if (a < b) { return -d; }
				if (a > b) { return d; }
				return 0;
			}
			if(!_usecase && typeof(a) !== "number" && typeof(b) !== "number" ) {
				a=String(a).toLowerCase();
				b=String(b).toLowerCase();
			}
			if(a<b){return -d;}
			if(a>b){return d;}
			return 0;
		};
		this._performSort=function(){
			if(_sorting.length===0){return;}
			_data=self._doSort(_data,0);
		};
		this._doSort=function(d,q){
			var by=_sorting[q].by,
			dir=_sorting[q].dir,
			type = _sorting[q].type,
			dfmt = _sorting[q].datefmt;
			if(q==_sorting.length-1){
				return self._getOrder(d, by, dir, type, dfmt);
			}
			q++;
			var values=self._getGroup(d,by,dir,type,dfmt);
			var results=[];
			for(var i=0;i<values.length;i++){
				var sorted=self._doSort(values[i].items,q);
				for(var j=0;j<sorted.length;j++){
					results.push(sorted[j]);
				}
			}
			return results;
		};
		this._getOrder=function(data,by,dir,type, dfmt){
			var sortData=[],_sortData=[], newDir = dir=="a" ? 1 : -1, i,ab,j,
			findSortKey;

			if(type === undefined ) { type = "text"; }
			if (type == 'float' || type== 'number' || type== 'currency' || type== 'numeric') {
				findSortKey = function($cell) {
					var key = parseFloat( String($cell).replace(_stripNum, ''));
					return isNaN(key) ? 0.00 : key;
				};
			} else if (type=='int' || type=='integer') {
				findSortKey = function($cell) {
					return $cell ? parseFloat(String($cell).replace(_stripNum, '')) : 0;
				};
			} else if(type == 'date' || type == 'datetime') {
				findSortKey = function($cell) {
					return $.jgrid.parseDate(dfmt,$cell).getTime();
				};
			} else if($.isFunction(type)) {
				findSortKey = type;
			} else {
				findSortKey = function($cell) {
					if(!$cell) {$cell ="";}
					return $.trim(String($cell).toUpperCase());
				};
			}
			$.each(data,function(i,v){
				ab = by!=="" ? $.jgrid.getAccessor(v,by) : v;
				if(ab === undefined) { ab = ""; }
				ab = findSortKey(ab, v);
				_sortData.push({ 'vSort': ab,'index':i});
			});

			_sortData.sort(function(a,b){
				a = a.vSort;
				b = b.vSort;
				return self._compare(a,b,newDir);
			});
			j=0;
			var nrec= data.length;
			// overhead, but we do not change the original data.
			while(j<nrec) {
				i = _sortData[j].index;
				sortData.push(data[i]);
				j++;
			}
			return sortData;
		};
		this._getGroup=function(data,by,dir,type, dfmt){
			var results=[],
			group=null,
			last=null, val;
			$.each(self._getOrder(data,by,dir,type, dfmt),function(i,v){
				val = $.jgrid.getAccessor(v, by);
				if(val === undefined) { val = ""; }
				if(!self._equals(last,val)){
					last=val;
					if(group !== null){
						results.push(group);
					}
					group=self._group(by,val);
				}
				group.items.push(v);
			});
			if(group !== null){
				results.push(group);
			}
			return results;
		};
		this.ignoreCase=function(){
			_usecase=false;
			return self;
		};
		this.useCase=function(){
			_usecase=true;
			return self;
		};
		this.trim=function(){
			_trim=true;
			return self;
		};
		this.noTrim=function(){
			_trim=false;
			return self;
		};
		this.execute=function(){
			var match=_query, results=[];
			if(match === null){
				return self;
			}
			$.each(_data,function(){
				if(eval(match)){results.push(this);}
			});
			_data=results;
			return self;
		};
		this.data=function(){
			return _data;
		};
		this.select=function(f){
			self._performSort();
			if(!self._hasData()){ return[]; }
			self.execute();
			if($.isFunction(f)){
				var results=[];
				$.each(_data,function(i,v){
					results.push(f(v));
				});
				return results;
			}
			return _data;
		};
		this.hasMatch=function(){
			if(!self._hasData()) { return false; }
			self.execute();
			return _data.length>0;
		};
		this.andNot=function(f,v,x){
			_negate=!_negate;
			return self.and(f,v,x);
		};
		this.orNot=function(f,v,x){
			_negate=!_negate;
			return self.or(f,v,x);
		};
		this.not=function(f,v,x){
			return self.andNot(f,v,x);
		};
		this.and=function(f,v,x){
			_queuedOperator=" && ";
			if(f===undefined){
				return self;
			}
			return self._repeatCommand(f,v,x);
		};
		this.or=function(f,v,x){
			_queuedOperator=" || ";
			if(f===undefined) { return self; }
			return self._repeatCommand(f,v,x);
		};
		this.orBegin=function(){
			_orDepth++;
			return self;
		};
		this.orEnd=function(){
			if (_query !== null){
				_query+=")";
			}
			return self;
		};
		this.isNot=function(f){
			_negate=!_negate;
			return self.is(f);
		};
		this.is=function(f){
			self._append('this.'+f);
			self._resetNegate();
			return self;
		};
		this._compareValues=function(func,f,v,how,t){
			var fld;
			if(_useProperties){
				fld='jQuery.jgrid.getAccessor(this,\''+f+'\')';
			}else{
				fld='this';
			}
			if(v===undefined) { v = null; }
			//var val=v===null?f:v,
			var val =v,
			swst = t.stype === undefined ? "text" : t.stype;
			if(v !== null) {
			switch(swst) {
				case 'int':
				case 'integer':
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseInt('+fld+',10)';
					val = 'parseInt('+val+',10)';
					break;
				case 'float':
				case 'number':
				case 'numeric':
					val = String(val).replace(_stripNum, '');
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseFloat('+fld+')';
					val = 'parseFloat('+val+')';
					break;
				case 'date':
				case 'datetime':
					val = String($.jgrid.parseDate(t.newfmt || 'Y-m-d',val).getTime());
					fld = 'jQuery.jgrid.parseDate("'+t.srcfmt+'",'+fld+').getTime()';
					break;
				default :
					fld=self._getStr(fld);
					val=self._getStr('"'+self._toStr(val)+'"');
			}
			}
			self._append(fld+' '+how+' '+val);
			self._setCommand(func,f);
			self._resetNegate();
			return self;
		};
		this.equals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"==",t);
		};
		this.notEquals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"!==",t);
		};
		this.isNull = function(f,v,t){
			return self._compareValues(self.equals,f,null,"===",t);
		};
		this.greater=function(f,v,t){
			return self._compareValues(self.greater,f,v,">",t);
		};
		this.less=function(f,v,t){
			return self._compareValues(self.less,f,v,"<",t);
		};
		this.greaterOrEquals=function(f,v,t){
			return self._compareValues(self.greaterOrEquals,f,v,">=",t);
		};
		this.lessOrEquals=function(f,v,t){
			return self._compareValues(self.lessOrEquals,f,v,"<=",t);
		};
		this.startsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length : val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.jgrid.getAccessor(this,\''+f+'\')')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(v)+'"'));
			}else{
				length=_trim?$.trim(v.toString()).length:v.toString().length;
				self._append(self._getStr('this')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(f)+'"'));
			}
			self._setCommand(self.startsWith,f);
			self._resetNegate();
			return self;
		};
		this.endsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length:val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.jgrid.getAccessor(this,\''+f+'\')')+'.substr('+self._getStr('jQuery.jgrid.getAccessor(this,\''+f+'\')')+'.length-'+length+','+length+') == "'+self._toStr(v)+'"');
			} else {
				self._append(self._getStr('this')+'.substr('+self._getStr('this')+'.length-"'+self._toStr(f)+'".length,"'+self._toStr(f)+'".length) == "'+self._toStr(f)+'"');
			}
			self._setCommand(self.endsWith,f);self._resetNegate();
			return self;
		};
		this.contains=function(f,v){
			if(_useProperties){
				self._append(self._getStr('jQuery.jgrid.getAccessor(this,\''+f+'\')')+'.indexOf("'+self._toStr(v)+'",0) > -1');
			}else{
				self._append(self._getStr('this')+'.indexOf("'+self._toStr(f)+'",0) > -1');
			}
			self._setCommand(self.contains,f);
			self._resetNegate();
			return self;
		};
		this.groupBy=function(by,dir,type, datefmt){
			if(!self._hasData()){
				return null;
			}
			return self._getGroup(_data,by,dir,type, datefmt);
		};
		this.orderBy=function(by,dir,stype, dfmt){
			dir =  dir === undefined || dir === null ? "a" :$.trim(dir.toString().toLowerCase());
			if(stype === null || stype === undefined) { stype = "text"; }
			if(dfmt === null || dfmt === undefined) { dfmt = "Y-m-d"; }
			if(dir=="desc"||dir=="descending"){dir="d";}
			if(dir=="asc"||dir=="ascending"){dir="a";}
			_sorting.push({by:by,dir:dir,type:stype, datefmt: dfmt});
			return self;
		};
		return self;
		};
	return new QueryObject(source,null);
	},
	extend : function(methods) {
		$.extend($.fn.jqGrid,methods);
		if (!this.no_legacy_api) {
			$.fn.extend(methods);
		}
	}
});

$.fn.jqGrid = function( pin ) {
	if (typeof pin == 'string') {
		//var fn = $.fn.jqGrid[pin];
		var fn = $.jgrid.getAccessor($.fn.jqGrid,pin);
		if (!fn) {
			throw ("jqGrid - No such method: " + pin);
		}
		var args = $.makeArray(arguments).slice(1);
		return fn.apply(this,args);
	}
	return this.each( function() {
		if(this.grid) {return;}

		var p = $.extend(true,{
			url: "",
			height: 150,
			page: 1,
			rowNum: 20,
			rowTotal : null,
			records: 0,
			pager: "",
			pgbuttons: true,
			pginput: true,
			colModel: [],
			rowList: [],
			colNames: [],
			sortorder: "asc",
			sortname: "",
			datatype: "xml",
			mtype: "GET",
			altRows: false,
			selarrrow: [],
			savedRow: [],
			shrinkToFit: true,
			xmlReader: {},
			jsonReader: {},
			subGrid: false,
			subGridModel :[],
			reccount: 0,
			lastpage: 0,
			lastsort: 0,
			selrow: null,
			beforeSelectRow: null,
			onSelectRow: null,
			onSortCol: null,
			ondblClickRow: null,
			onRightClickRow: null,
			onPaging: null,
			onSelectAll: null,
			loadComplete: null,
			gridComplete: null,
			loadError: null,
			loadBeforeSend: null,
			afterInsertRow: null,
			beforeRequest: null,
			beforeProcessing : null,
			onHeaderClick: null,
			viewrecords: false,
			loadonce: false,
			multiselect: false,
			multikey: false,
			editurl: null,
			search: false,
			caption: "",
			hidegrid: true,
			hiddengrid: false,
			postData: {},
			userData: {},
			treeGrid : false,
			treeGridModel : 'nested',
			treeReader : {},
			treeANode : -1,
			ExpandColumn: null,
			tree_root_level : 0,
			prmNames: {page:"page",rows:"rows", sort: "sidx",order: "sord", search:"_search", nd:"nd", id:"id",oper:"oper",editoper:"edit",addoper:"add",deloper:"del", subgridid:"id", npage: null, totalrows:"totalrows"},
			forceFit : false,
			gridstate : "visible",
			cellEdit: false,
			cellsubmit: "remote",
			nv:0,
			loadui: "enable",
			toolbar: [false,""],
			scroll: false,
			multiboxonly : false,
			deselectAfterSort : true,
			scrollrows : false,
			autowidth: false,
			scrollOffset :18,
			cellLayout: 5,
			subGridWidth: 20,
			multiselectWidth: 20,
			gridview: false,
			rownumWidth: 25,
			rownumbers : true,
			pagerpos: 'center',
			recordpos: 'right',
			footerrow : false,
			userDataOnFooter : false,
			hoverrows : true,
			altclass : 'ui-priority-secondary',
			viewsortcols : [false,'vertical',true],
			resizeclass : '',
			autoencode : false,
			remapColumns : [],
			ajaxGridOptions :{},
			direction : "ltr",
			toppager: false,
			headertitles: false,
			scrollTimeout: 40,
			data : [],
			_index : {},
			grouping : false,
			groupingView : {groupField:[],groupOrder:[], groupText:[],groupColumnShow:[],groupSummary:[], showSummaryOnHide: false, sortitems:[], sortnames:[], summary:[],summaryval:[], plusicon: 'ui-icon-circlesmall-plus', minusicon: 'ui-icon-circlesmall-minus'},
			ignoreCase : false,
			cmTemplate : {},
			idPrefix : ""
		}, $.jgrid.defaults, pin || {});
		var ts= this, grid={
			headers:[],
			cols:[],
			footers: [],
			dragStart: function(i,x,y) {
				this.resizing = { idx: i, startX: x.clientX, sOL : y[0]};
				this.hDiv.style.cursor = "col-resize";
				this.curGbox = $("#rs_m"+$.jgrid.jqID(p.id),"#gbox_"+$.jgrid.jqID(p.id));
				this.curGbox.css({display:"block",left:y[0],top:y[1],height:y[2]});
				$(ts).triggerHandler("jqGridResizeStart", [x, i]);
				if($.isFunction(p.resizeStart)) { p.resizeStart.call(this,x,i); }
				document.onselectstart=function(){return false;};
			},
			dragMove: function(x) {
				if(this.resizing) {
					var diff = x.clientX-this.resizing.startX,
					h = this.headers[this.resizing.idx],
					newWidth = p.direction === "ltr" ? h.width + diff : h.width - diff, hn, nWn;
					if(newWidth > 33) {
						this.curGbox.css({left:this.resizing.sOL+diff});
						if(p.forceFit===true ){
							hn = this.headers[this.resizing.idx+p.nv];
							nWn = p.direction === "ltr" ? hn.width - diff : hn.width + diff;
							if(nWn >33) {
								h.newWidth = newWidth;
								hn.newWidth = nWn;
							}
						} else {
							this.newWidth = p.direction === "ltr" ? p.tblwidth+diff : p.tblwidth-diff;
							h.newWidth = newWidth;
						}
					}
				}
			},
			dragEnd: function() {
				this.hDiv.style.cursor = "default";
				if(this.resizing) {
					var idx = this.resizing.idx,
					nw = this.headers[idx].newWidth || this.headers[idx].width;
					nw = parseInt(nw,10);
					this.resizing = false;
					$("#rs_m"+$.jgrid.jqID(p.id)).css("display","none");
					p.colModel[idx].width = nw;
					this.headers[idx].width = nw;
					this.headers[idx].el.style.width = nw + "px";
					this.cols[idx].style.width = nw+"px";
					if(this.footers.length>0) {this.footers[idx].style.width = nw+"px";}
					if(p.forceFit===true){
						nw = this.headers[idx+p.nv].newWidth || this.headers[idx+p.nv].width;
						this.headers[idx+p.nv].width = nw;
						this.headers[idx+p.nv].el.style.width = nw + "px";
						this.cols[idx+p.nv].style.width = nw+"px";
						if(this.footers.length>0) {this.footers[idx+p.nv].style.width = nw+"px";}
						p.colModel[idx+p.nv].width = nw;
					} else {
						p.tblwidth = this.newWidth || p.tblwidth;
						$('table:first',this.bDiv).css("width",p.tblwidth+"px");
						$('table:first',this.hDiv).css("width",p.tblwidth+"px");
						this.hDiv.scrollLeft = this.bDiv.scrollLeft;
						if(p.footerrow) {
							$('table:first',this.sDiv).css("width",p.tblwidth+"px");
							this.sDiv.scrollLeft = this.bDiv.scrollLeft;
						}
					}
					$(ts).triggerHandler("jqGridResizeStop", [nw, idx]);
					if($.isFunction(p.resizeStop)) { p.resizeStop.call(this,nw,idx); }
				}
				this.curGbox = null;
				document.onselectstart=function(){return true;};
			},
			populateVisible: function() {
				if (grid.timer) { clearTimeout(grid.timer); }
				grid.timer = null;
				var dh = $(grid.bDiv).height();
				if (!dh) { return; }
				var table = $("table:first", grid.bDiv);
				var rows, rh;
				if(table[0].rows.length) {
					try {
						rows = table[0].rows[1];
						rh = rows ? $(rows).outerHeight() || grid.prevRowHeight : grid.prevRowHeight;
					} catch (pv) {
						rh = grid.prevRowHeight;
					}
				}
				if (!rh) { return; }
				grid.prevRowHeight = rh;
				var rn = p.rowNum;
				var scrollTop = grid.scrollTop = grid.bDiv.scrollTop;
				var ttop = Math.round(table.position().top) - scrollTop;
				var tbot = ttop + table.height();
				var div = rh * rn;
				var page, npage, empty;
				if ( tbot < dh && ttop <= 0 &&
					(p.lastpage===undefined||parseInt((tbot + scrollTop + div - 1) / div,10) <= p.lastpage))
				{
					npage = parseInt((dh - tbot + div - 1) / div,10);
					if (tbot >= 0 || npage < 2 || p.scroll === true) {
						page = Math.round((tbot + scrollTop) / div) + 1;
						ttop = -1;
					} else {
						ttop = 1;
					}
				}
				if (ttop > 0) {
					page = parseInt(scrollTop / div,10) + 1;
					npage = parseInt((scrollTop + dh) / div,10) + 2 - page;
					empty = true;
				}
				if (npage) {
					if (p.lastpage && page > p.lastpage || p.lastpage==1 || (page === p.page && page===p.lastpage) ) {
						return;
					}
					if (grid.hDiv.loading) {
						grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout);
					} else {
						p.page = page;
						if (empty) {
							grid.selectionPreserver(table[0]);
							grid.emptyRows.call(table[0], false, false);
						}
						grid.populate(npage);
					}
				}
			},
			scrollGrid: function( e ) {
				if(p.scroll) {
					var scrollTop = grid.bDiv.scrollTop;
					if(grid.scrollTop === undefined) { grid.scrollTop = 0; }
					if (scrollTop != grid.scrollTop) {
						grid.scrollTop = scrollTop;
						if (grid.timer) { clearTimeout(grid.timer); }
						grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout);
					}
				}
				grid.hDiv.scrollLeft = grid.bDiv.scrollLeft;
				if(p.footerrow) {
					grid.sDiv.scrollLeft = grid.bDiv.scrollLeft;
				}
				if( e ) { e.stopPropagation(); }
			},
			selectionPreserver : function(ts) {
				var p = ts.p,
				sr = p.selrow, sra = p.selarrrow ? $.makeArray(p.selarrrow) : null,
				left = ts.grid.bDiv.scrollLeft,
				restoreSelection = function() {
					var i;
					p.selrow = null;
					p.selarrrow = [];
					if(p.multiselect && sra && sra.length>0) {
						for(i=0;i<sra.length;i++){
							if (sra[i] != sr) {
								$(ts).jqGrid("setSelection",sra[i],false, null);
							}
						}
					}
					if (sr) {
						$(ts).jqGrid("setSelection",sr,false,null);
					}
					ts.grid.bDiv.scrollLeft = left;
					$(ts).unbind('.selectionPreserver', restoreSelection);
				};
				$(ts).bind('jqGridGridComplete.selectionPreserver', restoreSelection);				
			}
		};
		if(this.tagName.toUpperCase()!='TABLE') {
			alert("Element is not a table");
			return;
		}
		if(document.documentMode !== undefined ) { // IE only
			if(document.documentMode <= 5) {
				alert("Grid can not be used in this ('quirks') mode!");
				return;
			}
		}
		$(this).empty().attr("tabindex","1");
		this.p = p ;
		this.p.useProp = !!$.fn.prop;
		var i, dir;
		if(this.p.colNames.length === 0) {
			for (i=0;i<this.p.colModel.length;i++){
				this.p.colNames[i] = this.p.colModel[i].label || this.p.colModel[i].name;
			}
		}
		if( this.p.colNames.length !== this.p.colModel.length ) {
			alert($.jgrid.errors.model);
			return;
		}
		var gv = $("<div class='ui-jqgrid-view'></div>"), ii,
		isMSIE = $.browser.msie ? true:false;
		ts.p.direction = $.trim(ts.p.direction.toLowerCase());
		if($.inArray(ts.p.direction,["ltr","rtl"]) == -1) { ts.p.direction = "ltr"; }
		dir = ts.p.direction;

		$(gv).insertBefore(this);
		$(this).appendTo(gv).removeClass("scroll");
		var eg = $("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>");
		$(eg).insertBefore(gv).attr({"id" : "gbox_"+this.id,"dir":dir});
		$(gv).appendTo(eg).attr("id","gview_"+this.id);
		if (isMSIE && $.browser.version <= 6) {
			ii = '<iframe style="display:block;position:absolute;z-index:-1;filter:Alpha(Opacity=\'0\');" src="javascript:false;"></iframe>';
		} else { ii="";}
		$("<div class='ui-widget-overlay jqgrid-overlay' id='lui_"+this.id+"'></div>").append(ii).insertBefore(gv);
		$("<div class='loading ui-state-default ui-state-active' id='load_"+this.id+"'>"+this.p.loadtext+"</div>").insertBefore(gv);
		$(this).attr({cellspacing:"0",cellpadding:"0",border:"0","role":"grid","aria-multiselectable":!!this.p.multiselect,"aria-labelledby":"gbox_"+this.id});
		var sortkeys = ["shiftKey","altKey","ctrlKey"],
		intNum = function(val,defval) {
			val = parseInt(val,10);
			if (isNaN(val)) { return defval ? defval : 0;}
			else {return val;}
		},
		formatCol = function (pos, rowInd, tv, rawObject, rowId, rdata){
			var cm = ts.p.colModel[pos],
			ral = cm.align, result="style=\"", clas = cm.classes, nm = cm.name, celp, acp=[];
			if(ral) { result += "text-align:"+ral+";"; }
			if(cm.hidden===true) { result += "display:none;"; }
			if(rowInd===0) {
				result += "width: "+grid.headers[pos].width+"px;";
			} else if (cm.cellattr && $.isFunction(cm.cellattr))
			{
				celp = cm.cellattr.call(ts, rowId, tv, rawObject, cm, rdata);
				if(celp && typeof(celp) === "string") {
					celp = celp.replace(/style/i,'style').replace(/title/i,'title');
					if(celp.indexOf('title') > -1) { cm.title=false;}
					if(celp.indexOf('class') > -1) { clas = undefined;}
					acp = celp.split("style");
					if(acp.length === 2 ) {
						acp[1] =  $.trim(acp[1].replace("=",""));
						if(acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) {
							acp[1] = acp[1].substring(1);
						}
						result += acp[1].replace(/'/gi,'"');
					} else {
						result += "\"";
					}
				}
			}
			if(!acp.length) { acp[0] = ""; result += "\"";}
			result += (clas !== undefined ? (" class=\""+clas+"\"") :"") + ((cm.title && tv) ? (" title=\""+$.jgrid.stripHtml(tv)+"\"") :"");
			result += " aria-describedby=\""+ts.p.id+"_"+nm+"\"";
			return result + acp[0];
		},
		cellVal =  function (val) {
			return val === undefined || val === null || val === "" ? "&#160;" : (ts.p.autoencode ? $.jgrid.htmlEncode(val) : val+"");
		},
		formatter = function (rowId, cellval , colpos, rwdat, _act){
			var cm = ts.p.colModel[colpos],v;
			if(typeof cm.formatter !== 'undefined') {
				var opts= {rowId: rowId, colModel:cm, gid:ts.p.id, pos:colpos };
				if($.isFunction( cm.formatter ) ) {
					v = cm.formatter.call(ts,cellval,opts,rwdat,_act);
				} else if($.fmatter){
					v = $.fn.fmatter.call(ts,cm.formatter,cellval,opts,rwdat,_act);
				} else {
					v = cellVal(cellval);
				}
			} else {
				v = cellVal(cellval);
			}
			return v;
		},
		addCell = function(rowId,cell,pos,irow, srvr) {
			var v,prp;
			v = formatter(rowId,cell,pos,srvr,'add');
			prp = formatCol( pos,irow, v, srvr, rowId, true);
			return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
		},
		addMulti = function(rowid,pos,irow){
			var v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+ts.p.id+"_"+rowid+"\" class=\"cbox\" name=\"jqg_"+ts.p.id+"\" value=\""+rowid+"\"/>",			
			prp = formatCol( pos,irow,'',null, rowid, true);
			return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
		},
		addRowNum = function (pos,irow,pG,rN) {
			var v =  (parseInt(pG,10)-1)*parseInt(rN,10)+1+irow,
			prp = formatCol( pos,irow,v, null, irow, true);
			return "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" "+prp+">"+v+"</td>";
		},
		reader = function (datatype) {
			var field, f=[], j=0, i;
			for(i =0; i<ts.p.colModel.length; i++){
				field = ts.p.colModel[i];
				if (field.name !== 'cb' && field.name !=='subgrid' && field.name !=='rn') {
					f[j]= datatype == "local" ?
					field.name :
					( (datatype=="xml" || datatype === "xmlstring") ? field.xmlmap || field.name : field.jsonmap || field.name );
					j++;
				}
			}
			return f;
		},
		orderedCols = function (offset) {
			var order = ts.p.remapColumns;
			if (!order || !order.length) {
				order = $.map(ts.p.colModel, function(v,i) { return i; });
			}
			if (offset) {
				order = $.map(order, function(v) { return v<offset?null:v-offset; });
			}
			return order;
		},
		emptyRows = function (scroll, locdata) {
			var firstrow;
			if (this.p.deepempty) {
				$(this.rows).slice(1).remove();
			} else {
				firstrow = this.rows.length > 0 ? this.rows[0] : null;
				$(this.firstChild).empty().append(firstrow);
			}
			if (scroll && this.p.scroll) {
				$(this.grid.bDiv.firstChild).css({height: "auto"});
				$(this.grid.bDiv.firstChild.firstChild).css({height: 0, display: "none"});
				if (this.grid.bDiv.scrollTop !== 0) {
					this.grid.bDiv.scrollTop = 0;
				}
			}
			if(locdata === true && this.p.treeGrid) {
				this.p.data = []; this.p._index = {};
			}
		},
		refreshIndex = function() {
			var datalen = ts.p.data.length, idname, i, val,
			ni = ts.p.rownumbers===true ? 1 :0,
			gi = ts.p.multiselect ===true ? 1 :0,
			si = ts.p.subGrid===true ? 1 :0;

			if(ts.p.keyIndex === false || ts.p.loadonce === true) {
				idname = ts.p.localReader.id;
			} else {
				idname = ts.p.colModel[ts.p.keyIndex+gi+si+ni].name;
			}
			for(i =0;i < datalen; i++) {
				val = $.jgrid.getAccessor(ts.p.data[i],idname);
				ts.p._index[val] = i;
			}
		},
		constructTr = function(id, hide, altClass, rd, cur) {
			var tabindex = '-1', restAttr = '', attrName, style = hide ? 'display:none;' : '',
				classes = 'ui-widget-content jqgrow ui-row-' + ts.p.direction + ' ' +altClass,
				rowAttrObj = $.isFunction(ts.p.rowattr) ? ts.p.rowattr.call(ts, rd, cur) : {};
			if(!$.isEmptyObject( rowAttrObj )) {
				if (rowAttrObj.hasOwnProperty("id")) {
					id = rowAttrObj.id;
					delete rowAttrObj.id;
				}
				if (rowAttrObj.hasOwnProperty("tabindex")) {
					tabindex = rowAttrObj.tabindex;
					delete rowAttrObj.tabindex;
				}
				if (rowAttrObj.hasOwnProperty("style")) {
					style += rowAttrObj.style;
					delete rowAttrObj.style;
				}
				if (rowAttrObj.hasOwnProperty("class")) {
					classes += ' ' + rowAttrObj['class'];
					delete rowAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete rowAttrObj.role; } catch(ra){}
				for (attrName in rowAttrObj) {
					if (rowAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
					}
				}
			}
			return '<tr role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
				(style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
		},
		addXmlData = function (xml,t, rcnt, more, adjust) {
			var startReq = new Date(),
			locdata = (ts.p.datatype != "local" && ts.p.loadonce) || ts.p.datatype == "xmlstring",
			xmlid = "_id_", xmlRd = ts.p.xmlReader,
			frd = ts.p.datatype == "local" ? "local" : "xml";
			if(locdata) {
				ts.p.data = [];
				ts.p._index = {};
				ts.p.localReader.id = xmlid;
			}
			ts.p.reccount = 0;
			if($.isXMLDoc(xml)) {
				if(ts.p.treeANode===-1 && !ts.p.scroll) {
					emptyRows.call(ts, false, true);
					rcnt=1;
				} else { rcnt = rcnt > 1 ? rcnt :1; }
			} else { return; }
			var i,fpos,ir=0,v,gi=ts.p.multiselect===true?1:0,si=ts.p.subGrid===true?1:0,ni=ts.p.rownumbers===true?1:0,idn, getId,f=[],F,rd ={}, xmlr,rid, rowData=[], cn=(ts.p.altRows === true) ? " "+ts.p.altclass:"",cn1;
			if(!xmlRd.repeatitems) {f = reader(frd);}
			if( ts.p.keyIndex===false) {
				idn = $.isFunction( xmlRd.id ) ?  xmlRd.id.call(ts, xml) : xmlRd.id;
			} else {
				idn = ts.p.keyIndex;
			}
			if(f.length>0 && !isNaN(idn)) {
				if (ts.p.remapColumns && ts.p.remapColumns.length) {
					idn = $.inArray(idn, ts.p.remapColumns);
				}
				idn=f[idn];
			}
			if( (idn+"").indexOf("[") === -1 ) {
				if (f.length) {
					getId = function( trow, k) {return $(idn,trow).text() || k;};
				} else {
					getId = function( trow, k) {return $(xmlRd.cell,trow).eq(idn).text() || k;};
				}
			}
			else {
				getId = function( trow, k) {return trow.getAttribute(idn.replace(/[\[\]]/g,"")) || k;};
			}
			ts.p.userData = {};
			ts.p.page = $.jgrid.getXmlData( xml,xmlRd.page ) || 0;
			ts.p.lastpage = $.jgrid.getXmlData( xml,xmlRd.total );
			if(ts.p.lastpage===undefined) { ts.p.lastpage=1; }
			ts.p.records = $.jgrid.getXmlData( xml,xmlRd.records ) || 0;
			if($.isFunction(xmlRd.userdata)) {
				ts.p.userData = xmlRd.userdata.call(ts, xml) || {};
			} else {
				$.jgrid.getXmlData(xml, xmlRd.userdata, true).each(function() {ts.p.userData[this.getAttribute("name")]= $(this).text();});
			}
			var gxml = $.jgrid.getXmlData( xml, xmlRd.root, true);
			gxml = $.jgrid.getXmlData( gxml, xmlRd.row, true);
			if (!gxml) { gxml = []; }
			var gl = gxml.length, j=0, grpdata=[], rn = parseInt(ts.p.rowNum,10);
			if (gl > 0 &&  ts.p.page <= 0) { ts.p.page = 1; }
			if(gxml && gl){
			var br=ts.p.scroll?$.jgrid.randId():1,altr;
			if (adjust) { rn *= adjust+1; }
			var afterInsRow = $.isFunction(ts.p.afterInsertRow), hiderow=ts.p.grouping && ts.p.groupingView.groupCollapse === true;
			while (j<gl) {
				xmlr = gxml[j];
				rid = getId(xmlr,br+j);
				rid  = ts.p.idPrefix + rid;
				altr = rcnt === 0 ? 0 : rcnt+1;
				cn1 = (altr+j)%2 == 1 ? cn : '';
				var iStartTrTag = rowData.length;
				rowData.push("");
				if( ni ) {
					rowData.push( addRowNum(0,j,ts.p.page,ts.p.rowNum) );
				}
				if( gi ) {
					rowData.push( addMulti(rid,ni,j) );
				}
				if( si ) {
					rowData.push( $(ts).jqGrid("addSubGridCell",gi+ni,j+rcnt) );
				}
				if(xmlRd.repeatitems){
					if (!F) { F=orderedCols(gi+si+ni); }
					var cells = $.jgrid.getXmlData( xmlr, xmlRd.cell, true);
					$.each(F, function (k) {
						var cell = cells[this];
						if (!cell) { return false; }
						v = cell.textContent || cell.text;
						rd[ts.p.colModel[k+gi+si+ni].name] = v;
						rowData.push( addCell(rid,v,k+gi+si+ni,j+rcnt,xmlr) );
					});
				} else {
					for(i = 0; i < f.length;i++) {
						v = $.jgrid.getXmlData( xmlr, f[i]);
						rd[ts.p.colModel[i+gi+si+ni].name] = v;
						rowData.push( addCell(rid, v, i+gi+si+ni, j+rcnt, xmlr) );
					}
				}
				rowData[iStartTrTag] = constructTr(rid, hiderow, cn1, rd, xmlr);
				rowData.push("</tr>");
				if(ts.p.grouping) {
					grpdata = $(ts).jqGrid('groupingPrepare',rowData, grpdata, rd, j);
					rowData = [];
				}
				if(locdata || ts.p.treeGrid === true) {
					rd[xmlid] = rid;
					ts.p.data.push(rd);
					ts.p._index[rid] = ts.p.data.length-1;
				}
				if(ts.p.gridview === false ) {
					$("tbody:first",t).append(rowData.join(''));
					$(ts).triggerHandler("jqGridAfterInsertRow", [rid, rd, xmlr]);
					if(afterInsRow) {ts.p.afterInsertRow.call(ts,rid,rd,xmlr);}
					rowData=[];
				}
				rd={};
				ir++;
				j++;
				if(ir==rn) {break;}
			}
			}
			if(ts.p.gridview === true) {
				fpos = ts.p.treeANode > -1 ? ts.p.treeANode: 0;
				if(ts.p.grouping) {
					$(ts).jqGrid('groupingRender',grpdata,ts.p.colModel.length);
					grpdata = null;
				} else if(ts.p.treeGrid === true && fpos > 0) {
					$(ts.rows[fpos]).after(rowData.join(''));
				} else {
					$("tbody:first",t).append(rowData.join(''));
				}
			}
			if(ts.p.subGrid === true ) {
				try {$(ts).jqGrid("addSubGrid",gi+ni);} catch (_){}
			}
			ts.p.totaltime = new Date() - startReq;
			if(ir>0) { if(ts.p.records===0) { ts.p.records=gl;} }
			rowData =null;
			if( ts.p.treeGrid === true) {
				try {$(ts).jqGrid("setTreeNode", fpos+1, ir+fpos+1);} catch (e) {}
			}
			if(!ts.p.treeGrid && !ts.p.scroll) {ts.grid.bDiv.scrollTop = 0;}
			ts.p.reccount=ir;
			ts.p.treeANode = -1;
			if(ts.p.userDataOnFooter) { $(ts).jqGrid("footerData","set",ts.p.userData,true); }
			if(locdata) {
				ts.p.records = gl;
				ts.p.lastpage = Math.ceil(gl/ rn);
			}
			if (!more) { ts.updatepager(false,true); }
			if(locdata) {
				while (ir<gl) {
					xmlr = gxml[ir];
					rid = getId(xmlr,ir+br);
					rid  = ts.p.idPrefix + rid;
					if(xmlRd.repeatitems){
						if (!F) { F=orderedCols(gi+si+ni); }
						var cells2 = $.jgrid.getXmlData( xmlr, xmlRd.cell, true);
						$.each(F, function (k) {
							var cell = cells2[this];
							if (!cell) { return false; }
							v = cell.textContent || cell.text;
							rd[ts.p.colModel[k+gi+si+ni].name] = v;
						});
					} else {
						for(i = 0; i < f.length;i++) {
							v = $.jgrid.getXmlData( xmlr, f[i]);
							rd[ts.p.colModel[i+gi+si+ni].name] = v;
						}
					}
					rd[xmlid] = rid;
					ts.p.data.push(rd);
					ts.p._index[rid] = ts.p.data.length-1;
					rd = {};
					ir++;
				}
			}
		},
		addJSONData = function(data,t, rcnt, more, adjust) {
			var startReq = new Date();
			if(data) {
				if(ts.p.treeANode === -1 && !ts.p.scroll) {
					emptyRows.call(ts, false, true);
					rcnt=1;
				} else { rcnt = rcnt > 1 ? rcnt :1; }
			} else { return; }

			var dReader, locid = "_id_", frd,
			locdata = (ts.p.datatype != "local" && ts.p.loadonce) || ts.p.datatype == "jsonstring";
			if(locdata) { ts.p.data = []; ts.p._index = {}; ts.p.localReader.id = locid;}
			ts.p.reccount = 0;
			if(ts.p.datatype == "local") {
				dReader =  ts.p.localReader;
				frd= 'local';
			} else {
				dReader =  ts.p.jsonReader;
				frd='json';
			}
			var ir=0,v,i,j,f=[],F,cur,gi=ts.p.multiselect?1:0,si=ts.p.subGrid?1:0,ni=ts.p.rownumbers===true?1:0,len,drows,idn,rd={}, fpos, idr,rowData=[],cn=(ts.p.altRows === true) ? " "+ts.p.altclass:"",cn1,lp;
			ts.p.page = $.jgrid.getAccessor(data,dReader.page) || 0;
			lp = $.jgrid.getAccessor(data,dReader.total);
			ts.p.lastpage = lp === undefined ? 1 : lp;
			ts.p.records = $.jgrid.getAccessor(data,dReader.records) || 0;
			ts.p.userData = $.jgrid.getAccessor(data,dReader.userdata) || {};
			if(!dReader.repeatitems) {
				F = f = reader(frd);
			}
			if( ts.p.keyIndex===false ) {
				idn = $.isFunction(dReader.id) ? dReader.id.call(ts, data) : dReader.id; 
			} else {
				idn = ts.p.keyIndex;
			}
			if(f.length>0 && !isNaN(idn)) {
				if (ts.p.remapColumns && ts.p.remapColumns.length) {
					idn = $.inArray(idn, ts.p.remapColumns);
				}
				idn=f[idn];
			}
			drows = $.jgrid.getAccessor(data,dReader.root);
			if (!drows) { drows = []; }
			len = drows.length; i=0;
			if (len > 0 && ts.p.page <= 0) { ts.p.page = 1; }
			var rn = parseInt(ts.p.rowNum,10),br=ts.p.scroll?$.jgrid.randId():1, altr;
			if (adjust) { rn *= adjust+1; }
			var afterInsRow = $.isFunction(ts.p.afterInsertRow), grpdata=[], hiderow=ts.p.grouping && ts.p.groupingView.groupCollapse === true;
			while (i<len) {
				cur = drows[i];
				idr = $.jgrid.getAccessor(cur,idn);
				if(idr === undefined) {
					idr = br+i;
					if(f.length===0){
						if(dReader.cell){
							var ccur = $.jgrid.getAccessor(cur,dReader.cell);
							idr = ccur !== undefined ? ccur[idn] || idr : idr;
							ccur=null;
						}
					}
				}
				idr  = ts.p.idPrefix + idr;
				altr = rcnt === 1 ? 0 : rcnt;
				cn1 = (altr+i)%2 == 1 ? cn : '';
				var iStartTrTag = rowData.length;
				rowData.push("");
				if( ni ) {
					rowData.push( addRowNum(0,i,ts.p.page,ts.p.rowNum) );
				}
				if( gi ){
					rowData.push( addMulti(idr,ni,i) );
				}
				if( si ) {
					rowData.push( $(ts).jqGrid("addSubGridCell",gi+ni,i+rcnt) );
				}
				if (dReader.repeatitems) {
					if(dReader.cell) {cur = $.jgrid.getAccessor(cur,dReader.cell);}
					if (!F) { F=orderedCols(gi+si+ni); }
				}
				for (j=0;j<F.length;j++) {
					v = $.jgrid.getAccessor(cur,F[j]);
					rowData.push( addCell(idr,v,j+gi+si+ni,i+rcnt,cur) );
					rd[ts.p.colModel[j+gi+si+ni].name] = v;
				}
				rowData[iStartTrTag] = constructTr(idr, hiderow, cn1, rd, cur);
				rowData.push( "</tr>" );
				if(ts.p.grouping) {
					grpdata = $(ts).jqGrid('groupingPrepare',rowData, grpdata, rd, i);
					rowData = [];
				}
				if(locdata || ts.p.treeGrid===true) {
					rd[locid] = idr;
					ts.p.data.push(rd);
					ts.p._index[idr] = ts.p.data.length-1;
				}
				if(ts.p.gridview === false ) {
					$("#"+$.jgrid.jqID(ts.p.id)+" tbody:first").append(rowData.join(''));
					$(ts).triggerHandler("jqGridAfterInsertRow", [idr, rd, cur]);
					if(afterInsRow) {ts.p.afterInsertRow.call(ts,idr,rd,cur);}
					rowData=[];//ari=0;
				}
				rd={};
				ir++;
				i++;
				if(ir==rn) { break; }
			}
			if(ts.p.gridview === true ) {
				fpos = ts.p.treeANode > -1 ? ts.p.treeANode: 0;
				if(ts.p.grouping) {
					$(ts).jqGrid('groupingRender',grpdata,ts.p.colModel.length);
					grpdata = null;
				} else if(ts.p.treeGrid === true && fpos > 0) {
					$(ts.rows[fpos]).after(rowData.join(''));
				} else {
					$("#"+$.jgrid.jqID(ts.p.id)+" tbody:first").append(rowData.join(''));
				}
			}
			if(ts.p.subGrid === true ) {
				try { $(ts).jqGrid("addSubGrid",gi+ni);} catch (_){}
			}
			ts.p.totaltime = new Date() - startReq;
			if(ir>0) {
				if(ts.p.records===0) { ts.p.records=len; }
			}
			rowData = null;
			if( ts.p.treeGrid === true) {
				try {$(ts).jqGrid("setTreeNode", fpos+1, ir+fpos+1);} catch (e) {}
			}
			if(!ts.p.treeGrid && !ts.p.scroll) {ts.grid.bDiv.scrollTop = 0;}
			ts.p.reccount=ir;
			ts.p.treeANode = -1;
			if(ts.p.userDataOnFooter) { $(ts).jqGrid("footerData","set",ts.p.userData,true); }
			if(locdata) {
				ts.p.records = len;
				ts.p.lastpage = Math.ceil(len/ rn);
			}
			if (!more) { ts.updatepager(false,true); }
			if(locdata) {
				while (ir<len && drows[ir]) {
					cur = drows[ir];
					idr = $.jgrid.getAccessor(cur,idn);
					if(idr === undefined) {
						idr = br+ir;
						if(f.length===0){
							if(dReader.cell){
								var ccur2 = $.jgrid.getAccessor(cur,dReader.cell);
								idr = ccur2[idn] || idr;
								ccur2=null;
							}
						}
					}
					if(cur) {
						idr  = ts.p.idPrefix + idr;
						if (dReader.repeatitems) {
							if(dReader.cell) {cur = $.jgrid.getAccessor(cur,dReader.cell);}
							if (!F) { F=orderedCols(gi+si+ni); }
						}

						for (j=0;j<F.length;j++) {
							v = $.jgrid.getAccessor(cur,F[j]);
							rd[ts.p.colModel[j+gi+si+ni].name] = v;
						}
						rd[locid] = idr;
						ts.p.data.push(rd);
						ts.p._index[idr] = ts.p.data.length-1;
						rd = {};
					}
					ir++;
				}
			}
		},
		addLocalData = function() {
			var st, fndsort=false, cmtypes={}, grtypes=[], grindexes=[], srcformat, sorttype, newformat;
			if(!$.isArray(ts.p.data)) {
				return;
			}
			var grpview = ts.p.grouping ? ts.p.groupingView : false, lengrp, gin;
			$.each(ts.p.colModel,function(){
				sorttype = this.sorttype || "text";
				if(sorttype == "date" || sorttype == "datetime") {
					if(this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date') {
						if(this.formatoptions && this.formatoptions.srcformat) {
							srcformat = this.formatoptions.srcformat;
						} else {
							srcformat = $.jgrid.formatter.date.srcformat;
						}
						if(this.formatoptions && this.formatoptions.newformat) {
							newformat = this.formatoptions.newformat;
						} else {
							newformat = $.jgrid.formatter.date.newformat;
						}
					} else {
						srcformat = newformat = this.datefmt || "Y-m-d";
					}
					cmtypes[this.name] = {"stype": sorttype, "srcfmt": srcformat,"newfmt":newformat};
				} else {
					cmtypes[this.name] = {"stype": sorttype, "srcfmt":'',"newfmt":''};
				}
				if(ts.p.grouping ) {
					for(gin =0, lengrp = grpview.groupField.length; gin< lengrp; gin++) {
						if( this.name == grpview.groupField[gin]) {
							var grindex = this.name;
							if (typeof this.index != 'undefined') {
								grindex = this.index;
							}
							grtypes[gin] = cmtypes[grindex];
							grindexes[gin]= grindex;
						}
					}
				}
				if(!fndsort && (this.index == ts.p.sortname || this.name == ts.p.sortname)){
					st = this.name; // ???
					fndsort = true;
				}
			});
			if(ts.p.treeGrid) {
				$(ts).jqGrid("SortTree", st, ts.p.sortorder, cmtypes[st].stype, cmtypes[st].srcfmt);
				return;
			}
			var compareFnMap = {
				'eq':function(queryObj) {return queryObj.equals;},
				'ne':function(queryObj) {return queryObj.notEquals;},
				'lt':function(queryObj) {return queryObj.less;},
				'le':function(queryObj) {return queryObj.lessOrEquals;},
				'gt':function(queryObj) {return queryObj.greater;},
				'ge':function(queryObj) {return queryObj.greaterOrEquals;},
				'cn':function(queryObj) {return queryObj.contains;},
				'nc':function(queryObj,op) {return op === "OR" ? queryObj.orNot().contains : queryObj.andNot().contains;},
				'bw':function(queryObj) {return queryObj.startsWith;},
				'bn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().startsWith : queryObj.andNot().startsWith;},
				'en':function(queryObj,op) {return op === "OR" ? queryObj.orNot().endsWith : queryObj.andNot().endsWith;},
				'ew':function(queryObj) {return queryObj.endsWith;},
				'ni':function(queryObj,op) {return op === "OR" ? queryObj.orNot().equals : queryObj.andNot().equals;},
				'in':function(queryObj) {return queryObj.equals;},
				'nu':function(queryObj) {return queryObj.isNull;},
				'nn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().isNull : queryObj.andNot().isNull;}

			},
			query = $.jgrid.from(ts.p.data);
			if (ts.p.ignoreCase) { query = query.ignoreCase(); }
			function tojLinq ( group ) {
				var s = 0, index, gor, ror, opr, rule;
				if (group.groups !== undefined) {
					gor = group.groups.length && group.groupOp.toString().toUpperCase() === "OR";
					if (gor) {
						query.orBegin();
					}
					for (index = 0; index < group.groups.length; index++) {
						if (s > 0 && gor) {
							query.or();
						}
						try {
							tojLinq(group.groups[index]);
						} catch (e) {alert(e);}
						s++;
					}
					if (gor) {
						query.orEnd();
					}
				}
				if (group.rules !== undefined) {
					if(s>0) {
						var result = query.select();
						query = $.jgrid.from( result);
						if (ts.p.ignoreCase) { query = query.ignoreCase(); } 
					}
					try{
						ror = group.rules.length && group.groupOp.toString().toUpperCase() === "OR";
						if (ror) {
							query.orBegin();
						}
						for (index = 0; index < group.rules.length; index++) {
							rule = group.rules[index];
							opr = group.groupOp.toString().toUpperCase();
							if (compareFnMap[rule.op] && rule.field ) {
								if(s > 0 && opr && opr === "OR") {
									query = query.or();
								}
								query = compareFnMap[rule.op](query, opr)(rule.field, rule.data, cmtypes[rule.field]);
							}
							s++;
						}
						if (ror) {
							query.orEnd();
						}
					} catch (g) {alert(g);}
				}
			}

			if (ts.p.search === true) {
				var srules = ts.p.postData.filters;
				if(srules) {
					if(typeof srules == "string") { srules = $.jgrid.parse(srules);}
					tojLinq( srules );
				} else {
					try {
						query = compareFnMap[ts.p.postData.searchOper](query)(ts.p.postData.searchField, ts.p.postData.searchString,cmtypes[ts.p.postData.searchField]);
					} catch (se){}
				}
			}
			if(ts.p.grouping) {
				for(gin=0; gin<lengrp;gin++) {
					query.orderBy(grindexes[gin],grpview.groupOrder[gin],grtypes[gin].stype, grtypes[gin].srcfmt);
				}
			}
			if (st && ts.p.sortorder && fndsort) {
				if(ts.p.sortorder.toUpperCase() == "DESC") {
					query.orderBy(ts.p.sortname, "d", cmtypes[st].stype, cmtypes[st].srcfmt);
				} else {
					query.orderBy(ts.p.sortname, "a", cmtypes[st].stype, cmtypes[st].srcfmt);
				}
			}
			var queryResults = query.select(),
			recordsperpage = parseInt(ts.p.rowNum,10),
			total = queryResults.length,
			page = parseInt(ts.p.page,10),
			totalpages = Math.ceil(total / recordsperpage),
			retresult = {};
			queryResults = queryResults.slice( (page-1)*recordsperpage , page*recordsperpage );
			query = null;
			cmtypes = null;
			retresult[ts.p.localReader.total] = totalpages;
			retresult[ts.p.localReader.page] = page;
			retresult[ts.p.localReader.records] = total;
			retresult[ts.p.localReader.root] = queryResults;
			retresult[ts.p.localReader.userdata] = ts.p.userData;
			queryResults = null;
			return  retresult;
		},
		updatepager = function(rn, dnd) {
			var cp, last, base, from,to,tot,fmt, pgboxes = "", sppg,
			tspg = ts.p.pager ? "_"+$.jgrid.jqID(ts.p.pager.substr(1)) : "",
			tspg_t = ts.p.toppager ? "_"+ts.p.toppager.substr(1) : "";
			base = parseInt(ts.p.page,10)-1;
			if(base < 0) { base = 0; }
			base = base*parseInt(ts.p.rowNum,10);
			to = base + ts.p.reccount;
			if (ts.p.scroll) {
				var rows = $("tbody:first > tr:gt(0)", ts.grid.bDiv);
				base = to - rows.length;
				ts.p.reccount = rows.length;
				var rh = rows.outerHeight() || ts.grid.prevRowHeight;
				if (rh) {
					var top = base * rh;
					var height = parseInt(ts.p.records,10) * rh;
					$(">div:first",ts.grid.bDiv).css({height : height}).children("div:first").css({height:top,display:top?"":"none"});
				}
				ts.grid.bDiv.scrollLeft = ts.grid.hDiv.scrollLeft;
			}
			pgboxes = ts.p.pager ? ts.p.pager : "";
			pgboxes += ts.p.toppager ?  (pgboxes ? "," + ts.p.toppager : ts.p.toppager) : "";
			if(pgboxes) {
				fmt = $.jgrid.formatter.integer || {};
				cp = intNum(ts.p.page);
				last = intNum(ts.p.lastpage);
				$(".selbox",pgboxes)[ this.p.useProp ? 'prop' : 'attr' ]("disabled",false);
				if(ts.p.pginput===true) {
					$('.ui-pg-input',pgboxes).val(ts.p.page);
					sppg = ts.p.toppager ? '#sp_1'+tspg+",#sp_1"+tspg_t : '#sp_1'+tspg;
					$(sppg).html($.fmatter ? $.fmatter.util.NumberFormat(ts.p.lastpage,fmt):ts.p.lastpage);

				}
				if (ts.p.viewrecords){
					if(ts.p.reccount === 0) {
						$(".ui-paging-info",pgboxes).html(ts.p.emptyrecords);
					} else {
						from = base+1;
						tot=ts.p.records;
						if($.fmatter) {
							from = $.fmatter.util.NumberFormat(from,fmt);
							to = $.fmatter.util.NumberFormat(to,fmt);
							tot = $.fmatter.util.NumberFormat(tot,fmt);
						}
						$(".ui-paging-info",pgboxes).html($.jgrid.format(ts.p.recordtext,from,to,tot));
					}
				}
				if(ts.p.pgbuttons===true) {
					if(cp<=0) {cp = last = 0;}
					if(cp==1 || cp === 0) {
						$("#first"+tspg+", #prev"+tspg).addClass('ui-state-disabled').removeClass('ui-state-hover');
						if(ts.p.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover'); }
					} else {
						$("#first"+tspg+", #prev"+tspg).removeClass('ui-state-disabled');
						if(ts.p.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).removeClass('ui-state-disabled'); }
					}
					if(cp==last || cp === 0) {
						$("#next"+tspg+", #last"+tspg).addClass('ui-state-disabled').removeClass('ui-state-hover');
						if(ts.p.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover'); }
					} else {
						$("#next"+tspg+", #last"+tspg).removeClass('ui-state-disabled');
						if(ts.p.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).removeClass('ui-state-disabled'); }
					}
				}
			}
			if(rn===true && ts.p.rownumbers === true) {
				$("td.jqgrid-rownum",ts.rows).each(function(i){
					$(this).html(base+1+i);
				});
			}
			if(dnd && ts.p.jqgdnd) { $(ts).jqGrid('gridDnD','updateDnD');}
			$(ts).triggerHandler("jqGridGridComplete");
			if($.isFunction(ts.p.gridComplete)) {ts.p.gridComplete.call(ts);}
			$(ts).triggerHandler("jqGridAfterGridComplete");
		},
		beginReq = function() {
			ts.grid.hDiv.loading = true;
			if(ts.p.hiddengrid) { return;}
			switch(ts.p.loadui) {
				case "disable":
					break;
				case "enable":
					$("#load_"+$.jgrid.jqID(ts.p.id)).show();
					break;
				case "block":
					$("#lui_"+$.jgrid.jqID(ts.p.id)).show();
					$("#load_"+$.jgrid.jqID(ts.p.id)).show();
					break;
			}
		},
		endReq = function() {
			ts.grid.hDiv.loading = false;
			switch(ts.p.loadui) {
				case "disable":
					break;
				case "enable":
					$("#load_"+$.jgrid.jqID(ts.p.id)).hide();
					break;
				case "block":
					$("#lui_"+$.jgrid.jqID(ts.p.id)).hide();
					$("#load_"+$.jgrid.jqID(ts.p.id)).hide();
					break;
			}
		},
		populate = function (npage) {
			if(!ts.grid.hDiv.loading) {
				var pvis = ts.p.scroll && npage === false,
				prm = {}, dt, dstr, pN=ts.p.prmNames;
				if(ts.p.page <=0) { ts.p.page = 1; }
				if(pN.search !== null) {prm[pN.search] = ts.p.search;} if(pN.nd !== null) {prm[pN.nd] = new Date().getTime();}
				if(pN.rows !== null) {prm[pN.rows]= ts.p.rowNum;} if(pN.page !== null) {prm[pN.page]= ts.p.page;}
				if(pN.sort !== null) {prm[pN.sort]= ts.p.sortname;} if(pN.order !== null) {prm[pN.order]= prm[pN.sort] ? ts.p.sortorder:"";}
				if(ts.p.rowTotal !== null && pN.totalrows !== null) { prm[pN.totalrows]= ts.p.rowTotal; }
				var lcf = $.isFunction(ts.p.loadComplete), lc = lcf ? ts.p.loadComplete : null;
				var adjust = 0;
				npage = npage || 1;
				if (npage > 1) {
					if(pN.npage !== null) {
						prm[pN.npage] = npage;
						adjust = npage - 1;
						npage = 1;
					} else {
						lc = function(req) {
							ts.p.page++;
							ts.grid.hDiv.loading = false;
							if (lcf) {
								ts.p.loadComplete.call(ts,req);
							}
							populate(npage-1);
						};
					}
				} else if (pN.npage !== null) {
					delete ts.p.postData[pN.npage];
				}
				if(ts.p.grouping) {
					$(ts).jqGrid('groupingSetup');
					var grp = ts.p.groupingView, gi, gs="",go="";
					for(gi=0;gi<grp.groupField.length;gi++) {
						/**
						 * 修复分组时传递排序信息参数末尾多余逗号问题
						 *分组排序字段以逗号分隔存放在prm[pN.sort]
						 *分组排序字段排序方式以逗号分隔存放在prm[pN.order]
						 *如sortname有值，放到分组排序字段后面
						 */
						gs += grp.groupField[gi]+((gi == grp.groupField.length-1)?"":",");
                        go += grp.groupOrder[gi]+((gi == grp.groupField.length-1)?"":",");
					}
					prm[pN.order] = go + (prm[pN.sort] && prm[pN.order] ? (","+prm[pN.order]) : "");
					prm[pN.sort] = gs + (prm[pN.sort] ? (","+prm[pN.sort]) :prm[pN.sort]);
				}
				$.extend(ts.p.postData,prm);
				var rcnt = !ts.p.scroll ? 1 : ts.rows.length-1;
				var bfr = $(ts).triggerHandler("jqGridBeforeRequest");
				if (bfr === false || bfr === 'stop') { return; }
				if ($.isFunction(ts.p.datatype)) { ts.p.datatype.call(ts,ts.p.postData,"load_"+ts.p.id); return;}
				else if($.isFunction(ts.p.beforeRequest)) {
					bfr = ts.p.beforeRequest.call(ts);
					if(bfr === undefined) { bfr = true; }
					if ( bfr === false ) { return; }
				}
				dt = ts.p.datatype.toLowerCase();
				switch(dt)
				{
				case "json":
				case "jsonp":
				case "xml":
				case "script":
					$.ajax($.extend({
						url:ts.p.url,
						type:ts.p.mtype,
						dataType: dt ,
						data: $.isFunction(ts.p.serializeGridData)? ts.p.serializeGridData.call(ts,ts.p.postData) : ts.p.postData,
						success:function(data,st, xhr) {
							if ($.isFunction(ts.p.beforeProcessing)) {
								if (ts.p.beforeProcessing.call(ts, data, st, xhr) === false) {
									endReq();
									return;
								}
							}
							if(dt === "xml") { addXmlData(data,ts.grid.bDiv,rcnt,npage>1,adjust); }
							else { addJSONData(data,ts.grid.bDiv,rcnt,npage>1,adjust); }
							$(ts).triggerHandler("jqGridLoadComplete", [data]);
							if(lc) { lc.call(ts,data); }
							$(ts).triggerHandler("jqGridAfterLoadComplete", [data]);
							if (pvis) { ts.grid.populateVisible(); }
							if( ts.p.loadonce || ts.p.treeGrid) {ts.p.datatype = "local";}
							data=null;
							if (npage === 1) { endReq(); }
						},
						error:function(xhr,st,err){
							if($.isFunction(ts.p.loadError)) { ts.p.loadError.call(ts,xhr,st,err); }
							if (npage === 1) { endReq(); }
							xhr=null;
						},
						beforeSend: function(xhr, settings ){
							var gotoreq = true;
							if($.isFunction(ts.p.loadBeforeSend)) {
								gotoreq = ts.p.loadBeforeSend.call(ts,xhr, settings); 
							}
							if(gotoreq === undefined) { gotoreq = true; }
							if(gotoreq === false) {
								return false;
							} else {
								beginReq();
							}
						}
					},$.jgrid.ajaxOptions, ts.p.ajaxGridOptions));
				break;
				case "xmlstring":
					beginReq();
					dstr = $.jgrid.stringToDoc(ts.p.datastr);
					addXmlData(dstr,ts.grid.bDiv);
					$(ts).triggerHandler("jqGridLoadComplete", [dstr]);
					if(lcf) {ts.p.loadComplete.call(ts,dstr);}
					$(ts).triggerHandler("jqGridAfterLoadComplete", [dstr]);
					ts.p.datatype = "local";
					ts.p.datastr = null;
					endReq();
				break;
				case "jsonstring":
					beginReq();
					if(typeof ts.p.datastr == 'string') { dstr = $.jgrid.parse(ts.p.datastr); }
					else { dstr = ts.p.datastr; }
					addJSONData(dstr,ts.grid.bDiv);
					$(ts).triggerHandler("jqGridLoadComplete", [dstr]);
					if(lcf) {ts.p.loadComplete.call(ts,dstr);}
					$(ts).triggerHandler("jqGridAfterLoadComplete", [dstr]);
					ts.p.datatype = "local";
					ts.p.datastr = null;
					endReq();
				break;
				case "local":
				case "clientside":
					beginReq();
					ts.p.datatype = "local";
					var req = addLocalData();
					addJSONData(req,ts.grid.bDiv,rcnt,npage>1,adjust);
					$(ts).triggerHandler("jqGridLoadComplete", [req]);
					if(lc) { lc.call(ts,req); }
					$(ts).triggerHandler("jqGridAfterLoadComplete", [req]);
					if (pvis) { ts.grid.populateVisible(); }
					endReq();
				break;
				}
			}
		},
		setHeadCheckBox = function ( checked ) {
			$('#cb_'+$.jgrid.jqID(ts.p.id),ts.grid.hDiv)[ts.p.useProp ? 'prop': 'attr']("checked", checked);
			var fid = ts.p.frozenColumns ? ts.p.id+"_frozen" : "";
			if(fid) {
				$('#cb_'+$.jgrid.jqID(ts.p.id),ts.grid.fhDiv)[ts.p.useProp ? 'prop': 'attr']("checked", checked);
			}
		},
		setPager = function (pgid, tp){
			// TBD - consider escaping pgid with pgid = $.jgrid.jqID(pgid);
			var sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>",
			pginp = "",
			pgl="<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>",
			str="", pgcnt, lft, cent, rgt, twd, tdw, i,
			clearVals = function(onpaging){
				var ret;
				if ($.isFunction(ts.p.onPaging) ) { ret = ts.p.onPaging.call(ts,onpaging); }
				ts.p.selrow = null;
				if(ts.p.multiselect) {ts.p.selarrrow =[]; setHeadCheckBox( false );}
				ts.p.savedRow = [];
				if(ret=='stop') {return false;}
				return true;
			};
			pgid = pgid.substr(1);
			tp += "_" + pgid;
			pgcnt = "pg_"+pgid;
			lft = pgid+"_left"; cent = pgid+"_center"; rgt = pgid+"_right";
			$("#"+$.jgrid.jqID(pgid) )
			.append("<div id='"+pgcnt+"' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody><tr><td id='"+lft+"' align='left'></td><td id='"+cent+"' align='center' style='white-space:pre;'></td><td id='"+rgt+"' align='right'></td></tr></tbody></table></div>")
			.attr("dir","ltr"); //explicit setting
			if(ts.p.rowList.length >0){
				str = "<td dir='"+dir+"'>";
				str +="<select class='ui-pg-selbox' role='listbox'>";
				for(i=0;i<ts.p.rowList.length;i++){
					str +="<option role=\"option\" value=\""+ts.p.rowList[i]+"\""+((ts.p.rowNum == ts.p.rowList[i])?" selected=\"selected\"":"")+">"+ts.p.rowList[i]+"</option>";
				}
				str +="</select></td>";
			}
			if(dir=="rtl") { pgl += str; }
			if(ts.p.pginput===true) { pginp= "<td dir='"+dir+"'>"+$.jgrid.format(ts.p.pgtext || "","<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>","<span id='sp_1_"+$.jgrid.jqID(pgid)+"'></span>")+"</td>";}
			if(ts.p.pgbuttons===true) {
				var po=["first"+tp,"prev"+tp, "next"+tp,"last"+tp]; if(dir=="rtl") { po.reverse(); }
				pgl += "<td id='"+po[0]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-first'></span></td>";
				pgl += "<td id='"+po[1]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-prev'></span></td>";
				pgl += pginp !== "" ? sep+pginp+sep:"";
				pgl += "<td id='"+po[2]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-next'></span></td>";
				pgl += "<td id='"+po[3]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-end'></span></td>";
			} else if (pginp !== "") { pgl += pginp; }
			if(dir=="ltr") { pgl += str; }
			pgl += "</tr></tbody></table>";
			if(ts.p.viewrecords===true) {$("td#"+pgid+"_"+ts.p.recordpos,"#"+pgcnt).append("<div dir='"+dir+"' style='text-align:"+ts.p.recordpos+"' class='ui-paging-info'></div>");}
			$("td#"+pgid+"_"+ts.p.pagerpos,"#"+pgcnt).append(pgl);
			tdw = $(".ui-jqgrid").css("font-size") || "11px";
			$(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:"+tdw+";visibility:hidden;' ></div>");
			twd = $(pgl).clone().appendTo("#testpg").width();
			$("#testpg").remove();
			if(twd > 0) {
				if(pginp !== "") { twd += 50; } //should be param
				$("td#"+pgid+"_"+ts.p.pagerpos,"#"+pgcnt).width(twd);
			}
			ts.p._nvtd = [];
			ts.p._nvtd[0] = twd ? Math.floor((ts.p.width - twd)/2) : Math.floor(ts.p.width/3);
			ts.p._nvtd[1] = 0;
			pgl=null;
			$('.ui-pg-selbox',"#"+pgcnt).bind('change',function() {
				ts.p.page = Math.round(ts.p.rowNum*(ts.p.page-1)/this.value-0.5)+1;
				ts.p.rowNum = this.value;
				if(ts.p.pager) { $('.ui-pg-selbox',ts.p.pager).val(this.value); }
				if(ts.p.toppager) { $('.ui-pg-selbox',ts.p.toppager).val(this.value); }
				if(!clearVals('records')) { return false; }
				populate();
				return false;
			});
			if(ts.p.pgbuttons===true) {
			$(".ui-pg-button","#"+pgcnt).hover(function(){
				if($(this).hasClass('ui-state-disabled')) {
					this.style.cursor='default';
				} else {
					$(this).addClass('ui-state-hover');
					this.style.cursor='pointer';
				}
			},function() {
				if(!$(this).hasClass('ui-state-disabled')) {
					$(this).removeClass('ui-state-hover');
					this.style.cursor= "default";
				}
			});
			$("#first"+$.jgrid.jqID(tp)+", #prev"+$.jgrid.jqID(tp)+", #next"+$.jgrid.jqID(tp)+", #last"+$.jgrid.jqID(tp)).click( function() {
				var cp = intNum(ts.p.page,1),
				last = intNum(ts.p.lastpage,1), selclick = false,
				fp=true, pp=true, np=true,lp=true;
				if(last ===0 || last===1) {fp=false;pp=false;np=false;lp=false; }
				else if( last>1 && cp >=1) {
					if( cp === 1) { fp=false; pp=false; }
					//else if( cp>1 && cp <last){ }
					else if( cp===last){ np=false;lp=false; }
				} else if( last>1 && cp===0 ) { np=false;lp=false; cp=last-1;}
				if( this.id === 'first'+tp && fp ) { ts.p.page=1; selclick=true;}
				if( this.id === 'prev'+tp && pp) { ts.p.page=(cp-1); selclick=true;}
				if( this.id === 'next'+tp && np) { ts.p.page=(cp+1); selclick=true;}
				if( this.id === 'last'+tp && lp) { ts.p.page=last; selclick=true;}
				if(selclick) {
					if(!clearVals(this.id)) { return false; }
					populate();
				}
				return false;
			});
			}
			if(ts.p.pginput===true) {
			$('input.ui-pg-input',"#"+pgcnt).keypress( function(e) {
				var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
				if(key == 13) {
					ts.p.page = ($(this).val()>0) ? $(this).val():ts.p.page;
					if(!clearVals('user')) { return false; }
					populate();
					return false;
				}
				return this;
			});
			}
		},
		sortData = function (index, idxcol,reload,sor){
			if(!ts.p.colModel[idxcol].sortable) { return; }
			var so;
			if(ts.p.savedRow.length > 0) {return;}
			if(!reload) {
				if( ts.p.lastsort == idxcol ) {
					if( ts.p.sortorder == 'asc') {
						ts.p.sortorder = 'desc';
					} else if(ts.p.sortorder == 'desc') { ts.p.sortorder = 'asc';}
				} else { ts.p.sortorder = ts.p.colModel[idxcol].firstsortorder || 'asc'; }
				ts.p.page = 1;
			}
			if(sor) {
				if(ts.p.lastsort == idxcol && ts.p.sortorder == sor && !reload) { return; }
				else { ts.p.sortorder = sor; }
			}
			var previousSelectedTh = ts.grid.headers[ts.p.lastsort].el, newSelectedTh = ts.grid.headers[idxcol].el;

			$("span.ui-grid-ico-sort",previousSelectedTh).addClass('ui-state-disabled');
			$(previousSelectedTh).attr("aria-selected","false");
			$("span.ui-icon-"+ts.p.sortorder,newSelectedTh).removeClass('ui-state-disabled');
			$(newSelectedTh).attr("aria-selected","true");
			if(!ts.p.viewsortcols[0]) {
				if(ts.p.lastsort != idxcol) {
					$("span.s-ico",previousSelectedTh).hide();
					$("span.s-ico",newSelectedTh).show();
				}
			}
			index = index.substring(5 + ts.p.id.length + 1); // bad to be changed!?!
			ts.p.sortname = ts.p.colModel[idxcol].index || index;
			so = ts.p.sortorder;
			if ($(ts).triggerHandler("jqGridSortCol", [index, idxcol, so]) === 'stop') {
				ts.p.lastsort = idxcol;
				return;
			}
			if($.isFunction(ts.p.onSortCol)) {if (ts.p.onSortCol.call(ts,index,idxcol,so)=='stop') {ts.p.lastsort = idxcol; return;}}
			if(ts.p.datatype == "local") {
				if(ts.p.deselectAfterSort) {$(ts).jqGrid("resetSelection");}
			} else {
				ts.p.selrow = null;
				if(ts.p.multiselect){setHeadCheckBox( false );}
				ts.p.selarrrow =[];
				ts.p.savedRow =[];
			}
			if(ts.p.scroll) {
				var sscroll = ts.grid.bDiv.scrollLeft;
				emptyRows.call(ts, true, false);
				ts.grid.hDiv.scrollLeft = sscroll;
			}
			if(ts.p.subGrid && ts.p.datatype=='local') {
				$("td.sgexpanded","#"+$.jgrid.jqID(ts.p.id)).each(function(){
					$(this).trigger("click");
				});
			}
			populate();
			ts.p.lastsort = idxcol;
			if(ts.p.sortname != index && idxcol) {ts.p.lastsort = idxcol;}
		},
		setColWidth = function () {
			var initwidth = 0, brd=$.jgrid.cellWidth()? 0: intNum(ts.p.cellLayout,0), vc=0, lvc, scw=intNum(ts.p.scrollOffset,0),cw,hs=false,aw,gw=0,
			cl = 0, cr;
			$.each(ts.p.colModel, function() {
				if(typeof this.hidden === 'undefined') {this.hidden=false;}
				this.widthOrg = cw = intNum(this.width,0);
				if(this.hidden===false){
					initwidth += cw+brd;
					if(this.fixed) {
						gw += cw+brd;
					} else {
						vc++;
					}
					cl++;
				}
			});
			if(isNaN(ts.p.width)) {
				ts.p.width  = initwidth + ((ts.p.shrinkToFit ===false && !isNaN(ts.p.height)) ? scw : 0);
			}
			grid.width = ts.p.width;
			ts.p.tblwidth = initwidth;
			if(ts.p.shrinkToFit ===false && ts.p.forceFit === true) {ts.p.forceFit=false;}
			if(ts.p.shrinkToFit===true && vc > 0) {
				aw = grid.width-brd*vc-gw;
				if(!isNaN(ts.p.height)) {
					aw -= scw;
					hs = true;
				}
				initwidth =0;
				$.each(ts.p.colModel, function(i) {
					if(this.hidden === false && !this.fixed){
						cw = Math.round(aw*this.width/(ts.p.tblwidth-brd*vc-gw));
						this.width =cw;
						initwidth += cw;
						lvc = i;
					}
				});
				cr =0;
				if (hs) {
					if(grid.width-gw-(initwidth+brd*vc) !== scw){
						cr = grid.width-gw-(initwidth+brd*vc)-scw;
					}
				} else if(!hs && Math.abs(grid.width-gw-(initwidth+brd*vc)) !== 1) {
					cr = grid.width-gw-(initwidth+brd*vc);
				}
				ts.p.colModel[lvc].width += cr;
				ts.p.tblwidth = initwidth+cr+brd*vc+gw;
				if(ts.p.tblwidth > ts.p.width) {
					ts.p.colModel[lvc].width -= (ts.p.tblwidth - parseInt(ts.p.width,10));
					ts.p.tblwidth = ts.p.width;
				}
			}
		},
		nextVisible= function(iCol) {
			var ret = iCol, j=iCol, i;
			for (i = iCol+1;i<ts.p.colModel.length;i++){
				if(ts.p.colModel[i].hidden !== true ) {
					j=i; break;
				}
			}
			return j-ret;
		},
		getOffset = function (iCol) {
			var i, ret = {}, brd1 = $.jgrid.cellWidth() ? 0 : ts.p.cellLayout;
			ret[0] =  ret[1] = ret[2] = 0;
			for(i=0;i<=iCol;i++){
				if(ts.p.colModel[i].hidden === false ) {
					ret[0] += ts.p.colModel[i].width+brd1;
				}
			}
			if(ts.p.direction=="rtl") { ret[0] = ts.p.width - ret[0]; }
			ret[0] = ret[0] - ts.grid.bDiv.scrollLeft;
			if($(ts.grid.cDiv).is(":visible")) {ret[1] += $(ts.grid.cDiv).height() +parseInt($(ts.grid.cDiv).css("padding-top"),10)+parseInt($(ts.grid.cDiv).css("padding-bottom"),10);}
			if(ts.p.toolbar[0]===true && (ts.p.toolbar[1]=='top' || ts.p.toolbar[1]=='both')) {ret[1] += $(ts.grid.uDiv).height()+parseInt($(ts.grid.uDiv).css("border-top-width"),10)+parseInt($(ts.grid.uDiv).css("border-bottom-width"),10);}
			if(ts.p.toppager) {ret[1] += $(ts.grid.topDiv).height()+parseInt($(ts.grid.topDiv).css("border-bottom-width"),10);}
			ret[2] += $(ts.grid.bDiv).height() + $(ts.grid.hDiv).height();
			return ret;
		},
		getColumnHeaderIndex = function (th) {
			var i, headers = ts.grid.headers, ci = $.jgrid.getCellIndex(th);
			for (i = 0; i < headers.length; i++) {
				if (th === headers[i].el) {
					ci = i;
					break;
				}
			}
			return ci;
		};
		this.p.id = this.id;
		if ($.inArray(ts.p.multikey,sortkeys) == -1 ) {ts.p.multikey = false;}
		ts.p.keyIndex=false;
		for (i=0; i<ts.p.colModel.length;i++) {
			ts.p.colModel[i] = $.extend(true, {}, ts.p.cmTemplate, ts.p.colModel[i].template || {}, ts.p.colModel[i]);
			if (ts.p.keyIndex === false && ts.p.colModel[i].key===true) {
				ts.p.keyIndex = i;
			}
		}
		ts.p.sortorder = ts.p.sortorder.toLowerCase();
		if(ts.p.grouping===true) {
			ts.p.scroll = false;
			ts.p.rownumbers = false;
			//ts.p.subGrid = false; expiremental
			ts.p.treeGrid = false;
			ts.p.gridview = true;
		}
		if(this.p.treeGrid === true) {
			try { $(this).jqGrid("setTreeGrid");} catch (_) {}
			if(ts.p.datatype != "local") { ts.p.localReader = {id: "_id_"};	}
		}
		if(this.p.subGrid) {
			try { $(ts).jqGrid("setSubGrid");} catch (s){}
		}
		if(this.p.multiselect) {
			this.p.colNames.unshift("<input role='checkbox' id='cb_"+this.p.id+"' class='cbox' type='checkbox'/>");
			this.p.colModel.unshift({name:'cb',width:$.jgrid.cellWidth() ? ts.p.multiselectWidth+ts.p.cellLayout : ts.p.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
		}
		if(this.p.rownumbers) {
			this.p.colNames.unshift("");
			this.p.colModel.unshift({name:'rn',width:ts.p.rownumWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
		}
		ts.p.xmlReader = $.extend(true,{
			root: "rows",
			row: "row",
			page: "rows>page",
			total: "rows>total",
			records : "rows>records",
			repeatitems: true,
			cell: "cell",
			id: "[id]",
			userdata: "userdata",
			subgrid: {root:"rows", row: "row", repeatitems: true, cell:"cell"}
		}, ts.p.xmlReader);
		ts.p.jsonReader = $.extend(true,{
			root: "rows",
			page: "page",
			total: "total",
			records: "records",
			repeatitems: true,
			cell: "cell",
			id: "id",
			userdata: "userdata",
			subgrid: {root:"rows", repeatitems: true, cell:"cell"}
		},ts.p.jsonReader);
		ts.p.localReader = $.extend(true,{
			root: "rows",
			page: "page",
			total: "total",
			records: "records",
			repeatitems: false,
			cell: "cell",
			id: "id",
			userdata: "userdata",
			subgrid: {root:"rows", repeatitems: true, cell:"cell"}
		},ts.p.localReader);
		if(ts.p.scroll){
			ts.p.pgbuttons = false; ts.p.pginput=false; ts.p.rowList=[];
		}
		if(ts.p.data.length) { refreshIndex(); }
		var thead = "<thead><tr class='ui-jqgrid-labels' role='rowheader'>",
		tdc, idn, w, res, sort,
		td, ptr, tbody, imgs,iac="",idc="";
		if(ts.p.shrinkToFit===true && ts.p.forceFit===true) {
			for (i=ts.p.colModel.length-1;i>=0;i--){
				if(!ts.p.colModel[i].hidden) {
					ts.p.colModel[i].resizable=false;
					break;
				}
			}
		}
		if(ts.p.viewsortcols[1] == 'horizontal') {iac=" ui-i-asc";idc=" ui-i-desc";}
		tdc = isMSIE ?  "class='ui-th-div-ie'" :"";
		imgs = "<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc"+iac+" ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-"+dir+"'></span>";
		imgs += "<span sort='desc' class='ui-grid-ico-sort ui-icon-desc"+idc+" ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-"+dir+"'></span></span>";
		for(i=0;i<this.p.colNames.length;i++){
			//colModel列属性title支持自定义提示信息，为true时提示信息与表头名一致，为false不显示提示信息，为字符串时显示字符串
			var tooltip = ts.p.headertitles ? (" title=\""+$.jgrid.stripHtml(typeof(ts.p.colModel[i].title) == "string" ? ts.p.colModel[i].title:(ts.p.colModel[i].title === false)?"":ts.p.colNames[i])+"\"") :"";
			thead += "<th id='"+ts.p.id+"_"+ts.p.colModel[i].name+"' role='columnheader' class='ui-state-default ui-th-column ui-th-"+dir+"'"+ tooltip+">";
			idn = ts.p.colModel[i].index || ts.p.colModel[i].name;
			thead += "<div id='jqgh_"+ts.p.id+"_"+ts.p.colModel[i].name+"' "+tdc+">"+ts.p.colNames[i];
			if(!ts.p.colModel[i].width)  { ts.p.colModel[i].width = 150; }
			else { ts.p.colModel[i].width = parseInt(ts.p.colModel[i].width,10); }
			if(typeof(ts.p.colModel[i].title) !== "boolean") { ts.p.colModel[i].title = true; }
			if (idn == ts.p.sortname) {
				ts.p.lastsort = i;
			}
			thead += imgs+"</div></th>";
		}
		thead += "</tr></thead>";
		imgs = null;
		$(this).append(thead);
		$("thead tr:first th",this).hover(function(){$(this).addClass('ui-state-hover');},function(){$(this).removeClass('ui-state-hover');});
		if(this.p.multiselect) {
			var emp=[], chk;
			$('#cb_'+$.jgrid.jqID(ts.p.id),this).bind('click',function(){
				ts.p.selarrrow = [];
				var froz = ts.p.frozenColumns === true ? ts.p.id + "_frozen" : "";
				if (this.checked) {
					$(ts.rows).each(function(i) {
						if (i>0) {
							if(!$(this).hasClass("ui-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass('ui-state-disabled')){
								$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(this.id) )[ts.p.useProp ? 'prop': 'attr']("checked",true);
								$(this).addClass("ui-state-highlight").attr("aria-selected","true");  
								ts.p.selarrrow.push(this.id);
								ts.p.selrow = this.id;
								if(froz) {
									$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(this.id), ts.grid.fbDiv )[ts.p.useProp ? 'prop': 'attr']("checked",true);
									$("#"+$.jgrid.jqID(this.id), ts.grid.fbDiv).addClass("ui-state-highlight");
								}
							}
						}
					});
					chk=true;
					emp=[];
				}
				else {
					$(ts.rows).each(function(i) {
						if(i>0) {
							if(!$(this).hasClass("ui-subgrid") && !$(this).hasClass('ui-state-disabled')){
								$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(this.id) )[ts.p.useProp ? 'prop': 'attr']("checked", false);
								$(this).removeClass("ui-state-highlight").attr("aria-selected","false");
								emp.push(this.id);
								if(froz) {
									$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(this.id), ts.grid.fbDiv )[ts.p.useProp ? 'prop': 'attr']("checked",false);
									$("#"+$.jgrid.jqID(this.id), ts.grid.fbDiv).removeClass("ui-state-highlight");
								}
							}
						}
					});
					ts.p.selrow = null;
					chk=false;
				}
				$(ts).triggerHandler("jqGridSelectAll", [chk ? ts.p.selarrrow : emp, chk]);
				if($.isFunction(ts.p.onSelectAll)) {ts.p.onSelectAll.call(ts, chk ? ts.p.selarrrow : emp,chk);}
			});
		}

		if(ts.p.autowidth===true) {
			var pw = $(eg).innerWidth();
			ts.p.width = pw > 0?  pw: 'nw';
		}
		setColWidth();
		$(eg).css("width",grid.width+"px").append("<div class='ui-jqgrid-resize-mark' id='rs_m"+ts.p.id+"'>&#160;</div>");
		$(gv).css("width",grid.width+"px");
		thead = $("thead:first",ts).get(0);
		var	tfoot = "";
		if(ts.p.footerrow) { tfoot += "<table role='grid' style='width:"+ts.p.tblwidth+"px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-"+dir+"'>"; }
		var thr = $("tr:first",thead),
		firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
		ts.p.disableClick=false;
		$("th",thr).each(function ( j ) {
			w = ts.p.colModel[j].width;
			if(typeof ts.p.colModel[j].resizable === 'undefined') {ts.p.colModel[j].resizable = true;}
			if(ts.p.colModel[j].resizable){
				res = document.createElement("span");
				$(res).html("&#160;").addClass('ui-jqgrid-resize ui-jqgrid-resize-'+dir);
				if(!$.browser.opera) { $(res).css("cursor","col-resize"); }
				$(this).addClass(ts.p.resizeclass);
			} else {
				res = "";
			}
			$(this).css("width",w+"px").prepend(res);
			var hdcol = "";
			if( ts.p.colModel[j].hidden ) {
				$(this).css("display","none");
				hdcol = "display:none;";
			}
			firstr += "<td role='gridcell' style='height:0px;width:"+w+"px;"+hdcol+"'></td>";
			grid.headers[j] = { width: w, el: this };
			sort = ts.p.colModel[j].sortable;
			if( typeof sort !== 'boolean') {ts.p.colModel[j].sortable =  true; sort=true;}
			var nm = ts.p.colModel[j].name;
			if( !(nm == 'cb' || nm=='subgrid' || nm=='rn') ) {
				if(ts.p.viewsortcols[2]){
					$(">div",this).addClass('ui-jqgrid-sortable');
				}
			}
			if(sort) {
				if(ts.p.viewsortcols[0]) {$("div span.s-ico",this).show(); if(j==ts.p.lastsort){ $("div span.ui-icon-"+ts.p.sortorder,this).removeClass("ui-state-disabled");}}
				else if( j == ts.p.lastsort) {$("div span.s-ico",this).show();$("div span.ui-icon-"+ts.p.sortorder,this).removeClass("ui-state-disabled");}
			}
			if(ts.p.footerrow) { tfoot += "<td role='gridcell' "+formatCol(j,0,'', null, '', false)+">&#160;</td>"; }
		}).mousedown(function(e) {
			if ($(e.target).closest("th>span.ui-jqgrid-resize").length != 1) { return; }
			var ci = getColumnHeaderIndex(this);
			if(ts.p.forceFit===true) {ts.p.nv= nextVisible(ci);}
			grid.dragStart(ci, e, getOffset(ci));
			return false;
		}).click(function(e) {
			if (ts.p.disableClick) {
				ts.p.disableClick = false;
				return false;
			}
			var s = "th>div.ui-jqgrid-sortable",r,d;
			if (!ts.p.viewsortcols[2]) { s = "th>div>span>span.ui-grid-ico-sort"; }
			var t = $(e.target).closest(s);
			if (t.length != 1) { return; }
			var ci = getColumnHeaderIndex(this);
			if (!ts.p.viewsortcols[2]) { r=true;d=t.attr("sort"); }
			sortData( $('div',this)[0].id, ci, r, d);
			return false;
		});
		if (ts.p.sortable && $.fn.sortable) {
			try {
				$(ts).jqGrid("sortableColumns", thr);
			} catch (e){}
		}
		if(ts.p.footerrow) { tfoot += "</tr></tbody></table>"; }
		firstr += "</tr>";
		tbody = document.createElement("tbody");
		this.appendChild(tbody);
		$(this).addClass('ui-jqgrid-btable').append(firstr);
		firstr = null;
		var hTable = $("<table class='ui-jqgrid-htable' style='width:"+ts.p.tblwidth+"px' role='grid' aria-labelledby='gbox_"+this.id+"' cellspacing='0' cellpadding='0' border='0'></table>").append(thead),
		hg = (ts.p.caption && ts.p.hiddengrid===true) ? true : false,
		hb = $("<div class='ui-jqgrid-hbox" + (dir=="rtl" ? "-rtl" : "" )+"'></div>");
		thead = null;
		grid.hDiv = document.createElement("div");
		$(grid.hDiv)
			.css({ width: grid.width+"px"})
			.addClass("ui-state-default ui-jqgrid-hdiv")
			.append(hb);
		$(hb).append(hTable);
		hTable = null;
		if(hg) { $(grid.hDiv).hide(); }
		if(ts.p.pager){
			// TBD -- escape ts.p.pager here?
			if(typeof ts.p.pager == "string") {if(ts.p.pager.substr(0,1) !="#") { ts.p.pager = "#"+ts.p.pager;} }
			else { ts.p.pager = "#"+ $(ts.p.pager).attr("id");}
			$(ts.p.pager).css({width: grid.width+"px"}).appendTo(eg).addClass('ui-state-default ui-jqgrid-pager ui-corner-bottom');
			if(hg) {$(ts.p.pager).hide();}
			setPager(ts.p.pager,'');
		}
		if( ts.p.cellEdit === false && ts.p.hoverrows === true) {
		$(ts).bind('mouseover',function(e) {
			ptr = $(e.target).closest("tr.jqgrow");
			if($(ptr).attr("class") !== "ui-subgrid") {
				$(ptr).addClass("ui-state-hover");
			}
		}).bind('mouseout',function(e) {
			ptr = $(e.target).closest("tr.jqgrow");
			$(ptr).removeClass("ui-state-hover");
		});
		}
		var ri,ci, tdHtml;
		$(ts).before(grid.hDiv).click(function(e) {
			td = e.target;
			ptr = $(td,ts.rows).closest("tr.jqgrow");
			if($(ptr).length === 0 || ptr[0].className.indexOf( 'ui-state-disabled' ) > -1 || ($(td,ts).closest("table.ui-jqgrid-btable").attr('id') || '').replace("_frozen","") !== ts.id ) {
				return this;
			}
			var scb = $(td).hasClass("cbox"),
			cSel = $(ts).triggerHandler("jqGridBeforeSelectRow", [ptr[0].id, e]);
			cSel = (cSel === false || cSel === 'stop') ? false : true;
			if(cSel && $.isFunction(ts.p.beforeSelectRow)) { cSel = ts.p.beforeSelectRow.call(ts,ptr[0].id, e); }
			if (td.tagName == 'A' || ((td.tagName == 'INPUT' || td.tagName == 'TEXTAREA' || td.tagName == 'OPTION' || td.tagName == 'SELECT' ) && !scb) ) { return; }
			if(cSel === true) {
				ri = ptr[0].id;
				ci = $.jgrid.getCellIndex(td);
				tdHtml = $(td).closest("td,th").html();
				$(ts).triggerHandler("jqGridCellSelect", [ri,ci,tdHtml,e]);
				if($.isFunction(ts.p.onCellSelect)) {
					ts.p.onCellSelect.call(ts,ri,ci,tdHtml,e);
				}
				if(ts.p.cellEdit === true) {
					if(ts.p.multiselect && scb){
						$(ts).jqGrid("setSelection", ri ,true,e);
					} else {
						ri = ptr[0].rowIndex;
						try {$(ts).jqGrid("editCell",ri,ci,true);} catch (_) {}
					}
				} else if ( !ts.p.multikey ) {
					if(ts.p.multiselect && ts.p.multiboxonly) {
						if(scb){$(ts).jqGrid("setSelection",ri,true,e);}
						else {
							var frz = ts.p.frozenColumns ? ts.p.id+"_frozen" : "";
							$(ts.p.selarrrow).each(function(i,n){
								var ind = ts.rows.namedItem(n);
								$(ind).removeClass("ui-state-highlight");
								$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(n))[ts.p.useProp ? 'prop': 'attr']("checked", false);
								if(frz) {
									$("#"+$.jgrid.jqID(n), "#"+$.jgrid.jqID(frz)).removeClass("ui-state-highlight");
									$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+$.jgrid.jqID(n), "#"+$.jgrid.jqID(frz))[ts.p.useProp ? 'prop': 'attr']("checked", false);
								}
							});
							ts.p.selarrrow = [];
							$(ts).jqGrid("setSelection",ri,true,e);
						}
					} else {
						$(ts).jqGrid("setSelection",ri,true,e);
					}
				} else {
					if(e[ts.p.multikey]) {
						$(ts).jqGrid("setSelection",ri,true,e);
					} else if(ts.p.multiselect && scb) {
						scb = $("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+ri).is(":checked");
						$("#jqg_"+$.jgrid.jqID(ts.p.id)+"_"+ri)[ts.p.useProp ? 'prop' : 'attr']("checked", scb);
					}
				}
			}
		}).bind('reloadGrid', function(e,opts) {
			if(ts.p.treeGrid ===true) {	ts.p.datatype = ts.p.treedatatype;}
			if (opts && opts.current) {
				ts.grid.selectionPreserver(ts);
			}
			if(ts.p.datatype=="local"){ $(ts).jqGrid("resetSelection");  if(ts.p.data.length) { refreshIndex();} }
			else if(!ts.p.treeGrid) {
				ts.p.selrow=null;
				if(ts.p.multiselect) {ts.p.selarrrow =[];setHeadCheckBox(false);}
				ts.p.savedRow = [];
			}
			if(ts.p.scroll) {emptyRows.call(ts, true, false);}
			if (opts && opts.page) {
				var page = opts.page;
				if (page > ts.p.lastpage) { page = ts.p.lastpage; }
				if (page < 1) { page = 1; }
				ts.p.page = page;
				if (ts.grid.prevRowHeight) {
					ts.grid.bDiv.scrollTop = (page - 1) * ts.grid.prevRowHeight * ts.p.rowNum;
				} else {
					ts.grid.bDiv.scrollTop = 0;
				}
			}
			if (ts.grid.prevRowHeight && ts.p.scroll) {
				delete ts.p.lastpage;
				ts.grid.populateVisible();
			} else {
				ts.grid.populate();
			}
			if(ts.p._inlinenav===true) {$(ts).jqGrid('showAddEditButtons');}
			return false;
		})
		.dblclick(function(e) {
			td = e.target;
			ptr = $(td,ts.rows).closest("tr.jqgrow");
			if($(ptr).length === 0 ){return;}
			ri = ptr[0].rowIndex;
			ci = $.jgrid.getCellIndex(td);
			$(ts).triggerHandler("jqGridDblClickRow", [$(ptr).attr("id"),ri,ci,e]);
			 if(this.p){
			if ($.isFunction(this.p.ondblClickRow)) { ts.p.ondblClickRow.call(ts,$(ptr).attr("id"),ri,ci, e); }}
		})
		.bind('contextmenu', function(e) {
			td = e.target;
			ptr = $(td,ts.rows).closest("tr.jqgrow");
			if($(ptr).length === 0 ){return;}
			if(!ts.p.multiselect) {	$(ts).jqGrid("setSelection",ptr[0].id,true,e);	}
			ri = ptr[0].rowIndex;
			ci = $.jgrid.getCellIndex(td);
			$(ts).triggerHandler("jqGridRightClickRow", [$(ptr).attr("id"),ri,ci,e]);
			 if(this.p){
			if ($.isFunction(this.p.onRightClickRow)) { ts.p.onRightClickRow.call(ts,$(ptr).attr("id"),ri,ci, e); }}
		}).bind('hover', function(e) {
            td = e.target;
            ptr = $(td,ts.rows).closest("tr.jqgrow");
            if($(ptr).length === 0 ){return;}
            ri = ptr[0].rowIndex;
            ci = $.jgrid.getCellIndex(td);
            if(this.p){
            if ($.isFunction(this.p.onHoverRow)) { ts.p.onHoverRow.call(ts,$(ptr).attr("id"),ri,ci, e); }}
        });
		grid.bDiv = document.createElement("div");
		if(isMSIE) { if(String(ts.p.height).toLowerCase() === "auto") { ts.p.height = "100%"; } }
		$(grid.bDiv)
			.append($('<div style="position:relative;'+(isMSIE && $.browser.version < 8 ? "height:0.01%;" : "")+'"></div>').append('<div></div>').append(this))
			.addClass("ui-jqgrid-bdiv")
			.css({ height: ts.p.height+(isNaN(ts.p.height)?"":"px"), width: (grid.width)+"px"})
			.scroll(grid.scrollGrid);
		$("table:first",grid.bDiv).css({width:ts.p.tblwidth+"px"});
		if( isMSIE ) {
			if( $("tbody",this).size() == 2 ) { $("tbody:gt(0)",this).remove();}
			if( ts.p.multikey) {$(grid.bDiv).bind("selectstart",function(){return false;});}
		} else {
			if( ts.p.multikey) {$(grid.bDiv).bind("mousedown",function(){return false;});}
		}
		if(hg) {$(grid.bDiv).hide();}
		grid.cDiv = document.createElement("div");
		var arf = ts.p.hidegrid===true ? $("<a role='link' href='javascript:void(0)'/>").addClass('ui-jqgrid-titlebar-close HeaderButton').hover(
			function(){ arf.addClass('ui-state-hover');},
			function() {arf.removeClass('ui-state-hover');})
		.append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css((dir=="rtl"?"left":"right"),"0px") : "";
		$(grid.cDiv).append(arf).append("<span class='ui-jqgrid-title"+(dir=="rtl" ? "-rtl" :"" )+"'>"+ts.p.caption+"</span>")
		.addClass("ui-jqgrid-titlebar ui-widget-header ui-corner-top ui-helper-clearfix");
		$(grid.cDiv).insertBefore(grid.hDiv);
		if( ts.p.toolbar[0] ) {
			grid.uDiv = document.createElement("div");
			if(ts.p.toolbar[1] == "top") {$(grid.uDiv).insertBefore(grid.hDiv);}
			else if (ts.p.toolbar[1]=="bottom" ) {$(grid.uDiv).insertAfter(grid.hDiv);}
			if(ts.p.toolbar[1]=="both") {
				grid.ubDiv = document.createElement("div");
				$(grid.uDiv).insertBefore(grid.hDiv).addClass("ui-userdata ui-state-default").attr("id","t_"+this.id);
				$(grid.ubDiv).insertAfter(grid.hDiv).addClass("ui-userdata ui-state-default").attr("id","tb_"+this.id);
				if(hg)  {$(grid.ubDiv).hide();}
			} else {
				$(grid.uDiv).width(grid.width).addClass("ui-userdata ui-state-default").attr("id","t_"+this.id);
			}
			if(hg) {$(grid.uDiv).hide();}
		}
		if(ts.p.toppager) {
			ts.p.toppager = $.jgrid.jqID(ts.p.id)+"_toppager";
			grid.topDiv = $("<div id='"+ts.p.toppager+"'></div>")[0];
			ts.p.toppager = "#"+ts.p.toppager;
			$(grid.topDiv).insertBefore(grid.hDiv).addClass('ui-state-default ui-jqgrid-toppager').width(grid.width);
			setPager(ts.p.toppager,'_t');
		}
		if(ts.p.footerrow) {
			grid.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0];
			hb = $("<div class='ui-jqgrid-hbox"+(dir=="rtl"?"-rtl":"")+"'></div>");
			$(grid.sDiv).append(hb).insertAfter(grid.hDiv).width(grid.width);
			$(hb).append(tfoot);
			grid.footers = $(".ui-jqgrid-ftable",grid.sDiv)[0].rows[0].cells;
			if(ts.p.rownumbers) { grid.footers[0].className = 'ui-state-default jqgrid-rownum'; }
			if(hg) {$(grid.sDiv).hide();}
		}
		hb = null;
		if(ts.p.caption) {
			var tdt = ts.p.datatype;
			if(ts.p.hidegrid===true) {
				$(".ui-jqgrid-titlebar-close",grid.cDiv).click( function(e){
					var onHdCl = $.isFunction(ts.p.onHeaderClick),
					elems = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv",
					counter, self = this;
					if(ts.p.toolbar[0]===true) {
						if( ts.p.toolbar[1]=='both') {
							elems += ', #' + $(grid.ubDiv).attr('id');
						}
						elems += ', #' + $(grid.uDiv).attr('id');
					}
					counter = $(elems,"#gview_"+$.jgrid.jqID(ts.p.id)).length;

					if(ts.p.gridstate == 'visible') {
						$(elems,"#gbox_"+$.jgrid.jqID(ts.p.id)).slideUp("fast", function() {
							counter--;
							if (counter === 0) {
								$("span",self).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");
								ts.p.gridstate = 'hidden';
								if($("#gbox_"+$.jgrid.jqID(ts.p.id)).hasClass("ui-resizable")) { $(".ui-resizable-handle","#gbox_"+$.jgrid.jqID(ts.p.id)).hide(); }
								$(ts).triggerHandler("jqGridHeaderClick", [ts.p.gridstate,e]);
								if(onHdCl) {if(!hg) {ts.p.onHeaderClick.call(ts,ts.p.gridstate,e);}}
							}
						});
					} else if(ts.p.gridstate == 'hidden'){
						$(elems,"#gbox_"+$.jgrid.jqID(ts.p.id)).slideDown("fast", function() {
							counter--;
							if (counter === 0) {
								$("span",self).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");
								if(hg) {ts.p.datatype = tdt;populate();hg=false;}
								ts.p.gridstate = 'visible';
								if($("#gbox_"+$.jgrid.jqID(ts.p.id)).hasClass("ui-resizable")) { $(".ui-resizable-handle","#gbox_"+$.jgrid.jqID(ts.p.id)).show(); }
								$(ts).triggerHandler("jqGridHeaderClick", [ts.p.gridstate,e]);
								if(onHdCl) {if(!hg) {ts.p.onHeaderClick.call(ts,ts.p.gridstate,e);}}
							}
						});
					}
					return false;
				});
				if(hg) {ts.p.datatype="local"; $(".ui-jqgrid-titlebar-close",grid.cDiv).trigger("click");}
			}
		} else {$(grid.cDiv).hide();}
		$(grid.hDiv).after(grid.bDiv)
		.mousemove(function (e) {
			if(grid.resizing){grid.dragMove(e);return false;}
		});
		$(".ui-jqgrid-labels",grid.hDiv).bind("selectstart", function () { return false; });
		$(document).mouseup(function () {
			if(grid.resizing) {	grid.dragEnd(); return false;}
			return true;
		});
		ts.formatCol = formatCol;
		ts.sortData = sortData;
		ts.updatepager = updatepager;
		ts.refreshIndex = refreshIndex;
		ts.setHeadCheckBox = setHeadCheckBox;
		ts.constructTr = constructTr;
		ts.formatter = function ( rowId, cellval , colpos, rwdat, act){return formatter(rowId, cellval , colpos, rwdat, act);};
		$.extend(grid,{populate : populate, emptyRows: emptyRows});
		this.grid = grid;
		ts.addXmlData = function(d) {addXmlData(d,ts.grid.bDiv);};
		ts.addJSONData = function(d) {addJSONData(d,ts.grid.bDiv);};
		this.grid.cols = this.rows[0].cells;

		populate();ts.p.hiddengrid=false;
		$(window).unload(function () {
			ts = null;
		});
	});
};
$.jgrid.extend({
	setGridParam : function (newParams){
		return this.each(function(){
			if (this.grid && typeof(newParams) === 'object') {$.extend(true,this.p,newParams);}
		});
	},
	getDataIDs : function () {
		var ids=[], i=0, len, j=0;
		this.each(function(){
			len = this.rows.length;
			if(len && len>0){
				while(i<len) {
					if($(this.rows[i]).hasClass('jqgrow')) {
						ids[j] = this.rows[i].id;
						j++;
					}
					i++;
				}
			}
		});
		return ids;
	},
	setSelection : function(selection,onsr, e) {
		return this.each(function(){
			var $t = this, stat,pt, ner, ia, tpsr, fid;
			if(selection === undefined) { return; }
			onsr = onsr === false ? false : true;
			pt=$t.rows.namedItem(selection+"");
			if(!pt || !pt.className || pt.className.indexOf( 'ui-state-disabled' ) > -1 ) { return; }
			function scrGrid(iR){
				var ch = $($t.grid.bDiv)[0].clientHeight,
				st = $($t.grid.bDiv)[0].scrollTop,
				rpos = $t.rows[iR].offsetTop,
				rh = $t.rows[iR].clientHeight;
				if(rpos+rh >= ch+st) { $($t.grid.bDiv)[0].scrollTop = rpos-(ch+st)+rh+st; }
				else if(rpos < ch+st) {
					if(rpos < st) {
						$($t.grid.bDiv)[0].scrollTop = rpos;
					}
				}
			}
			if($t.p.scrollrows===true) {
				ner = $t.rows.namedItem(selection).rowIndex;
				if(ner >=0 ){
					scrGrid(ner);
				}
			}
			if($t.p.frozenColumns === true ) {
				fid = $t.p.id+"_frozen";
			}
			if(!$t.p.multiselect) {	
				if(pt.className !== "ui-subgrid") {
					if( $t.p.selrow != pt.id) {
						$($t.rows.namedItem($t.p.selrow)).removeClass("ui-state-highlight").attr({"aria-selected":"false", "tabindex" : "-1"});
						$(pt).addClass("ui-state-highlight").attr({"aria-selected":"true", "tabindex" : "0"});//.focus();
						if(fid) {
							$("#"+$.jgrid.jqID($t.p.selrow), "#"+$.jgrid.jqID(fid)).removeClass("ui-state-highlight");
							$("#"+$.jgrid.jqID(selection), "#"+$.jgrid.jqID(fid)).addClass("ui-state-highlight");
						}
						stat = true;
					} else {
						stat = false;
					}
					$t.p.selrow = pt.id;
					$($t).triggerHandler("jqGridSelectRow", [pt.id, stat, e]);
					if( $t.p.onSelectRow && onsr) { $t.p.onSelectRow.call($t, pt.id, stat, e); }
				}
			} else {
				//unselect selectall checkbox when deselecting a specific row
				$t.setHeadCheckBox( false );
				$t.p.selrow = pt.id;
				ia = $.inArray($t.p.selrow,$t.p.selarrrow);
				if (  ia === -1 ){
					if(pt.className !== "ui-subgrid") { $(pt).addClass("ui-state-highlight").attr("aria-selected","true");}
					stat = true;
					$t.p.selarrrow.push($t.p.selrow);
				} else {
					if(pt.className !== "ui-subgrid") { $(pt).removeClass("ui-state-highlight").attr("aria-selected","false");}
					stat = false;
					$t.p.selarrrow.splice(ia,1);
					tpsr = $t.p.selarrrow[0];
					$t.p.selrow = (tpsr === undefined) ? null : tpsr;
				}
				$("#jqg_"+$.jgrid.jqID($t.p.id)+"_"+$.jgrid.jqID(pt.id))[$t.p.useProp ? 'prop': 'attr']("checked",stat);
				if(fid) {
					if(ia === -1) {
						$("#"+$.jgrid.jqID(selection), "#"+$.jgrid.jqID(fid)).addClass("ui-state-highlight");
					} else {
						$("#"+$.jgrid.jqID(selection), "#"+$.jgrid.jqID(fid)).removeClass("ui-state-highlight");
					}
					$("#jqg_"+$.jgrid.jqID($t.p.id)+"_"+$.jgrid.jqID(selection), "#"+$.jgrid.jqID(fid))[$t.p.useProp ? 'prop': 'attr']("checked",stat);
				}
				$($t).triggerHandler("jqGridSelectRow", [pt.id, stat, e]);
				if( $t.p.onSelectRow && onsr) { $t.p.onSelectRow.call($t, pt.id , stat, e); }
			}
		});
	},
	resetSelection : function( rowid ){
		return this.each(function(){
			var t = this, ind, sr, fid;
			if( t.p.frozenColumns === true ) {
				fid = t.p.id+"_frozen";
			}
			if(typeof(rowid) !== "undefined" ) {
				sr = rowid === t.p.selrow ? t.p.selrow : rowid;
				$("#"+$.jgrid.jqID(t.p.id)+" tbody:first tr#"+$.jgrid.jqID(sr)).removeClass("ui-state-highlight").attr("aria-selected","false");
				if (fid) { $("#"+$.jgrid.jqID(sr), "#"+$.jgrid.jqID(fid)).removeClass("ui-state-highlight"); }
				if(t.p.multiselect) {
					$("#jqg_"+$.jgrid.jqID(t.p.id)+"_"+$.jgrid.jqID(sr), "#"+$.jgrid.jqID(t.p.id))[t.p.useProp ? 'prop': 'attr']("checked",false);
					if(fid) { $("#jqg_"+$.jgrid.jqID(t.p.id)+"_"+$.jgrid.jqID(sr), "#"+$.jgrid.jqID(fid))[t.p.useProp ? 'prop': 'attr']("checked",false); }
					t.setHeadCheckBox( false);
					for(var i in t.p.selarrrow){
						if(t.p.selarrrow[i] == rowid){
							t.p.selarrrow.splice(i,1);
						}
					}
				}
				sr = null;
			} else if(!t.p.multiselect) {
				if(t.p.selrow) {
					$("#"+$.jgrid.jqID(t.p.id)+" tbody:first tr#"+$.jgrid.jqID(t.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected","false");
					if(fid) { $("#"+$.jgrid.jqID(t.p.selrow), "#"+$.jgrid.jqID(fid)).removeClass("ui-state-highlight"); }
					t.p.selrow = null;
				}
			} else {
				$(t.p.selarrrow).each(function(i,n){
					ind = t.rows.namedItem(n);
					$(ind).removeClass("ui-state-highlight").attr("aria-selected","false");
					$("#jqg_"+$.jgrid.jqID(t.p.id)+"_"+$.jgrid.jqID(n))[t.p.useProp ? 'prop': 'attr']("checked",false);
					if(fid) { 
						$("#"+$.jgrid.jqID(n), "#"+$.jgrid.jqID(fid)).removeClass("ui-state-highlight"); 
						$("#jqg_"+$.jgrid.jqID(t.p.id)+"_"+$.jgrid.jqID(n), "#"+$.jgrid.jqID(fid))[t.p.useProp ? 'prop': 'attr']("checked",false);
					}
				});
				t.setHeadCheckBox( false );
				t.p.selarrrow = [];
			}
			if(t.p.cellEdit === true) {
				if(parseInt(t.p.iCol,10)>=0  && parseInt(t.p.iRow,10)>=0) {
					$("td:eq("+t.p.iCol+")",t.rows[t.p.iRow]).removeClass("edit-cell ui-state-highlight");
					$(t.rows[t.p.iRow]).removeClass("selected-row ui-state-hover");
				}
			}
			t.p.savedRow = [];
		});
	},
	getRowData : function( rowid ) {
		var res = {}, resall, getall=false, len, j=0;
		this.each(function(){
			var $t = this,nm,ind;
			if(typeof(rowid) == 'undefined') {
				getall = true;
				resall = [];
				len = $t.rows.length;
			} else {
				ind = $t.rows.namedItem(rowid);
				if(!ind) { return res; }
				len = 2;
			}
			while(j<len){
				if(getall) { ind = $t.rows[j]; }
				if( $(ind).hasClass('jqgrow') ) {
					$('td[role="gridcell"]',ind).each( function(i) {
						nm = $t.p.colModel[i].name;
						if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
							if($t.p.treeGrid===true && nm == $t.p.ExpandColumn) {
								res[nm] = $.jgrid.htmlDecode($("span:first",this).html());
							} else {
								try {
									res[nm] = $.unformat.call($t,this,{rowId:ind.id, colModel:$t.p.colModel[i]},i);
								} catch (e){
									res[nm] = $.jgrid.htmlDecode($(this).html());
								}
							}
						}
					});
					if(getall) { resall.push(res); res={}; }
				}
				j++;
			}
		});
		return resall ? resall: res;
	},
	delRowData : function(rowid) {
		var success = false, rowInd, ia, ri;
		this.each(function() {
			var $t = this;
			rowInd = $t.rows.namedItem(rowid);
			if(!rowInd) {return false;}
			else {
				ri = rowInd.rowIndex;
				$(rowInd).remove();
				$t.p.records--;
				$t.p.reccount--;
				var indexHelp = $t.p._index;
				delete indexHelp[rowid];
				var i = 0;
				for(var p in indexHelp){
					indexHelp[p] = i++;	
				}
				$t.updatepager(true,false);
				success=true;
				if($t.p.multiselect) {
					ia = $.inArray(rowid,$t.p.selarrrow);
					if(ia != -1) { $t.p.selarrrow.splice(ia,1);}
				}
				if(rowid == $t.p.selrow) {$t.p.selrow=null;}
			}
			if($t.p.datatype == 'local') {
				var id = $.jgrid.stripPref($t.p.idPrefix, rowid),
				pos = $t.p._index[id];
				if(typeof(pos) != 'undefined') {
					$t.p.data.splice(pos,1);
					$t.refreshIndex();
				}
			}
			if( $t.p.altRows === true && success ) {
				var cn = $t.p.altclass;
				$($t.rows).each(function(i){
					if(i % 2 ==1) { $(this).addClass(cn); }
					else { $(this).removeClass(cn); }
				});
			}
		});
		return success;
	},
	addRowData : function(rowid,rdata,pos,src) {
		if(!pos) {pos = "last";}
		var success = false, nm, row, gi, si, ni,sind, i, v, prp="", aradd, cnm, cn, data, cm, id;
		if(rdata) {
			if($.isArray(rdata)) {
				aradd=true;
				pos = "last";
				cnm = rowid;
			} else {
				rdata = [rdata];
				aradd = false;
			}
			this.each(function() {
				var t = this, datalen = rdata.length;
				ni = t.p.rownumbers===true ? 1 :0;
				gi = t.p.multiselect ===true ? 1 :0;
				si = t.p.subGrid===true ? 1 :0;
				if(!aradd) {
					if(typeof(rowid) != 'undefined') { rowid = rowid+"";}
					else {
						rowid = $.jgrid.randId();
						if(t.p.keyIndex !== false) {
							cnm = t.p.colModel[t.p.keyIndex+gi+si+ni].name;
							if(typeof rdata[0][cnm] != "undefined") { rowid = rdata[0][cnm]; }
						}
					}
				}
				cn = t.p.altclass;
				var k = 0, cna ="", lcdata = {},
				air = $.isFunction(t.p.afterInsertRow) ? true : false;
				while(k < datalen) {
					data = rdata[k];
					row=[];
					if(aradd) {
						try {rowid = data[cnm];}
						catch (e) {rowid = $.jgrid.randId();}
						cna = t.p.altRows === true ?  (t.rows.length-1)%2 === 0 ? cn : "" : "";
					}
					id = rowid;
					rowid  = t.p.idPrefix + rowid;
					if(ni){
						prp = t.formatCol(0,1,'',null,rowid, true);
						row[row.length] = "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" "+prp+">0</td>";
					}
					if(gi) {
						v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+t.p.id+"_"+rowid+"\" value=\"" + rowid +"\" name=\"jqg_"+ t.p.id +"\" class=\"cbox\"/>";						
						prp = t.formatCol(ni,1,'', null, rowid, true);
						row[row.length] = "<td role=\"gridcell\" "+prp+">"+v+"</td>";
					}
					if(si) {
						row[row.length] = $(t).jqGrid("addSubGridCell",gi+ni,1);
					}
					for(i = gi+si+ni; i < t.p.colModel.length;i++){
						cm = t.p.colModel[i];
						nm = cm.name;
						lcdata[nm] = data[nm];
						v = t.formatter( rowid, $.jgrid.getAccessor(data,nm), i, data );
						prp = t.formatCol(i,1,v, data, rowid, true);
						row[row.length] = "<td role=\"gridcell\" "+prp+">"+v+"</td>";
					}
					row.unshift( t.constructTr(rowid, false, cna, lcdata, lcdata ) );
					row[row.length] = "</tr>";
					if(t.rows.length === 0){
						$("table:first",t.grid.bDiv).append(row.join(''));
					} else {
					switch (pos) {
						case 'last':
							$(t.rows[t.rows.length-1]).after(row.join(''));
							sind = t.rows.length-1;
							break;
						case 'first':
							$(t.rows[0]).after(row.join(''));
							sind = 1;
							break;
						case 'after':
							sind = t.rows.namedItem(src);
							if (sind) {
								if($(t.rows[sind.rowIndex+1]).hasClass("ui-subgrid")) { $(t.rows[sind.rowIndex+1]).after(row); }
								else { $(sind).after(row.join('')); }
							}
							sind++;
							break;
						case 'before':
							sind = t.rows.namedItem(src);
							if(sind) {$(sind).before(row.join(''));sind=sind.rowIndex;}
							sind--;
							break;
					}
					}
					if(t.p.subGrid===true) {
						$(t).jqGrid("addSubGrid",gi+ni, sind);
					}
					t.p.records++;
					t.p.reccount++;
					$(t).triggerHandler("jqGridAfterInsertRow", [rowid,data,data]);
					if(air) { t.p.afterInsertRow.call(t,rowid,data,data); }
					k++;
					if(t.p.datatype == 'local') {
						lcdata[t.p.localReader.id] = id;
						t.p._index[id] = t.p.data.length;
						t.p.data.push(lcdata);
						lcdata = {};
					}
				}
				if( t.p.altRows === true && !aradd) {
					if (pos == "last") {
						if ((t.rows.length-1)%2 == 1)  {$(t.rows[t.rows.length-1]).addClass(cn);}
					} else {
						$(t.rows).each(function(i){
							if(i % 2 ==1) { $(this).addClass(cn); }
							else { $(this).removeClass(cn); }
						});
					}
				}
				t.updatepager(true,true);
				success = true;
			});
		}
		return success;
	},
	footerData : function(action,data, format) {
		var nm, success=false, res={}, title;
		function isEmpty(obj) {
			for(var i in obj) {
				if (obj.hasOwnProperty(i)) { return false; }
			}
			return true;
		}
		if(typeof(action) == "undefined") { action = "get"; }
		if(typeof(format) != "boolean") { format  = true; }
		action = action.toLowerCase();
		this.each(function(){
			var t = this, vl;
			if(!t.grid || !t.p.footerrow) {return false;}
			if(action == "set") { if(isEmpty(data)) { return false; } }
			success=true;
			$(this.p.colModel).each(function(i){
				nm = this.name;
				if(action == "set") {
					if( data[nm] !== undefined) {
						vl = format ? t.formatter( "", data[nm], i, data, 'edit') : data[nm];
						title = this.title ? {"title":$.jgrid.stripHtml(vl)} : {};
						$("tr.footrow td:eq("+i+")",t.grid.sDiv).html(vl).attr(title);
						success = true;
					}
				} else if(action == "get") {
					res[nm] = $("tr.footrow td:eq("+i+")",t.grid.sDiv).html();
				}
			});
		});
		return action == "get" ? res : success;
	},
	showHideCol : function(colname,show) {
		return this.each(function() {
			var $t = this, fndh=false, brd=$.jgrid.cellWidth()? 0: $t.p.cellLayout, cw;
			if (!$t.grid ) {return;}
			if( typeof colname === 'string') {colname=[colname];}
			show = show != "none" ? "" : "none";
			var sw = show === "" ? true :false,
			gh = $t.p.groupHeader && (typeof $t.p.groupHeader === 'object' || $.isFunction($t.p.groupHeader) );
			if(gh) { $($t).jqGrid('destroyGroupHeader', false); }
			$(this.p.colModel).each(function(i) {
				if ($.inArray(this.name,colname) !== -1 && this.hidden === sw) {
					if($t.p.frozenColumns === true && this.frozen === true) {
						return true;
					}
					$("tr",$t.grid.hDiv).each(function(){
						$(this.cells[i]).css("display", show);
					});
					$($t.rows).each(function(){
						if (!$(this).hasClass("jqgroup")) {
							$(this.cells[i]).css("display", show);
						}
					});
					if($t.p.footerrow) { $("tr.footrow td:eq("+i+")", $t.grid.sDiv).css("display", show); }
					cw =  parseInt(this.width,10);
					if(show === "none") {
						$t.p.tblwidth -= cw+brd;
					} else {
						$t.p.tblwidth += cw+brd;
					}
					this.hidden = !sw;
					fndh=true;
					$($t).triggerHandler("jqGridShowHideCol", [sw,this.name,i]);
				}
			});
			if(fndh===true) {
				if($t.p.shrinkToFit === true && !isNaN($t.p.height)) { $t.p.tblwidth += parseInt($t.p.scrollOffset,10);}
				$($t).jqGrid("setGridWidth",$t.p.shrinkToFit === true ? $t.p.tblwidth : $t.p.width );
			}
			if( gh )  {
				$($t).jqGrid('setGroupHeaders',$t.p.groupHeader);
			}
		});
	},
	hideCol : function (colname) {
		return this.each(function(){$(this).jqGrid("showHideCol",colname,"none");});
	},
	showCol : function(colname) {
		return this.each(function(){$(this).jqGrid("showHideCol",colname,"");});
	},
	remapColumns : function(permutation, updateCells, keepHeader)
	{
		function resortArray(a) {
			var ac;
			if (a.length) {
				ac = $.makeArray(a);
			} else {
				ac = $.extend({}, a);
			}
			$.each(permutation, function(i) {
				a[i] = ac[this];
			});
		}
		var ts = this.get(0);
		function resortRows(parent, clobj) {
			$(">tr"+(clobj||""), parent).each(function() {
				var row = this;
				var elems = $.makeArray(row.cells);
				$.each(permutation, function() {
					var e = elems[this];
					if (e) {
						row.appendChild(e);
					}
				});
			});
		}
		resortArray(ts.p.colModel);
		resortArray(ts.p.colNames);
		resortArray(ts.grid.headers);
		resortRows($("thead:first", ts.grid.hDiv), keepHeader && ":not(.ui-jqgrid-labels)");
		if (updateCells) {
			resortRows($("#"+$.jgrid.jqID(ts.p.id)+" tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
		}
		if (ts.p.footerrow) {
			resortRows($("tbody:first", ts.grid.sDiv));
		}
		if (ts.p.remapColumns) {
			if (!ts.p.remapColumns.length){
				ts.p.remapColumns = $.makeArray(permutation);
			} else {
				resortArray(ts.p.remapColumns);
			}
		}
		ts.p.lastsort = $.inArray(ts.p.lastsort, permutation);
		if(ts.p.treeGrid) { ts.p.expColInd = $.inArray(ts.p.expColInd, permutation); }
		$(ts).triggerHandler("jqGridRemapColumns", [permutation, updateCells, keepHeader]);
	},

	setCaption : function (newcap){
		return this.each(function(){
			this.p.caption=newcap;
			$("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl",this.grid.cDiv).html(newcap);
			$(this.grid.cDiv).show();
		});
	},
	setLabel : function(colname, nData, prop, attrp ){
		return this.each(function(){
			var $t = this, pos=-1;
			if(!$t.grid) {return;}
			if(typeof(colname) != "undefined") {
				$($t.p.colModel).each(function(i){
					if (this.name == colname) {
						pos = i;return false;
					}
				});
			} else { return; }
			if(pos>=0) {
				var thecol = $("tr.ui-jqgrid-labels th:eq("+pos+")",$t.grid.hDiv);
				if (nData){
					var ico = $(".s-ico",thecol);
					$("[id^=jqgh_]",thecol).empty().html(nData).append(ico);
					$t.p.colNames[pos] = nData;
				}
				if (prop) {
					if(typeof prop === 'string') {$(thecol).addClass(prop);} else {$(thecol).css(prop);}
				}
				if(typeof attrp === 'object') {$(thecol).attr(attrp);}
			}
		});
	},
	setCell : function(rowid,colname,nData,cssp,attrp, forceupd) {
		return this.each(function(){
			var $t = this, pos =-1,v, title;
			if(!$t.grid) {return;}
			if(isNaN(colname)) {
				$($t.p.colModel).each(function(i){
					if (this.name == colname) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(colname,10);}
			if(pos>=0) {
				var ind = $t.rows.namedItem(rowid);
				if (ind){
					var tcell = $("td:eq("+pos+")",ind);
					if(nData !== "" || forceupd === true) {
						v = $t.formatter(rowid, nData, pos,ind,'edit');
						title = $t.p.colModel[pos].title ? {"title":$.jgrid.stripHtml(v)} : {};
						if($t.p.treeGrid && $(".tree-wrap",$(tcell)).length>0) {
							$("span",$(tcell)).html(v).attr(title);
						} else {
							$(tcell).html(v).attr(title);
						}
						if($t.p.datatype == "local") {
							var cm = $t.p.colModel[pos], index;
							nData = cm.formatter && typeof(cm.formatter) === 'string' && cm.formatter == 'date' ? $.unformat.date.call($t,nData,cm) : nData;
							index = $t.p._index[rowid];
							if(typeof index  != "undefined") {
								$t.p.data[index][cm.name] = nData;
							}
						}
					}
					if(typeof cssp === 'string'){
						$(tcell).addClass(cssp);
					} else if(cssp) {
						$(tcell).css(cssp);
					}
					if(typeof attrp === 'object') {$(tcell).attr(attrp);}
				}
			}
		});
	},
	getCell : function(rowid,col) {
		var ret = false;
		this.each(function(){
			var $t=this, pos=-1;
			if(!$t.grid) {return;}
			if(isNaN(col)) {
				$($t.p.colModel).each(function(i){
					if (this.name === col) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(col,10);}
			if(pos>=0) {
				var ind = $t.rows.namedItem(rowid);
				if(ind) {
					try {
						ret = $.unformat.call($t,$("td:eq("+pos+")",ind),{rowId:ind.id, colModel:$t.p.colModel[pos]},pos);
					} catch (e){
						ret = $.jgrid.htmlDecode($("td:eq("+pos+")",ind).html());
					}
				}
			}
		});
		return ret;
	},
	getCol : function (col, obj, mathopr) {
		var ret = [], val, sum=0, min, max, v;
		obj = typeof (obj) != 'boolean' ? false : obj;
		if(typeof mathopr == 'undefined') { mathopr = false; }
		this.each(function(){
			var $t=this, pos=-1;
			if(!$t.grid) {return;}
			if(isNaN(col)) {
				$($t.p.colModel).each(function(i){
					if (this.name === col) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(col,10);}
			if(pos>=0) {
				var ln = $t.rows.length, i =0;
				if (ln && ln>0){
					while(i<ln){
						if($($t.rows[i]).hasClass('jqgrow')) {
							try {
								val = $.unformat.call($t,$($t.rows[i].cells[pos]),{rowId:$t.rows[i].id, colModel:$t.p.colModel[pos]},pos);
							} catch (e) {
								val = $.jgrid.htmlDecode($t.rows[i].cells[pos].innerHTML);
							}
							if(mathopr) {
								v = parseFloat(val);
								sum += v;
								if(i===0) {
									min = v;
									max = v;
								} else {
									min = Math.min(min, v);
									max = Math.max(max, v);
								}
							}
							else if(obj) { ret.push( {id:$t.rows[i].id,value:val} ); }
							else { ret.push( val ); }
						}
						i++;
					}
					if(mathopr) {
						switch(mathopr.toLowerCase()){
							case 'sum': ret =sum; break;
							case 'avg': ret = sum/ln; break;
							case 'count': ret = ln; break;
							case 'min': ret = min; break;
							case 'max': ret = max; break;
						}
					}
				}
			}
		});
		return ret;
	},
	clearGridData : function(clearfooter) {
		return this.each(function(){
			var $t = this;
			if(!$t.grid) {return;}
			if(typeof clearfooter != 'boolean') { clearfooter = false; }
			if($t.p.deepempty) {$("#"+$.jgrid.jqID($t.p.id)+" tbody:first tr:gt(0)").remove();}
			else {
				var trf = $("#"+$.jgrid.jqID($t.p.id)+" tbody:first tr:first")[0];
				$("#"+$.jgrid.jqID($t.p.id)+" tbody:first").empty().append(trf);
			}
			if($t.p.footerrow && clearfooter) { $(".ui-jqgrid-ftable td",$t.grid.sDiv).html("&#160;"); }
			$t.p.selrow = null; $t.p.selarrrow= []; $t.p.savedRow = [];
			$t.p.records = 0;$t.p.page=1;$t.p.lastpage=0;$t.p.reccount=0;
			$t.p.data = []; $t.p._index = {};
			$t.updatepager(true,false);
		});
	},
	getInd : function(rowid,rc){
		var ret =false,rw;
		this.each(function(){
			rw = this.rows.namedItem(rowid);
			if(rw) {
				ret = rc===true ? rw: rw.rowIndex;
			}
		});
		return ret;
	},
	bindKeys : function( settings ){
		var o = $.extend({
			onEnter: null,
			onSpace: null,
			onLeftKey: null,
			onRightKey: null,
			scrollingRows : true
		},settings || {});
		return this.each(function(){
			var $t = this;
			if( !$('body').is('[role]') ){$('body').attr('role','application');}
			$t.p.scrollrows = o.scrollingRows;
			$($t).keydown(function(event){
				var target = $($t).find('tr[tabindex=0]')[0], id, r, mind,
				expanded = $t.p.treeReader.expanded_field;
				//check for arrow keys
				if(target) {
					mind = $t.p._index[target.id];
					if(event.keyCode === 37 || event.keyCode === 38 || event.keyCode === 39 || event.keyCode === 40){
						// up key
						if(event.keyCode === 38 ){
							r = target.previousSibling;
							id = "";
							if(r) {
								if($(r).is(":hidden")) {
									while(r) {
										r = r.previousSibling;
										if(!$(r).is(":hidden") && $(r).hasClass('jqgrow')) {id = r.id;break;}
									}
								} else {
									id = r.id;
								}
							}
							$($t).jqGrid('setSelection', id, true, event);
						}
						//if key is down arrow
						if(event.keyCode === 40){
							r = target.nextSibling;
							id ="";
							if(r) {
								if($(r).is(":hidden")) {
									while(r) {
										r = r.nextSibling;
										if(!$(r).is(":hidden") && $(r).hasClass('jqgrow') ) {id = r.id;break;}
									}
								} else {
									id = r.id;
								}
							}
							$($t).jqGrid('setSelection', id, true, event);
						}
						// left
						if(event.keyCode === 37 ){
							if($t.p.treeGrid && $t.p.data[mind][expanded]) {
								$(target).find("div.treeclick").trigger('click');
							}
							$($t).triggerHandler("jqGridKeyLeft", [$t.p.selrow]);
							if($.isFunction(o.onLeftKey)) {
								o.onLeftKey.call($t, $t.p.selrow);
							}
						}
						// right
						if(event.keyCode === 39 ){
							if($t.p.treeGrid && !$t.p.data[mind][expanded]) {
								$(target).find("div.treeclick").trigger('click');
							}
							$($t).triggerHandler("jqGridKeyRight", [$t.p.selrow]);
							if($.isFunction(o.onRightKey)) {
								o.onRightKey.call($t, $t.p.selrow);
							}
						}
					}
					//check if enter was pressed on a grid or treegrid node
					else if( event.keyCode === 13 ){
						$($t).triggerHandler("jqGridKeyEnter", [$t.p.selrow]);
						if($.isFunction(o.onEnter)) {
							o.onEnter.call($t, $t.p.selrow);
						}
					} else if(event.keyCode === 32) {
						$($t).triggerHandler("jqGridKeySpace", [$t.p.selrow]);
						if($.isFunction(o.onSpace)) {
							o.onSpace.call($t, $t.p.selrow);
						}
					}
				}
			});
		});
	},
	unbindKeys : function(){
		return this.each(function(){
			$(this).unbind('keydown');
		});
	},
	getLocalRow : function (rowid) {
		var ret = false, ind;
		this.each(function(){
			if(typeof(rowid) !== "undefined") {
				ind = this.p._index[rowid];
				if(ind >= 0 ) {
					ret = this.p.data[ind];
				}
			}
		});
		return ret;
	}
});
})(jQuery);
(function($){
/**
 * jqGrid extension for custom methods
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * 
 * Wildraid wildraid@mail.ru
 * Oleg Kiriljuk oleg.kiriljuk@ok-soft-gmbh.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/
/*global jQuery, $ */
"use strict";
$.jgrid.extend({
	getColProp : function(colname){
		var ret ={}, $t = this[0];
		if ( !$t.grid ) { return false; }
		var cM = $t.p.colModel;
		for ( var i =0;i<cM.length;i++ ) {
			if ( cM[i].name == colname ) {
				ret = cM[i];
				break;
			}
		}
		return ret;
	},
	setColProp : function(colname, obj){
		//do not set width will not work
		return this.each(function(){
			if ( this.grid ) {
				if ( obj ) {
					var cM = this.p.colModel;
					for ( var i =0;i<cM.length;i++ ) {
						if ( cM[i].name == colname ) {
							$.extend(this.p.colModel[i],obj);
							break;
						}
					}
				}
			}
		});
	},
	sortGrid : function(colname,reload, sor){
		return this.each(function(){
			var $t=this,idx=-1;
			if ( !$t.grid ) { return;}
			if ( !colname ) { colname = $t.p.sortname; }
			for ( var i=0;i<$t.p.colModel.length;i++ ) {
				if ( $t.p.colModel[i].index == colname || $t.p.colModel[i].name==colname ) {
					idx = i;
					break;
				}
			}
			if ( idx!=-1 ){
				var sort = $t.p.colModel[idx].sortable;
				if ( typeof sort !== 'boolean' ) { sort =  true; }
				if ( typeof reload !=='boolean' ) { reload = false; }
				if ( sort ) { $t.sortData("jqgh_"+$t.p.id+"_" + colname, idx, reload, sor); }
			}
		});
	},
	GridDestroy : function () {
		return this.each(function(){
			if ( this.grid ) { 
				if ( this.p.pager ) { // if not part of grid
					$(this.p.pager).remove();
				}
				try {
					$("#gbox_"+$.jgrid.jqID(this.id)).remove();
				} catch (_) {}
			}
		});
	},
	GridUnload : function(){
		return this.each(function(){
			if ( !this.grid ) {return;}
			var defgrid = {id: $(this).attr('id'),cl: $(this).attr('class')};
			if (this.p.pager) {
				$(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager corner-bottom");
			}
			var newtable = document.createElement('table');
			$(newtable).attr({id:defgrid.id});
			newtable.className = defgrid.cl;
			var gid = $.jgrid.jqID(this.id);
			$(newtable).removeClass("ui-jqgrid-btable");
			if( $(this.p.pager).parents("#gbox_"+gid).length === 1 ) {
				$(newtable).insertBefore("#gbox_"+gid).show();
				$(this.p.pager).insertBefore("#gbox_"+gid);
			} else {
				$(newtable).insertBefore("#gbox_"+gid).show();
			}
			$("#gbox_"+gid).remove();
		});
	},
    setGridState : function(state) {
		return this.each(function(){
			if ( !this.grid ) {return;}
			var $t = this;
			if(state == 'hidden'){
				$(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv","#gview_"+$.jgrid.jqID($t.p.id)).slideUp("fast");
				if($t.p.pager) {$($t.p.pager).slideUp("fast");}
				if($t.p.toppager) {$($t.p.toppager).slideUp("fast");}
				if($t.p.toolbar[0]===true) {
					if( $t.p.toolbar[1]=='both') {
						$($t.grid.ubDiv).slideUp("fast");
					}
					$($t.grid.uDiv).slideUp("fast");
				}
				if($t.p.footerrow) { $(".ui-jqgrid-sdiv","#gbox_"+$.jgrid.jqID($t.p.id)).slideUp("fast"); }
				$(".ui-jqgrid-titlebar-close span",$t.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");
				$t.p.gridstate = 'hidden';
			} else if(state=='visible') {
				$(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv","#gview_"+$.jgrid.jqID($t.p.id)).slideDown("fast");
				if($t.p.pager) {$($t.p.pager).slideDown("fast");}
				if($t.p.toppager) {$($t.p.toppager).slideDown("fast");}
				if($t.p.toolbar[0]===true) {
					if( $t.p.toolbar[1]=='both') {
						$($t.grid.ubDiv).slideDown("fast");
					}
					$($t.grid.uDiv).slideDown("fast");
				}
				if($t.p.footerrow) { $(".ui-jqgrid-sdiv","#gbox_"+$.jgrid.jqID($t.p.id)).slideDown("fast"); }
				$(".ui-jqgrid-titlebar-close span",$t.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");
				$t.p.gridstate = 'visible';
			}

		});
	},
	filterToolbar : function(p){
		p = $.extend({
			autosearch: true,
			searchOnEnter : true,
			beforeSearch: null,
			afterSearch: null,
			beforeClear: null,
			afterClear: null,
			searchurl : '',
			stringResult: false,
			groupOp: 'AND',
			defaultSearch : "bw"
		},p  || {});
		return this.each(function(){
			var $t = this;
			if(this.ftoolbar) { return; }
			var triggerToolbar = function() {
				var sdata={}, j=0, v, nm, sopt={},so;
				$.each($t.p.colModel,function(){
					nm = this.index || this.name;
					so  = (this.searchoptions && this.searchoptions.sopt) ? this.searchoptions.sopt[0] : this.stype=='select'?  'eq' : p.defaultSearch;
					v = $("#gs_"+$.jgrid.jqID(this.name), (this.frozen===true && $t.p.frozenColumns === true) ?  $t.grid.fhDiv : $t.grid.hDiv).val();
					if(v) {
						sdata[nm] = v;
						sopt[nm] = so;
						j++;
					} else {
						try {
							delete $t.p.postData[nm];
						} catch (z) {}
					}
				});
				var sd =  j>0 ? true : false;
				if(p.stringResult === true || $t.p.datatype == "local") {
					var ruleGroup = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":[";
					var gi=0;
					$.each(sdata,function(i,n){
						if (gi > 0) {ruleGroup += ",";}
						ruleGroup += "{\"field\":\"" + i + "\",";
						ruleGroup += "\"op\":\"" + sopt[i] + "\",";
						n+="";
						ruleGroup += "\"data\":\"" + n.replace(/\\/g,'\\\\').replace(/\"/g,'\\"') + "\"}";
						gi++;
					});
					ruleGroup += "]}";
					$.extend($t.p.postData,{filters:ruleGroup});
					$.each(['searchField', 'searchString', 'searchOper'], function(i, n){
						if($t.p.postData.hasOwnProperty(n)) { delete $t.p.postData[n];}
					});
				} else {
					$.extend($t.p.postData,sdata);
				}
				var saveurl;
				if($t.p.searchurl) {
					saveurl = $t.p.url;
					$($t).jqGrid("setGridParam",{url:$t.p.searchurl});
				}
				var bsr = $($t).triggerHandler("jqGridToolbarBeforeSearch") === 'stop' ? true : false;
				if(!bsr && $.isFunction(p.beforeSearch)){bsr = p.beforeSearch.call($t);}
				if(!bsr) { $($t).jqGrid("setGridParam",{search:sd}).trigger("reloadGrid",[{page:1}]); }
				if(saveurl) {$($t).jqGrid("setGridParam",{url:saveurl});}
				$($t).triggerHandler("jqGridToolbarAfterSearch");
				if($.isFunction(p.afterSearch)){p.afterSearch.call($t);}
			};
			var clearToolbar = function(trigger){
				var sdata={}, j=0, nm;
				trigger = (typeof trigger != 'boolean') ? true : trigger;
				$.each($t.p.colModel,function(){
					var v;
					if(this.searchoptions && this.searchoptions.defaultValue !== undefined) { v = this.searchoptions.defaultValue; }
					nm = this.index || this.name;
					switch (this.stype) {
						case 'select' :
							$("#gs_"+$.jgrid.jqID(this.name)+" option",(this.frozen===true && $t.p.frozenColumns === true) ?  $t.grid.fhDiv : $t.grid.hDiv).each(function (i){
								if(i===0) { this.selected = true; }
								if ($(this).val() == v) {
									this.selected = true;
									return false;
								}
							});
							if ( v !== undefined ) {
								// post the key and not the text
								sdata[nm] = v;
								j++;
							} else {
								try {
									delete $t.p.postData[nm];
								} catch(e) {}
							}
							break;
						case 'text':
							$("#gs_"+$.jgrid.jqID(this.name),(this.frozen===true && $t.p.frozenColumns === true) ?  $t.grid.fhDiv : $t.grid.hDiv).val(v);
							if(v !== undefined) {
								sdata[nm] = v;
								j++;
							} else {
								try {
									delete $t.p.postData[nm];
								} catch (y){}
							}
							break;
					}
				});
				var sd =  j>0 ? true : false;
				if(p.stringResult === true || $t.p.datatype == "local") {
					var ruleGroup = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":[";
					var gi=0;
					$.each(sdata,function(i,n){
						if (gi > 0) {ruleGroup += ",";}
						ruleGroup += "{\"field\":\"" + i + "\",";
						ruleGroup += "\"op\":\"" + "eq" + "\",";
						n+="";
						ruleGroup += "\"data\":\"" + n.replace(/\\/g,'\\\\').replace(/\"/g,'\\"') + "\"}";
						gi++;
					});
					ruleGroup += "]}";
					$.extend($t.p.postData,{filters:ruleGroup});
					$.each(['searchField', 'searchString', 'searchOper'], function(i, n){
						if($t.p.postData.hasOwnProperty(n)) { delete $t.p.postData[n];}
					});
				} else {
					$.extend($t.p.postData,sdata);
				}
				var saveurl;
				if($t.p.searchurl) {
					saveurl = $t.p.url;
					$($t).jqGrid("setGridParam",{url:$t.p.searchurl});
				}
				var bcv = $($t).triggerHandler("jqGridToolbarBeforeClear") === 'stop' ? true : false;
				if(!bcv && $.isFunction(p.beforeClear)){bcv = p.beforeClear.call($t);}
				if(!bcv) {
					if(trigger) {
						$($t).jqGrid("setGridParam",{search:sd}).trigger("reloadGrid",[{page:1}]);
					}
				}
				if(saveurl) {$($t).jqGrid("setGridParam",{url:saveurl});}
				$($t).triggerHandler("jqGridToolbarAfterClear");
				if($.isFunction(p.afterClear)){p.afterClear();}
			};
			var toggleToolbar = function(){
				var trow = $("tr.ui-search-toolbar",$t.grid.hDiv),
				trow2 = $t.p.frozenColumns === true ?  $("tr.ui-search-toolbar",$t.grid.fhDiv) : false;
				if(trow.css("display")=='none') { 
					trow.show(); 
					if(trow2) {
						trow2.show();
					}
				} else { 
					trow.hide(); 
					if(trow2) {
						trow2.hide();
					}
				}
			};
			// create the row
			function bindEvents(selector, events) {
				var jElem = $(selector);
				if (jElem[0]) {
					jQuery.each(events, function() {
						if (this.data !== undefined) {
							jElem.bind(this.type, this.data, this.fn);
						} else {
							jElem.bind(this.type, this.fn);
						}
					});
				}
			}
			var tr = $("<tr class='ui-search-toolbar' role='rowheader'></tr>");
			var timeoutHnd;
			$.each($t.p.colModel,function(){
				var cm=this, thd , th, soptions,surl,self;
				th = $("<th role='columnheader' class='ui-state-default ui-th-column ui-th-"+$t.p.direction+"'></th>");
				thd = $("<div style='width:100%;position:relative;height:100%;padding-right:0.3em;'></div>");
				if(this.hidden===true) { $(th).css("display","none");}
				this.search = this.search === false ? false : true;
				if(typeof this.stype == 'undefined' ) {this.stype='text';}
				soptions = $.extend({},this.searchoptions || {});
				if(this.search){
					switch (this.stype)
					{
					case "select":
						surl = this.surl || soptions.dataUrl;
						if(surl) {
							// data returned should have already constructed html select
							// primitive jQuery load
							self = thd;
							$.ajax($.extend({
								url: surl,
								dataType: "html",
								success: function(res) {
									if(soptions.buildSelect !== undefined) {
										var d = soptions.buildSelect(res);
										if (d) { $(self).append(d); }
									} else {
										$(self).append(res);
									}
									if(soptions.defaultValue !== undefined) { $("select",self).val(soptions.defaultValue); }
									$("select",self).attr({name:cm.index || cm.name, id: "gs_"+cm.name});
									if(soptions.attr) {$("select",self).attr(soptions.attr);}
									$("select",self).css({width: "100%"});
									// preserve autoserch
									if(soptions.dataInit !== undefined) { soptions.dataInit($("select",self)[0]); }
									if(soptions.dataEvents !== undefined) { bindEvents($("select",self)[0],soptions.dataEvents); }
									if(p.autosearch===true){
										$("select",self).change(function(){
											triggerToolbar();
											return false;
										});
									}
									res=null;
								}
							}, $.jgrid.ajaxOptions, $t.p.ajaxSelectOptions || {} ));
						} else {
							var oSv, sep, delim;
							if(cm.searchoptions) {
								oSv = cm.searchoptions.value === undefined ? "" : cm.searchoptions.value;
								sep = cm.searchoptions.separator === undefined ? ":" : cm.searchoptions.separator;
								delim = cm.searchoptions.delimiter === undefined ? ";" : cm.searchoptions.delimiter;
							} else if(cm.editoptions) {
								oSv = cm.editoptions.value === undefined ? "" : cm.editoptions.value;
								sep = cm.editoptions.separator === undefined ? ":" : cm.editoptions.separator;
								delim = cm.editoptions.delimiter === undefined ? ";" : cm.editoptions.delimiter;
							}
							if (oSv) {	
								var elem = document.createElement("select");
								elem.style.width = "100%";
								$(elem).attr({name:cm.index || cm.name, id: "gs_"+cm.name});
								var so, sv, ov;
								if(typeof oSv === "string") {
									so = oSv.split(delim);
									for(var k=0; k<so.length;k++){
										sv = so[k].split(sep);
										ov = document.createElement("option");
										ov.value = sv[0]; ov.innerHTML = sv[1];
										elem.appendChild(ov);
									}
								} else if(typeof oSv === "object" ) {
									for ( var key in oSv) {
										if(oSv.hasOwnProperty(key)) {
											ov = document.createElement("option");
											ov.value = key; ov.innerHTML = oSv[key];
											elem.appendChild(ov);
										}
									}
								}
								if(soptions.defaultValue !== undefined) { $(elem).val(soptions.defaultValue); }
								if(soptions.attr) {$(elem).attr(soptions.attr);}
								if(soptions.dataInit !== undefined) { soptions.dataInit(elem); }
								if(soptions.dataEvents !== undefined) { bindEvents(elem, soptions.dataEvents); }
								$(thd).append(elem);
								if(p.autosearch===true){
									$(elem).change(function(){
										triggerToolbar();
										return false;
									});
								}
							}
						}
						break;
					case 'text':
						var df = soptions.defaultValue !== undefined ? soptions.defaultValue: "";
						$(thd).append("<input type='text' style='width:95%;padding:0px;' name='"+(cm.index || cm.name)+"' id='gs_"+cm.name+"' value='"+df+"'/>");
						if(soptions.attr) {$("input",thd).attr(soptions.attr);}
						if(soptions.dataInit !== undefined) { soptions.dataInit($("input",thd)[0]); }
						if(soptions.dataEvents !== undefined) { bindEvents($("input",thd)[0], soptions.dataEvents); }
						if(p.autosearch===true){
							if(p.searchOnEnter) {
								$("input",thd).keypress(function(e){
									var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
									if(key == 13){
										triggerToolbar();
										return false;
									}
									return this;
								});
							} else {
								$("input",thd).keydown(function(e){
									var key = e.which;
									switch (key) {
										case 13:
											return false;
										case 9 :
										case 16:
										case 37:
										case 38:
										case 39:
										case 40:
										case 27:
											break;
										default :
											if(timeoutHnd) { clearTimeout(timeoutHnd); }
											timeoutHnd = setTimeout(function(){triggerToolbar();},500);
									}
								});
							}
						}
						break;
					}
				}
				$(th).append(thd);
				$(tr).append(th);
			});
			$("table thead",$t.grid.hDiv).append(tr);
			this.ftoolbar = true;
			this.triggerToolbar = triggerToolbar;
			this.clearToolbar = clearToolbar;
			this.toggleToolbar = toggleToolbar;
		});
	},

	destroyGroupHeader : function(nullHeader)
	{
		if(typeof(nullHeader) == 'undefined') {
			nullHeader = true;
		}
		return this.each(function()
		{
			var $t = this, $tr, i, l, headers, $th, $resizing, grid = $t.grid,
			thead = $("table.ui-jqgrid-htable thead", grid.hDiv), cm = $t.p.colModel, hc;
			if(!grid) { return; }

			$(this).unbind('.setGroupHeaders');
			$tr = $("<tr>", {role: "rowheader"}).addClass("ui-jqgrid-labels");
			headers = grid.headers;
			for (i = 0, l = headers.length; i < l; i++) {
				hc = cm[i].hidden ? "none" : "";
				$th = $(headers[i].el)
					.width(headers[i].width)
					.css('display',hc);
				try {
					$th.removeAttr("rowSpan");
				} catch (rs) {
					//IE 6/7
					$th.attr("rowSpan",1);
				}
				$tr.append($th);
				$resizing = $th.children("span.ui-jqgrid-resize");
				if ($resizing.length>0) {// resizable column
					$resizing[0].style.height = "";
				}
				$th.children("div")[0].style.top = "";
			}
			$(thead).children('tr.ui-jqgrid-labels').remove();
			$(thead).prepend($tr);

			if(nullHeader === true) {
				$($t).jqGrid('setGridParam',{ 'groupHeader': null});
			}
		});
	},
	
	destroyFrozenColumns :  function() {
		return this.each(function() {
			if ( !this.grid ) {return;}
			if(this.p.frozenColumns === true) {
				var $t = this;
				$($t.grid.fhDiv).remove();
				$($t.grid.fbDiv).remove();
				$t.grid.fhDiv = null; $t.grid.fbDiv=null;
				$(this).unbind('.setFrozenColumns');
				if($t.p.hoverrows === true) {
					var ptr;
					$("#"+$.jgrid.jqID($t.p.id)).bind('mouseover',function(e) {
						ptr = $(e.target).closest("tr.jqgrow");
						if($(ptr).attr("class") !== "ui-subgrid") {
						$(ptr).addClass("ui-state-hover");
					}
					}).bind('mouseout',function(e) {
						ptr = $(e.target).closest("tr.jqgrow");
						$(ptr).removeClass("ui-state-hover");
					});
				}
				this.p.frozenColumns = false;
			}
		});
	}
});
})(jQuery);/*
 * jqModal - Minimalist Modaling with jQuery
 *   (http://dev.iceburg.net/jquery/jqmodal/)
 *
 * Copyright (c) 2007,2008 Brice Burgess <bhb@iceburg.net>
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 * 
 * $Version: 07/06/2008 +r13
 */
(function($) {
$.fn.jqm=function(o){
var p={
overlay: 50,
closeoverlay : true,
overlayClass: 'jqmOverlay',
closeClass: 'jqmClose',
trigger: '.jqModal',
ajax: F,
ajaxText: '',
target: F,
modal: F,
toTop: F,
onShow: F,
onHide: F,
onLoad: F
};
return this.each(function(){if(this._jqm)return H[this._jqm].c=$.extend({},H[this._jqm].c,o);s++;this._jqm=s;
H[s]={c:$.extend(p,$.jqm.params,o),a:F,w:$(this).addClass('jqmID'+s),s:s};
if(p.trigger)$(this).jqmAddTrigger(p.trigger);
});};

$.fn.jqmAddClose=function(e){return hs(this,e,'jqmHide');};
$.fn.jqmAddTrigger=function(e){return hs(this,e,'jqmShow');};
$.fn.jqmShow=function(t){return this.each(function(){$.jqm.open(this._jqm,t);});};
$.fn.jqmHide=function(t){return this.each(function(){$.jqm.close(this._jqm,t)});};

$.jqm = {
hash:{},
open:function(s,t){var h=H[s],c=h.c,cc='.'+c.closeClass,z=(parseInt(h.w.css('z-index')));z=(z>0)?z:3000;var o=$('<div></div>').css({height:'100%',width:'100%',position:'fixed',left:0,top:0,'z-index':z-1,opacity:c.overlay/100});if(h.a)return F;h.t=t;h.a=true;h.w.css('z-index',z);
 if(c.modal) {if(!A[0])setTimeout(function(){L('bind');},1);A.push(s);}
 else if(c.overlay > 0) {if(c.closeoverlay) h.w.jqmAddClose(o);}
 else o=F;

 h.o=(o)?o.addClass(c.overlayClass).prependTo('body'):F;
 if(ie6){$('html,body').css({height:'100%',width:'100%'});if(o){o=o.css({position:'absolute'})[0];for(var y in {Top:1,Left:1})o.style.setExpression(y.toLowerCase(),"(_=(document.documentElement.scroll"+y+" || document.body.scroll"+y+"))+'px'");}}

 if(c.ajax) {var r=c.target||h.w,u=c.ajax;r=(typeof r == 'string')?$(r,h.w):$(r);u=(u.substr(0,1) == '@')?$(t).attr(u.substring(1)):u;
  r.html(c.ajaxText).load(u,function(){if(c.onLoad)c.onLoad.call(this,h);if(cc)h.w.jqmAddClose($(cc,h.w));e(h);});}
 else if(cc)h.w.jqmAddClose($(cc,h.w));

 if(c.toTop&&h.o)h.w.before('<span id="jqmP'+h.w[0]._jqm+'"></span>').insertAfter(h.o);	
 (c.onShow)?c.onShow(h):h.w.show();e(h);return F;
},
close:function(s){var h=H[s];if(!h.a)return F;h.a=F;
 if(A[0]){A.pop();if(!A[0])L('unbind');}
 if(h.c.toTop&&h.o)$('#jqmP'+h.w[0]._jqm).after(h.w).remove();
 if(h.c.onHide)h.c.onHide(h);else{h.w.hide();if(h.o)h.o.remove();} return F;
},
params:{}};
var s=0,H=$.jqm.hash,A=[],ie6=$.browser.msie&&($.browser.version == "6.0"),F=false,
e=function(h){var i=$('<iframe src="javascript:false;document.write(\'\');" class="jqm"></iframe>').css({opacity:0});if(ie6)if(h.o)h.o.html('<p style="width:100%;height:100%"/>').prepend(i);else if(!$('iframe.jqm',h.w)[0])h.w.prepend(i); f(h);},
f=function(h){try{$(':input:visible',h.w)[0].focus();}catch(_){}},
L=function(t){$(document)[t]("keypress",m)[t]("keydown",m)[t]("mousedown",m);},
m=function(e){var h=H[A[A.length-1]],r=(!$(e.target).parents('.jqmID'+h.s)[0]);if(r)f(h);return !r;},
hs=function(w,t,c){return w.each(function(){var s=this._jqm;$(t).each(function() {
 if(!this[c]){this[c]=[];$(this).click(function(){for(var i in {jqmShow:1,jqmHide:1})for(var s in this[i])if(H[this[i][s]])H[this[i][s]].w[i](this);return F;});}this[c].push(s);});});};
})(jQuery);/*
 * jqDnR - Minimalistic Drag'n'Resize for jQuery.
 *
 * Copyright (c) 2007 Brice Burgess <bhb@iceburg.net>, http://www.iceburg.net
 * Licensed under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * $Version: 2007.08.19 +r2
 */

(function($){
$.fn.jqDrag=function(h){return i(this,h,'d');};
$.fn.jqResize=function(h,ar){return i(this,h,'r',ar);};
$.jqDnR={
	dnr:{},
	e:0,
	drag:function(v){
		if(M.k == 'd'){E.css({left:M.X+v.pageX-M.pX,top:M.Y+v.pageY-M.pY});}
		else {
			E.css({width:Math.max(v.pageX-M.pX+M.W,0),height:Math.max(v.pageY-M.pY+M.H,0)});
			if(M1){E1.css({width:Math.max(v.pageX-M1.pX+M1.W,0),height:Math.max(v.pageY-M1.pY+M1.H,0)});}
		}
		return false;
	},
	stop:function(){
		//E.css('opacity',M.o);
		$(document).unbind('mousemove',J.drag).unbind('mouseup',J.stop);
	}
};
var J=$.jqDnR,M=J.dnr,E=J.e,E1,M1,
i=function(e,h,k,aR){
	return e.each(function(){
		h=(h)?$(h,e):e;
		h.bind('mousedown',{e:e,k:k},function(v){
			var d=v.data,p={};E=d.e;E1 = aR ? $(aR) : false;
			// attempt utilization of dimensions plugin to fix IE issues
			if(E.css('position') != 'relative'){try{E.position(p);}catch(e){}}
			M={
				X:p.left||f('left')||0,
				Y:p.top||f('top')||0,
				W:f('width')||E[0].scrollWidth||0,
				H:f('height')||E[0].scrollHeight||0,
				pX:v.pageX,
				pY:v.pageY,
				k:d.k
				//o:E.css('opacity')
			};
			// also resize
			if(E1 && d.k != 'd'){
				M1={
					X:p.left||f1('left')||0,
					Y:p.top||f1('top')||0,
					W:E1[0].offsetWidth||f1('width')||0,
					H:E1[0].offsetHeight||f1('height')||0,
					pX:v.pageX,
					pY:v.pageY,
					k:d.k
				};
			} else {M1 = false;}			
			//E.css({opacity:0.8});
			if($("input.hasDatepicker",E[0])[0]) {
			try {$("input.hasDatepicker",E[0]).datepicker('hide');}catch (dpe){}
			}
			$(document).mousemove($.jqDnR.drag).mouseup($.jqDnR.stop);
			return false;
		});
	});
},
f=function(k){return parseInt(E.css(k),10)||false;},
f1=function(k){return parseInt(E1.css(k),10)||false;};
})(jQuery);/*
	The below work is licensed under Creative Commons GNU LGPL License.

	Original work:

	License:     http://creativecommons.org/licenses/LGPL/2.1/
	Author:      Stefan Goessner/2006
	Web:         http://goessner.net/ 

	Modifications made:

	Version:     0.9-p5
	Description: Restructured code, JSLint validated (no strict whitespaces),
	             added handling of empty arrays, empty strings, and int/floats values.
	Author:      Michael Sch酶ler/2008-01-29
	Web:         http://michael.hinnerup.net/blog/2008/01/26/converting-json-to-xml-and-xml-to-json/
	
	Description: json2xml added support to convert functions as CDATA
	             so it will be easy to write characters that cause some problems when convert
	Author:      Tony Tomov
*/

/*global alert */
var xmlJsonClass = {
	// Param "xml": Element or document DOM node.
	// Param "tab": Tab or indent string for pretty output formatting omit or use empty string "" to supress.
	// Returns:     JSON string
	xml2json: function(xml, tab) {
		if (xml.nodeType === 9) {
			// document node
			xml = xml.documentElement;
		}
		var nws = this.removeWhite(xml);
		var obj = this.toObj(nws);
		var json = this.toJson(obj, xml.nodeName, "\t");
		return "{\n" + tab + (tab ? json.replace(/\t/g, tab) : json.replace(/\t|\n/g, "")) + "\n}";
	},

	// Param "o":   JavaScript object
	// Param "tab": tab or indent string for pretty output formatting omit or use empty string "" to supress.
	// Returns:     XML string
	json2xml: function(o, tab) {
		var toXml = function(v, name, ind) {
			var xml = "";
			var i, n;
			if (v instanceof Array) {
				if (v.length === 0) {
					xml += ind + "<"+name+">__EMPTY_ARRAY_</"+name+">\n";
				}
				else {
					for (i = 0, n = v.length; i < n; i += 1) {
						var sXml = ind + toXml(v[i], name, ind+"\t") + "\n";
						xml += sXml;
					}
				}
			}
			else if (typeof(v) === "object") {
				var hasChild = false;
				xml += ind + "<" + name;
				var m;
				for (m in v) if (v.hasOwnProperty(m)) {
					if (m.charAt(0) === "@") {
						xml += " " + m.substr(1) + "=\"" + v[m].toString() + "\"";
					}
					else {
						hasChild = true;
					}
				}
				xml += hasChild ? ">" : "/>";
				if (hasChild) {
					for (m in v) if (v.hasOwnProperty(m)) {
						if (m === "#text") {
							xml += v[m];
						}
						else if (m === "#cdata") {
							xml += "<![CDATA[" + v[m] + "]]>";
						}
						else if (m.charAt(0) !== "@") {
							xml += toXml(v[m], m, ind+"\t");
						}
					}
					xml += (xml.charAt(xml.length - 1) === "\n" ? ind : "") + "</" + name + ">";
				}
			}
			else if (typeof(v) === "function") {
				xml += ind + "<" + name + ">" + "<![CDATA[" + v + "]]>" + "</" + name + ">";
			}
			else {
				if (v === undefined ) { v = ""; }
				if (v.toString() === "\"\"" || v.toString().length === 0) {
					xml += ind + "<" + name + ">__EMPTY_STRING_</" + name + ">";
				} 
				else {
					xml += ind + "<" + name + ">" + v.toString() + "</" + name + ">";
				}
			}
			return xml;
		};
		var xml = "";
		var m;
		for (m in o) if (o.hasOwnProperty(m)) {
			xml += toXml(o[m], m, "");
		}
		return tab ? xml.replace(/\t/g, tab) : xml.replace(/\t|\n/g, "");
	},
	// Internal methods
	toObj: function(xml) {
		var o = {};
		var FuncTest = /function/i;
		if (xml.nodeType === 1) {
			// element node ..
			if (xml.attributes.length) {
				// element with attributes ..
				var i;
				for (i = 0; i < xml.attributes.length; i += 1) {
					o["@" + xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue || "").toString();
				}
			}
			if (xml.firstChild) {
				// element has child nodes ..
				var textChild = 0, cdataChild = 0, hasElementChild = false;
				var n;
				for (n = xml.firstChild; n; n = n.nextSibling) {
					if (n.nodeType === 1) {
						hasElementChild = true;
					}
					else if (n.nodeType === 3 && n.nodeValue.match(/[^ \f\n\r\t\v]/)) {
						// non-whitespace text
						textChild += 1;
					}
					else if (n.nodeType === 4) {
						// cdata section node
						cdataChild += 1;
					}
				}
				if (hasElementChild) {
					if (textChild < 2 && cdataChild < 2) {
						// structured element with evtl. a single text or/and cdata node ..
						this.removeWhite(xml);
						for (n = xml.firstChild; n; n = n.nextSibling) {
							if (n.nodeType === 3) {
								// text node
								o["#text"] = this.escape(n.nodeValue);
							}
							else if (n.nodeType === 4) {
								// cdata node
								if (FuncTest.test(n.nodeValue)) {
									o[n.nodeName] = [o[n.nodeName], n.nodeValue];
								} else {
									o["#cdata"] = this.escape(n.nodeValue);
								}
							}
							else if (o[n.nodeName]) {
								// multiple occurence of element ..
								if (o[n.nodeName] instanceof Array) {
									o[n.nodeName][o[n.nodeName].length] = this.toObj(n);
								}
								else {
									o[n.nodeName] = [o[n.nodeName], this.toObj(n)];
								}
							}
							else {
								// first occurence of element ..
								o[n.nodeName] = this.toObj(n);
							}
						}
					}
					else {
						// mixed content
						if (!xml.attributes.length) {
							o = this.escape(this.innerXml(xml));
						}
						else {
							o["#text"] = this.escape(this.innerXml(xml));
						}
					}
				}
				else if (textChild) {
					// pure text
					if (!xml.attributes.length) {
						o = this.escape(this.innerXml(xml));
						if (o === "__EMPTY_ARRAY_") {
							o = "[]";
						} else if (o === "__EMPTY_STRING_") {
							o = "";
						}
					}
					else {
						o["#text"] = this.escape(this.innerXml(xml));
					}
				}
				else if (cdataChild) {
					// cdata
					if (cdataChild > 1) {
						o = this.escape(this.innerXml(xml));
					}
					else {
						for (n = xml.firstChild; n; n = n.nextSibling) {
							if(FuncTest.test(xml.firstChild.nodeValue)) {
								o = xml.firstChild.nodeValue;
								break;
							} else {
								o["#cdata"] = this.escape(n.nodeValue);
							}
						}
					}
				}
			}
			if (!xml.attributes.length && !xml.firstChild) {
				o = null;
			}
		}
		else if (xml.nodeType === 9) {
			// document.node
			o = this.toObj(xml.documentElement);
		}
		else {
			alert("unhandled node type: " + xml.nodeType);
		}
		return o;
	},
	toJson: function(o, name, ind, wellform) {
		if(wellform === undefined) wellform = true;
		var json = name ? ("\"" + name + "\"") : "", tab = "\t", newline = "\n";
		if(!wellform) {
			tab= ""; newline= "";
		}

		if (o === "[]") {
			json += (name ? ":[]" : "[]");
		}
		else if (o instanceof Array) {
			var n, i, ar=[];
			for (i = 0, n = o.length; i < n; i += 1) {
				ar[i] = this.toJson(o[i], "", ind + tab, wellform);
			}
			json += (name ? ":[" : "[") + (ar.length > 1 ? (newline + ind + tab + ar.join(","+newline + ind + tab) + newline + ind) : ar.join("")) + "]";
		}
		else if (o === null) {
			json += (name && ":") + "null";
		}
		else if (typeof(o) === "object") {
			var arr = [], m;
			for (m in o) {
				if (o.hasOwnProperty(m)) {
					arr[arr.length] = this.toJson(o[m], m, ind + tab, wellform);
			}
		}
			json += (name ? ":{" : "{") + (arr.length > 1 ? (newline + ind + tab + arr.join(","+newline + ind + tab) + newline + ind) : arr.join("")) + "}";
		}
		else if (typeof(o) === "string") {
			/*
			var objRegExp  = /(^-?\d+\.?\d*$)/;
			var FuncTest = /function/i;
			var os = o.toString();
			if (objRegExp.test(os) || FuncTest.test(os) || os==="false" || os==="true") {
				// int or float
				json += (name && ":")  + "\"" +os + "\"";
			} 
			else {
			*/
				json += (name && ":") + "\"" + o.replace(/\\/g,'\\\\').replace(/\"/g,'\\"') + "\"";
			//}
			}
		else {
			json += (name && ":") +  o.toString();
		}
		return json;
	},
	innerXml: function(node) {
		var s = "";
		if ("innerHTML" in node) {
			s = node.innerHTML;
		}
		else {
			var asXml = function(n) {
				var s = "", i;
				if (n.nodeType === 1) {
					s += "<" + n.nodeName;
					for (i = 0; i < n.attributes.length; i += 1) {
						s += " " + n.attributes[i].nodeName + "=\"" + (n.attributes[i].nodeValue || "").toString() + "\"";
					}
					if (n.firstChild) {
						s += ">";
						for (var c = n.firstChild; c; c = c.nextSibling) {
							s += asXml(c);
						}
						s += "</" + n.nodeName + ">";
					}
					else {
						s += "/>";
					}
				}
				else if (n.nodeType === 3) {
					s += n.nodeValue;
				}
				else if (n.nodeType === 4) {
					s += "<![CDATA[" + n.nodeValue + "]]>";
				}
				return s;
			};
			for (var c = node.firstChild; c; c = c.nextSibling) {
				s += asXml(c);
			}
		}
		return s;
	},
	escape: function(txt) {
		return txt.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r');
	},
	removeWhite: function(e) {
		e.normalize();
		var n;
		for (n = e.firstChild; n; ) {
			if (n.nodeType === 3) {
				// text node
				if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) {
					// pure whitespace text node
					var nxt = n.nextSibling;
					e.removeChild(n);
					n = nxt;
				}
				else {
					n = n.nextSibling;
				}
			}
			else if (n.nodeType === 1) {
				// element node
				this.removeWhite(n);
				n = n.nextSibling;
			}
			else {
				// any other node
				n = n.nextSibling;
			}
		}
		return e;
	}
};/*
**
 * formatter for values but most of the values if for jqGrid
 * Some of this was inspired and based on how YUI does the table datagrid but in jQuery fashion
 * we are trying to keep it as light as possible
 * Joshua Burnett josh@9ci.com	
 * http://www.greenbill.com
 *
 * Changes from Tony Tomov tony@trirand.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
**/

;(function($) {
"use strict";	
	$.fmatter = {};
	//opts can be id:row id for the row, rowdata:the data for the row, colmodel:the column model for this column
	//example {id:1234,}
	$.extend($.fmatter,{
		isBoolean : function(o) {
			return typeof o === 'boolean';
		},
		isObject : function(o) {
			return (o && (typeof o === 'object' || $.isFunction(o))) || false;
		},
		isString : function(o) {
			return typeof o === 'string';
		},
		isNumber : function(o) {
			return typeof o === 'number' && isFinite(o);
		},
		isNull : function(o) {
			return o === null;
		},
		isUndefined : function(o) {
			return typeof o === 'undefined';
		},
		isValue : function (o) {
			return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o));
		},
		isEmpty : function(o) {
			if(!this.isString(o) && this.isValue(o)) {
				return false;
			}else if (!this.isValue(o)){
				return true;
			}
			o = $.trim(o).replace(/\&nbsp\;/ig,'').replace(/\&#160\;/ig,'');
			return o==="";	
		}
	});
	$.fn.fmatter = function(formatType, cellval, opts, rwd, act) {
		// build main options before element iteration
		var v=cellval;
		opts = $.extend({}, $.jgrid.formatter, opts);

		try {
			v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
		} catch(fe){}
		return v;
	};
	$.fmatter.util = {
		// Taken from YAHOO utils
		NumberFormat : function(nData,opts) {
			if(!$.fmatter.isNumber(nData)) {
				nData *= 1;
			}
			if($.fmatter.isNumber(nData)) {
				var bNegative = (nData < 0);
				var sOutput = nData + "";
				var sDecimalSeparator = (opts.decimalSeparator) ? opts.decimalSeparator : ".";
				var nDotIndex;
				if($.fmatter.isNumber(opts.decimalPlaces)) {
					// Round to the correct decimal place
					var nDecimalPlaces = opts.decimalPlaces;
					var nDecimal = Math.pow(10, nDecimalPlaces);
					sOutput = Math.round(nData*nDecimal)/nDecimal + "";
					nDotIndex = sOutput.lastIndexOf(".");
					if(nDecimalPlaces > 0) {
					// Add the decimal separator
						if(nDotIndex < 0) {
							sOutput += sDecimalSeparator;
							nDotIndex = sOutput.length-1;
						}
						// Replace the "."
						else if(sDecimalSeparator !== "."){
							sOutput = sOutput.replace(".",sDecimalSeparator);
						}
					// Add missing zeros
						while((sOutput.length - 1 - nDotIndex) < nDecimalPlaces) {
							sOutput += "0";
						}
					}
				}
				if(opts.thousandsSeparator) {
					var sThousandsSeparator = opts.thousandsSeparator;
					nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
					nDotIndex = (nDotIndex > -1) ? nDotIndex : sOutput.length;
					var sNewOutput = sOutput.substring(nDotIndex);
					var nCount = -1;
					for (var i=nDotIndex; i>0; i--) {
						nCount++;
						if ((nCount%3 === 0) && (i !== nDotIndex) && (!bNegative || (i > 1))) {
							sNewOutput = sThousandsSeparator + sNewOutput;
						}
						sNewOutput = sOutput.charAt(i-1) + sNewOutput;
					}
					sOutput = sNewOutput;
				}
				// Prepend prefix
				sOutput = (opts.prefix) ? opts.prefix + sOutput : sOutput;
				// Append suffix
				sOutput = (opts.suffix) ? sOutput + opts.suffix : sOutput;
				return sOutput;
				
			} else {
				return nData;
			}
		},
		// Tony Tomov
		// PHP implementation. Sorry not all options are supported.
		// Feel free to add them if you want
		DateFormat : function (format, date, newformat, opts)  {
			var	token = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,
			timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
			timezoneClip = /[^-+\dA-Z]/g,
			msDateRegExp = new RegExp("^\/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)\/$"),
			msMatch = ((typeof date === 'string') ? date.match(msDateRegExp): null),
			pad = function (value, length) {
				value = String(value);
				length = parseInt(length,10) || 2;
				while (value.length < length)  { value = '0' + value; }
				return value;
			},
			ts = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},
			timestamp=0, dM, k,hl,
			dateFormat=["i18n"];
			// Internationalization strings
			dateFormat.i18n = {
				dayNames: opts.dayNames,
				monthNames: opts.monthNames
			};
			if( format in opts.masks ) { format = opts.masks[format]; }
			if( !isNaN( date - 0 ) && String(format).toLowerCase() == "u") {
				//Unix timestamp
				timestamp = new Date( parseFloat(date)*1000 );
			} else if(date.constructor === Date) {
				timestamp = date;
				// Microsoft date format support
			} else if( msMatch !== null ) {
				timestamp = new Date(parseInt(msMatch[1], 10));
				if (msMatch[3]) {
					var offset = Number(msMatch[5]) * 60 + Number(msMatch[6]);
					offset *= ((msMatch[4] == '-') ? 1 : -1);
					offset -= timestamp.getTimezoneOffset();
					timestamp.setTime(Number(Number(timestamp) + (offset * 60 * 1000)));
				}
			} else {
				date = String(date).split(/[\\\/:_;.,\t\T\s-]/);
				format = format.split(/[\\\/:_;.,\t\T\s-]/);
				// parsing for month names
				for(k=0,hl=format.length;k<hl;k++){
					if(format[k] == 'M') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM < 12){date[k] = dM+1;}
					}
					if(format[k] == 'F') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM > 11){date[k] = dM+1-12;}
					}
					if(date[k]) {
						ts[format[k].toLowerCase()] = parseInt(date[k],10);
					}
				}
				if(ts.f) {ts.m = ts.f;}
				if( ts.m === 0 && ts.y === 0 && ts.d === 0) {
					return "&#160;" ;
				}
				ts.m = parseInt(ts.m,10)-1;
				var ty = ts.y;
				if (ty >= 70 && ty <= 99) {ts.y = 1900+ts.y;}
				else if (ty >=0 && ty <=69) {ts.y= 2000+ts.y;}
				timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
			}
			
			if( newformat in opts.masks )  {
				newformat = opts.masks[newformat];
			} else if ( !newformat ) {
				newformat = 'Y-m-d';
			}
			var 
				G = timestamp.getHours(),
				i = timestamp.getMinutes(),
				j = timestamp.getDate(),
				n = timestamp.getMonth() + 1,
				o = timestamp.getTimezoneOffset(),
				s = timestamp.getSeconds(),
				u = timestamp.getMilliseconds(),
				w = timestamp.getDay(),
				Y = timestamp.getFullYear(),
				N = (w + 6) % 7 + 1,
				z = (new Date(Y, n - 1, j) - new Date(Y, 0, 1)) / 86400000,
				flags = {
					// Day
					d: pad(j),
					D: dateFormat.i18n.dayNames[w],
					j: j,
					l: dateFormat.i18n.dayNames[w + 7],
					N: N,
					S: opts.S(j),
					//j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th',
					w: w,
					z: z,
					// Week
					W: N < 5 ? Math.floor((z + N - 1) / 7) + 1 : Math.floor((z + N - 1) / 7) || ((new Date(Y - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52),
					// Month
					F: dateFormat.i18n.monthNames[n - 1 + 12],
					m: pad(n),
					M: dateFormat.i18n.monthNames[n - 1],
					n: n,
					t: '?',
					// Year
					L: '?',
					o: '?',
					Y: Y,
					y: String(Y).substring(2),
					// Time
					a: G < 12 ? opts.AmPm[0] : opts.AmPm[1],
					A: G < 12 ? opts.AmPm[2] : opts.AmPm[3],
					B: '?',
					g: G % 12 || 12,
					G: G,
					h: pad(G % 12 || 12),
					H: pad(G),
					i: pad(i),
					s: pad(s),
					u: u,
					// Timezone
					e: '?',
					I: '?',
					O: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
					P: '?',
					T: (String(timestamp).match(timezone) || [""]).pop().replace(timezoneClip, ""),
					Z: '?',
					// Full Date/Time
					c: '?',
					r: '?',
					U: Math.floor(timestamp / 1000)
				};	
			return newformat.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.substring(1);
			});			
		}
	};
	$.fn.fmatter.defaultFormat = function(cellval, opts) {
		return ($.fmatter.isValue(cellval) && cellval!=="" ) ?  cellval : opts.defaultValue ? opts.defaultValue : "&#160;";
	};
	$.fn.fmatter.email = function(cellval, opts) {
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a href=\"mailto:" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts );
		}
	};
	$.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds;
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = $.fn.fmatter.defaultFormat(cval,op);}
		cval=cval+"";cval=cval.toLowerCase();
		var bchk = cval.search(/(false|0|no|off)/i)<0 ? " checked='checked' " : "";
		return "<input type=\"checkbox\" " + bchk  + " value=\""+ cval+"\" offval=\"no\" "+ds+ "/>";
	};
	$.fn.fmatter.link = function(cellval, opts) {
		var op = {target:opts.target};
		var target = "";
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a "+target+" href=\"" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.showlink = function(cellval, opts) {
		var op = {baseLinkUrl: opts.baseLinkUrl,showAction:opts.showAction, addParam: opts.addParam || "", target: opts.target, idName: opts.idName},
		target = "", idUrl;
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		idUrl = op.baseLinkUrl+op.showAction + '?'+ op.idName+'='+opts.rowId+op.addParam;
		if($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)) {	//add this one even if its blank string
			return "<a "+target+" href=\"" + idUrl + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.integer = function(cellval, opts) {
		var op = $.extend({},opts.integer);
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.number = function (cellval, opts) {
		var op = $.extend({},opts.number);
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.currency = function (cellval, opts) {
		var op = $.extend({},opts.currency);
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.date = function (cellval, opts, rwd, act) {
		var op = $.extend({},opts.date);
		if(opts.colModel !== undefined && !$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(!op.reformatAfterEdit && act=='edit'){
			return $.fn.fmatter.defaultFormat(cellval, opts);
		} else if(!$.fmatter.isEmpty(cellval)) {
			return  $.fmatter.util.DateFormat(op.srcformat,cellval,op.newformat,op);
		} else {
			return $.fn.fmatter.defaultFormat(cellval, opts);
		}
	};
	$.fn.fmatter.select = function (cellval,opts) {
		// jqGrid specific
		cellval = cellval + "";
		var oSelect = false, ret=[], sep, delim;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)){
			oSelect= opts.colModel.formatoptions.value;
			sep = opts.colModel.formatoptions.separator === undefined ? ":" : opts.colModel.formatoptions.separator;
			delim = opts.colModel.formatoptions.delimiter === undefined ? ";" : opts.colModel.formatoptions.delimiter;
		} else if(!$.fmatter.isUndefined(opts.colModel.editoptions)){
			oSelect= opts.colModel.editoptions.value;
			sep = opts.colModel.editoptions.separator === undefined ? ":" : opts.colModel.editoptions.separator;
			delim = opts.colModel.editoptions.delimiter === undefined ? ";" : opts.colModel.editoptions.delimiter;
		}
		if (oSelect) {
			var	msl =  opts.colModel.editoptions.multiple === true ? true : false,
			scell = [], sv;
			if(msl) {scell = cellval.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
			if ($.fmatter.isString(oSelect)) {
				// mybe here we can use some caching with care ????
				var so = oSelect.split(delim), j=0;
				for(var i=0; i<so.length;i++){
					sv = so[i].split(sep);
					if(sv.length > 2 ) {
						sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
					}
					if(msl) {
						if($.inArray(sv[0],scell)>-1) {
							ret[j] = sv[1];
							j++;
						}
					} else if($.trim(sv[0])==$.trim(cellval)) {
						ret[0] = sv[1];
						break;
					}
				}
			} else if($.fmatter.isObject(oSelect)) {
				// this is quicker
				if(msl) {
					ret = $.map(scell, function(n){
						return oSelect[n];
					});
				} else {
					ret[0] = oSelect[cellval] || "";
				}
			}
		}
		cellval = ret.join(", ");
		return  cellval === "" ? $.fn.fmatter.defaultFormat(cellval,opts) : cellval;
	};
	$.fn.fmatter.rowactions = function(rid,gid,act,pos) {
		var op ={
			keys:false,
			onEdit : null, 
			onSuccess: null, 
			afterSave:null,
			onError: null,
			afterRestore: null,
			extraparam: {},
			url: null,
			restoreAfterError: true,
			mtype: "POST",
			delOptions: {},
			editOptions : {}
		};
		rid = $.jgrid.jqID( rid );
		gid = $.jgrid.jqID( gid );
		var cm = $('#'+gid)[0].p.colModel[pos];
		if(!$.fmatter.isUndefined(cm.formatoptions)) {
			op = $.extend(op,cm.formatoptions);
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].p.editOptions) ) {
			op.editOptions = $('#'+gid)[0].p.editOptions;
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].p.delOptions) ) {
			op.delOptions = $('#'+gid)[0].p.delOptions;
		}
		var $t = $("#"+gid)[0];
		var saverow = function( rowid, res)	{
			if($.isFunction(op.afterSave)) { op.afterSave.call($t, rowid, res); }
			$("tr#"+rid+" div.ui-inline-edit, "+"tr#"+rid+" div.ui-inline-del","#"+gid + ".ui-jqgrid-btable:first").show();
			$("tr#"+rid+" div.ui-inline-save, "+"tr#"+rid+" div.ui-inline-cancel","#"+gid+ ".ui-jqgrid-btable:first").hide();
		},
		restorerow = function( rowid)	{
			if($.isFunction(op.afterRestore) ) { op.afterRestore.call($t, rowid); }
			$("tr#"+rid+" div.ui-inline-edit, "+"tr#"+rid+" div.ui-inline-del","#"+gid+ ".ui-jqgrid-btable:first").show();
			$("tr#"+rid+" div.ui-inline-save, "+"tr#"+rid+" div.ui-inline-cancel","#"+gid+ ".ui-jqgrid-btable:first").hide();
		};
		if( $("#"+rid,"#"+gid).hasClass("jqgrid-new-row") ){
			var opers = $t.p.prmNames,
			oper = opers.oper;
			op.extraparam[oper] = opers.addoper;
		}
		var actop = {
			keys : op.keys,
			oneditfunc: op.onEdit,
			successfunc: op.onSuccess,
			url: op.url,
			extraparam: op.extraparam,
			aftersavefunc: saverow,
			errorfunc: op.onError,
			afterrestorefunc: restorerow,
			restoreAfterError: op.restoreAfterError,
			mtype: op.mtype
		};
		switch(act)
		{
			case 'edit':
				$('#'+gid).jqGrid('editRow', rid, actop);
				$("tr#"+rid+" div.ui-inline-edit, "+"tr#"+rid+" div.ui-inline-del","#"+gid+ ".ui-jqgrid-btable:first").hide();
				$("tr#"+rid+" div.ui-inline-save, "+"tr#"+rid+" div.ui-inline-cancel","#"+gid+ ".ui-jqgrid-btable:first").show();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'save':
				if ( $('#'+gid).jqGrid('saveRow', rid, actop) ) {
				$("tr#"+rid+" div.ui-inline-edit, "+"tr#"+rid+" div.ui-inline-del","#"+gid+ ".ui-jqgrid-btable:first").show();
				$("tr#"+rid+" div.ui-inline-save, "+"tr#"+rid+" div.ui-inline-cancel","#"+gid+ ".ui-jqgrid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				}
				break;
			case 'cancel' :
				$('#'+gid).jqGrid('restoreRow',rid, restorerow);
				$("tr#"+rid+" div.ui-inline-edit, "+"tr#"+rid+" div.ui-inline-del","#"+gid+ ".ui-jqgrid-btable:first").show();
				$("tr#"+rid+" div.ui-inline-save, "+"tr#"+rid+" div.ui-inline-cancel","#"+gid+ ".ui-jqgrid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'del':
				$('#'+gid).jqGrid('delGridRow',rid, op.delOptions);
				break;
			case 'formedit':
				$('#'+gid).jqGrid('setSelection',rid);
				$('#'+gid).jqGrid('editGridRow',rid, op.editOptions);
				break;
		}
	};
	$.fn.fmatter.actions = function(cellval,opts) {
		var op ={keys:false, editbutton:true, delbutton:true, editformbutton: false};
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend(op,opts.colModel.formatoptions);
		}
		var rowid = opts.rowId, str="",ocl;
		if(typeof(rowid) =='undefined' || $.fmatter.isEmpty(rowid)) {return "";}
		if(op.editformbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','formedit',"+opts.pos+"); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
			str =str+ "<div title='"+$.jgrid.nav.edittitle+"' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' "+ocl+"><span class='ui-icon ui-icon-pencil'></span></div>";
		} else if(op.editbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','edit',"+opts.pos+"); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') ";
			str =str+ "<div title='"+$.jgrid.nav.edittitle+"' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' "+ocl+"><span class='ui-icon ui-icon-pencil'></span></div>";
		}
		if(op.delbutton) {
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','del',"+opts.pos+"); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
			str = str+"<div title='"+$.jgrid.nav.deltitle+"' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' "+ocl+"><span class='ui-icon ui-icon-trash'></span></div>";
		}
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','save',"+opts.pos+"); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
		str = str+"<div title='"+$.jgrid.edit.bSubmit+"' style='float:left;display:none' class='ui-pg-div ui-inline-save' "+ocl+"><span class='ui-icon ui-icon-disk'></span></div>";
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','cancel',"+opts.pos+"); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
		str = str+"<div title='"+$.jgrid.edit.bCancel+"' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' "+ocl+"><span class='ui-icon ui-icon-cancel'></span></div>";
		return "<div style='margin-left:8px;'>" + str + "</div>";
	};
})(jQuery);
;(function($){
/*
 * jqGrid common function
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
*/
/*global jQuery, $ */

$.extend($.jgrid,{
// Modal functions
	showModal : function(h) {
		h.w.show();
	},
	closeModal : function(h) {
		h.w.hide().attr("aria-hidden","true");
		if(h.o) {h.o.remove();}
	},
	hideModal : function (selector,o) {
		o = $.extend({jqm : true, gb :''}, o || {});
		if(o.onClose) {
			var oncret =  o.onClose(selector);
			if (typeof oncret == 'boolean'  && !oncret ) { return; }
		}
		if ($.fn.jqm && o.jqm === true) {
			$(selector).attr("aria-hidden","true").jqmHide();
		} else {
			if(o.gb !== '') {
				try {$(".jqgrid-overlay:first",o.gb).hide();} catch (e){}
			}
			$(selector).hide().attr("aria-hidden","true");
		}
	},
//Helper functions
	findPos : function(obj) {
		var curleft = 0, curtop = 0;
		if (obj.offsetParent) {
			do {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			} while (obj = obj.offsetParent);
			//do not change obj == obj.offsetParent
		}
		return [curleft,curtop];
	},
	createModal : function(aIDs, content, p, insertSelector, posSelector, appendsel, css) {		
		var mw  = document.createElement('div'), rtlsup, self = this;
		css = $.extend({}, css || {});
		rtlsup = $(p.gbox).attr("dir") == "rtl" ? true : false;
		mw.className= "ui-widget ui-widget-content ui-corner-all ui-jqdialog";
		mw.id = aIDs.themodal;
		var mh = document.createElement('div');
		mh.className = "ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix";
		mh.id = aIDs.modalhead;
		$(mh).append("<span class='ui-jqdialog-title'>"+p.caption+"</span>");
		var ahr= $("<a href='javascript:void(0)' class='ui-jqdialog-titlebar-close ui-corner-all'></a>")
		.hover(function(){ahr.addClass('ui-state-hover');},
			   function(){ahr.removeClass('ui-state-hover');})
		.append("<span class='ui-icon ui-icon-closethick'></span>");
		$(mh).append(ahr);
		if(rtlsup) {
			mw.dir = "rtl";
			$(".ui-jqdialog-title",mh).css("float","right");
			$(".ui-jqdialog-titlebar-close",mh).css("left",0.3+"em");
		} else {
			mw.dir = "ltr";
			$(".ui-jqdialog-title",mh).css("float","left");
			$(".ui-jqdialog-titlebar-close",mh).css("right",0.3+"em");
		}
		var mc = document.createElement('div');
		$(mc).addClass("ui-jqdialog-content ui-widget-content").attr("id",aIDs.modalcontent);
		$(mc).append(content);
		mw.appendChild(mc);
		$(mw).prepend(mh);
		if(appendsel===true) { $('body').append(mw); } //append as first child in body -for alert dialog
		else if (typeof appendsel == "string")
			$(appendsel).append(mw);
		else {$(mw).insertBefore(insertSelector);}
		$(mw).css(css);
		if(typeof p.jqModal === 'undefined') {p.jqModal = true;} // internal use
		var coord = {};
		if ( $.fn.jqm && p.jqModal === true) {
			if(p.left ===0 && p.top===0 && p.overlay) {
				var pos = [];
				pos = $.jgrid.findPos(posSelector);
				p.left = pos[0] + 4;
				p.top = pos[1] + 4;
			}
			coord.top = p.top+"px";
			coord.left = p.left;
		} else if(p.left !==0 || p.top!==0) {
			coord.left = p.left;
			coord.top = p.top+"px";
		}
		$("a.ui-jqdialog-titlebar-close",mh).click(function(){
			var oncm = $("#"+$.jgrid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
			var gboxclose = $("#"+$.jgrid.jqID(aIDs.themodal)).data("gbox") || p.gbox;
			self.hideModal("#"+$.jgrid.jqID(aIDs.themodal),{gb:gboxclose,jqm:p.jqModal,onClose:oncm});
			return false;
		});
		if (p.width === 0 || !p.width) {p.width = 300;}
		if(p.height === 0 || !p.height) {p.height =200;}
		if(!p.zIndex) {
			var parentZ = $(insertSelector).parents("*[role=dialog]").filter(':first').css("z-index");
			if(parentZ) {
				p.zIndex = parseInt(parentZ,10)+2;
			} else {
				p.zIndex = 950;
			}
		}
		var rtlt = 0;
		if( rtlsup && coord.left && !appendsel) {
			rtlt = $(p.gbox).width()- (!isNaN(p.width) ? parseInt(p.width,10) :0) - 8; // to do
		// just in case
			coord.left = parseInt(coord.left,10) + parseInt(rtlt,10);
		}
		if(coord.left) { coord.left += "px"; }
		$(mw).css($.extend({
			width: isNaN(p.width) ? "auto": p.width+"px",
			height:isNaN(p.height) ? "auto" : p.height + "px",
			zIndex:p.zIndex,
			overflow: 'hidden'
		},coord))
		.attr({tabIndex: "-1","role":"dialog","aria-labelledby":aIDs.modalhead,"aria-hidden":"true"});
		if(typeof p.drag == 'undefined') { p.drag=true;}
		if(typeof p.resize == 'undefined') {p.resize=true;}
		if (p.drag) {
			$(mh).css('cursor','move');
			if($.fn.jqDrag) {
				$(mw).jqDrag(mh);
			} else {
				try {
					$(mw).draggable({handle: $("#"+$.jgrid.jqID(mh.id))});
				} catch (e) {}
			}
		}
		if(p.resize) {
			if($.fn.jqResize) {
				$(mw).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se ui-icon-grip-diagonal-se'></div>");
				$("#"+$.jgrid.jqID(aIDs.themodal)).jqResize(".jqResize",aIDs.scrollelm ? "#"+$.jgrid.jqID(aIDs.scrollelm) : false);
			} else {
				try {
					$(mw).resizable({handles: 'se, sw',alsoResize: aIDs.scrollelm ? "#"+$.jgrid.jqID(aIDs.scrollelm) : false});
				} catch (r) {}
			}
		}
		if(p.closeOnEscape === true){
			$(mw).keydown( function( e ) {
				if( e.which == 27 ) {
					var cone = $("#"+$.jgrid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
					self.hideModal(this,{gb:p.gbox,jqm:p.jqModal,onClose: cone});
				}
			});
		}
		/*fix ie6弹出dialog会被select遮住 */
		if( $.browser.msie && parseInt($.browser.version) <= 6 ){
			$(".ui-jqdialog").bgiframe(); 
		}
	},
	viewModal : function (selector,o){
		o = $.extend({
			toTop: true,
			overlay: 10,
			modal: false,
			overlayClass : 'ui-widget-overlay',
			onShow: $.jgrid.showModal,
			onHide: $.jgrid.closeModal,
			gbox: '',
			jqm : true,
			jqM : true
		}, o || {});
		if ($.fn.jqm && o.jqm === true) {
			if(o.jqM) { $(selector).attr("aria-hidden","false").jqm(o).jqmShow(); }
			else {$(selector).attr("aria-hidden","false").jqmShow();}
		} else {
			if(o.gbox !== '') {
				$(".jqgrid-overlay:first",o.gbox).show();
				$(selector).data("gbox",o.gbox);
			}
			$(selector).show().attr("aria-hidden","false");
			try{$(':input:visible',selector)[0].focus();}catch(_){}
		}
	},


// Date Validation Javascript
	checkDate : function (format, date) {
		var daysInFebruary = function(year){
		// February has 29 days in any year evenly divisible by four,
		// EXCEPT for centurial years which are not also divisible by 400.
			return (((year % 4 === 0) && ( year % 100 !== 0 || (year % 400 === 0))) ? 29 : 28 );
		},
		DaysArray = function(n) {
			for (var i = 1; i <= n; i++) {
				this[i] = 31;
				if (i==4 || i==6 || i==9 || i==11) {this[i] = 30;}
				if (i==2) {this[i] = 29;}
			}
			return this;
		};

		var tsp = {}, sep;
		format = format.toLowerCase();
		//we search for /,-,. for the date separator
		if(format.indexOf("/") != -1) {
			sep = "/";
		} else if(format.indexOf("-") != -1) {
			sep = "-";
		} else if(format.indexOf(".") != -1) {
			sep = ".";
		} else {
			sep = "/";
		}
		format = format.split(sep);
		date = date.split(sep);
		if (date.length != 3) { return false; }
		var j=-1,yln, dln=-1, mln=-1;
		for(var i=0;i<format.length;i++){
			var dv =  isNaN(date[i]) ? 0 : parseInt(date[i],10);
			tsp[format[i]] = dv;
			yln = format[i];
			if(yln.indexOf("y") != -1) { j=i; }
			if(yln.indexOf("m") != -1) { mln=i; }
			if(yln.indexOf("d") != -1) { dln=i; }
		}
		if (format[j] == "y" || format[j] == "yyyy") {
			yln=4;
		} else if(format[j] =="yy"){
			yln = 2;
		} else {
			yln = -1;
		}
		var daysInMonth = DaysArray(12),
		strDate;
		if (j === -1) {
			return false;
		} else {
			strDate = tsp[format[j]].toString();
			if(yln == 2 && strDate.length == 1) {yln = 1;}
			if (strDate.length != yln || (tsp[format[j]]===0 && date[j]!="00")){
				return false;
			}
		}
		if(mln === -1) {
			return false;
		} else {
			strDate = tsp[format[mln]].toString();
			if (strDate.length<1 || tsp[format[mln]]<1 || tsp[format[mln]]>12){
				return false;
			}
		}
		if(dln === -1) {
			return false;
		} else {
			strDate = tsp[format[dln]].toString();
			if (strDate.length<1 || tsp[format[dln]]<1 || tsp[format[dln]]>31 || (tsp[format[mln]]==2 && tsp[format[dln]]>daysInFebruary(tsp[format[j]])) || tsp[format[dln]] > daysInMonth[tsp[format[mln]]]){
				return false;
			}
		}
		return true;
	},
	isEmpty : function(val)
	{
		if (val.match(/^\s+$/) || val === "")	{
			return true;
		} else {
			return false;
		}
	},
	checkTime : function(time){
	// checks only hh:ss (and optional am/pm)
		var re = /^(\d{1,2}):(\d{2})([ap]m)?$/,regs;
		if(!$.jgrid.isEmpty(time))
		{
			regs = time.match(re);
			if(regs) {
				if(regs[3]) {
					if(regs[1] < 1 || regs[1] > 12) { return false; }
				} else {
					if(regs[1] > 23) { return false; }
				}
				if(regs[2] > 59) {
					return false;
				}
			} else {
				return false;
			}
		}
		return true;
	}
});
})(jQuery);/*
 * jqFilter  jQuery jqGrid filter addon.
 * Copyright (c) 2011, Tony Tomov, tony@trirand.com
 * Dual licensed under the MIT and GPL licenses
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
 * The work is inspired from this Stefan Pirvu
 * http://www.codeproject.com/KB/scripting/json-filtering.aspx
 *
 * The filter uses JSON entities to hold filter rules and groups. Here is an example of a filter:

{ "groupOp": "AND",
      "groups" : [ 
        { "groupOp": "OR",
            "rules": [
                { "field": "name", "op": "eq", "data": "England" }, 
                { "field": "id", "op": "le", "data": "5"}
             ]
        } 
      ],
      "rules": [
        { "field": "name", "op": "eq", "data": "Romania" }, 
        { "field": "id", "op": "le", "data": "1"}
      ]
}
*/
/*global jQuery, $, window, navigator */

(function ($) {

$.fn.jqFilter = function( arg ) {
	if (typeof arg === 'string') {
		
		var fn = $.fn.jqFilter[arg];
		if (!fn) {
			throw ("jqFilter - No such method: " + arg);
		}
		var args = $.makeArray(arguments).slice(1);
		return fn.apply(this,args);
	}

	var p = $.extend(true,{
		filter: null,
		columns: [],
		onChange : null,
		afterRedraw : null,
		checkValues : null,
		error: false,
		errmsg : "",
		errorcheck : true,
		showQuery : true,
		sopt : null,
		ops : [
			{"name": "eq", "description": "equal", "operator":"="},
			{"name": "ne", "description": "not equal", "operator":"<>"},
			{"name": "lt", "description": "less", "operator":"<"},
			{"name": "le", "description": "less or equal","operator":"<="},
			{"name": "gt", "description": "greater", "operator":">"},
			{"name": "ge", "description": "greater or equal", "operator":">="},
			{"name": "bw", "description": "begins with", "operator":"LIKE"},
			{"name": "bn", "description": "does not begin with", "operator":"NOT LIKE"},
			{"name": "in", "description": "in", "operator":"IN"},
			{"name": "ni", "description": "not in", "operator":"NOT IN"},
			{"name": "ew", "description": "ends with", "operator":"LIKE"},
			{"name": "en", "description": "does not end with", "operator":"NOT LIKE"},
			{"name": "cn", "description": "contains", "operator":"LIKE"},
			{"name": "nc", "description": "does not contain", "operator":"NOT LIKE"},
			{"name": "nu", "description": "is null", "operator":"IS NULL"},
			{"name": "nn", "description": "is not null", "operator":"IS NOT NULL"}
		],
		numopts : ['eq','ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'],
		stropts : ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'in', 'ni'],
		_gridsopt : [], // grid translated strings, do not tuch
		groupOps : [{ op: "AND", text: "AND" },	{ op: "OR",  text: "OR" }],
		groupButton : true,
		ruleButtons : true,
		direction : "ltr"
	}, $.jgrid.filter, arg || {});
	return this.each( function() {
		if (this.filter) {return;}
		this.p = p;
		// setup filter in case if they is not defined
		if (this.p.filter === null || this.p.filter === undefined) {
			this.p.filter = {
				groupOp: this.p.groupOps[0].op,
				rules: [],
				groups: []
			};
		}
		var i, len = this.p.columns.length, cl,
		isIE = /msie/i.test(navigator.userAgent) && !window.opera;

		// translating the options
		if(this.p._gridsopt.length) {
			// ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc']
			for(i=0;i<this.p._gridsopt.length;i++) {
				this.p.ops[i].description = this.p._gridsopt[i];
			}
		}
		this.p.initFilter = $.extend(true,{},this.p.filter);

		// set default values for the columns if they are not set
		if( !len ) {return;}
		for(i=0; i < len; i++) {
			cl = this.p.columns[i];
			if( cl.stype ) {
				// grid compatibility
				cl.inputtype = cl.stype;
			} else if(!cl.inputtype) {
				cl.inputtype = 'text';
			}
			if( cl.sorttype ) {
				// grid compatibility
				cl.searchtype = cl.sorttype;
			} else if (!cl.searchtype) {
				cl.searchtype = 'string';
			}
			if(cl.hidden === undefined) {
				// jqGrid compatibility
				cl.hidden = false;
			}
			if(!cl.label) {
				cl.label = cl.name;
			}
			if(cl.index) {
				cl.name = cl.index;
			}
			if(!cl.hasOwnProperty('searchoptions')) {
				cl.searchoptions = {};
			}
			if(!cl.hasOwnProperty('searchrules')) {
				cl.searchrules = {};
			}

		}
		if(this.p.showQuery) {
			$(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='"+this.p.direction+"'><tbody><tr><td class='query'></td></tr></tbody></table>");
		}
		/*
		 *Perform checking.
		 *
		*/
		var checkData = function(val, colModelItem) {
			var ret = [true,""];
			if($.isFunction(colModelItem.searchrules)) {
				ret = colModelItem.searchrules(val, colModelItem);
			} else if($.jgrid && $.jgrid.checkValues) {
				try {
					ret = $.jgrid.checkValues(val, -1, null, colModelItem.searchrules, colModelItem.label);
				} catch (e) {}
			}
			if(ret && ret.length && ret[0] === false) {
				p.error = !ret[0];
				p.errmsg = ret[1];
			}
		};
		/* moving to common
		randId = function() {
			return Math.floor(Math.random()*10000).toString();
		};
		*/

		this.onchange = function (  ){
			// clear any error 
			this.p.error = false;
			this.p.errmsg="";
			return $.isFunction(this.p.onChange) ? this.p.onChange.call( this, this.p ) : false;
		};
		/*
		 * Redraw the filter every time when new field is added/deleted
		 * and field is  changed
		 */
		this.reDraw = function() {
			$("table.group:first",this).remove();
			var t = this.createTableForGroup(p.filter, null);
			$(this).append(t);
			if($.isFunction(this.p.afterRedraw) ) {
				this.p.afterRedraw.call(this, this.p);
			}
		};
		/*
		 * Creates a grouping data for the filter
		 * @param group - object
		 * @param parentgroup - object
		 */
		this.createTableForGroup = function(group, parentgroup) {
			var that = this,  i;
			// this table will hold all the group (tables) and rules (rows)
			var table = $("<table class='group ui-widget ui-widget-content' style='border:0px none;'><tbody></tbody></table>"),
			// create error message row
			align = "left";
			if(this.p.direction == "rtl") {
				align = "right";
				table.attr("dir","rtl");
			}
			if(parentgroup === null) {
				table.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='"+align+"'></th></tr>");
			}

			var tr = $("<tr></tr>");
			table.append(tr);
			// this header will hold the group operator type and group action buttons for
			// creating subgroup "+ {}", creating rule "+" or deleting the group "-"
			var th = $("<th colspan='5' align='"+align+"'></th>");
			tr.append(th);

			if(this.p.ruleButtons === true) {
			// dropdown for: choosing group operator type
			var groupOpSelect = $("<select class='opsel'></select>");
			th.append(groupOpSelect);
			// populate dropdown with all posible group operators: or, and
			var str= "", selected;
			for (i = 0; i < p.groupOps.length; i++) {
				selected =  group.groupOp === that.p.groupOps[i].op ? " selected='selected'" :"";
				str += "<option value='"+that.p.groupOps[i].op+"'" + selected+">"+that.p.groupOps[i].text+"</option>";
			}

			groupOpSelect
			.append(str)
			.bind('change',function() {
				group.groupOp = $(groupOpSelect).val();
				that.onchange(); // signals that the filter has changed
			});
			}
			// button for adding a new subgroup
			var inputAddSubgroup ="<span></span>";
			if(this.p.groupButton) {
				inputAddSubgroup = $("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>");
				inputAddSubgroup.bind('click',function() {
					if (group.groups === undefined ) {
						group.groups = [];
					}

					group.groups.push({
						groupOp: p.groupOps[0].op,
						rules: [],
						groups: []
					}); // adding a new group

					that.reDraw(); // the html has changed, force reDraw

					that.onchange(); // signals that the filter has changed
					return false;
				});
			}
			th.append(inputAddSubgroup);
			if(this.p.ruleButtons === true) {
			// button for adding a new rule
			var inputAddRule = $("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"), cm;
			inputAddRule.bind('click',function() {
				//if(!group) { group = {};}
				if (group.rules === undefined) {
					group.rules = [];
				}
				for (i = 0; i < that.p.columns.length; i++) {
				// but show only serchable and serchhidden = true fields
					var searchable = (typeof that.p.columns[i].search === 'undefined') ?  true: that.p.columns[i].search ,
					hidden = (that.p.columns[i].hidden === true),
					ignoreHiding = (that.p.columns[i].searchoptions.searchhidden === true);
					if ((ignoreHiding && searchable) || (searchable && !hidden)) {
						cm = that.p.columns[i];
						break;
					}
				}
				
				var opr;
				if( cm.searchoptions.sopt ) {opr = cm.searchoptions.sopt;}
				else if(that.p.sopt) { opr= that.p.sopt; }
				else if  (cm.searchtype === 'string') {opr = that.p.stropts;}
				else {opr = that.p.numopts;}

				group.rules.push({
					field: cm.name,
					op: opr[0],
					data: ""
				}); // adding a new rule

				that.reDraw(); // the html has changed, force reDraw
				// for the moment no change have been made to the rule, so
				// this will not trigger onchange event
				return false;
			});
			th.append(inputAddRule);
			}

			// button for delete the group
			if (parentgroup !== null) { // ignore the first group
				var inputDeleteGroup = $("<input type='button' value='-' title='Delete group' class='delete-group'/>");
				th.append(inputDeleteGroup);
				inputDeleteGroup.bind('click',function() {
				// remove group from parent
					for (i = 0; i < parentgroup.groups.length; i++) {
						if (parentgroup.groups[i] === group) {
							parentgroup.groups.splice(i, 1);
							break;
						}
					}

					that.reDraw(); // the html has changed, force reDraw

					that.onchange(); // signals that the filter has changed
					return false;
				});
			}

			// append subgroup rows
			if (group.groups !== undefined) {
				for (i = 0; i < group.groups.length; i++) {
					var trHolderForSubgroup = $("<tr></tr>");
					table.append(trHolderForSubgroup);

					var tdFirstHolderForSubgroup = $("<td class='first'></td>");
					trHolderForSubgroup.append(tdFirstHolderForSubgroup);

					var tdMainHolderForSubgroup = $("<td colspan='4'></td>");
					tdMainHolderForSubgroup.append(this.createTableForGroup(group.groups[i], group));
					trHolderForSubgroup.append(tdMainHolderForSubgroup);
				}
			}
			if(group.groupOp === undefined) {
				group.groupOp = that.p.groupOps[0].op;
			}

			// append rules rows
			if (group.rules !== undefined) {
				for (i = 0; i < group.rules.length; i++) {
					table.append(
                       this.createTableRowForRule(group.rules[i], group)
					);
				}
			}

			return table;
		};
		/*
		 * Create the rule data for the filter
		 */
		this.createTableRowForRule = function(rule, group ) {
			// save current entity in a variable so that it could
			// be referenced in anonimous method calls

			var that=this, tr = $("<tr></tr>"),
			//document.createElement("tr"),

			// first column used for padding
			//tdFirstHolderForRule = document.createElement("td"),
			i, op, trpar, cm, str="", selected;
			//tdFirstHolderForRule.setAttribute("class", "first");
			tr.append("<td class='first'></td>");


			// create field container
			var ruleFieldTd = $("<td class='columns'></td>");
			tr.append(ruleFieldTd);


			// dropdown for: choosing field
			var ruleFieldSelect = $("<select></select>"), ina, aoprs = [];
			ruleFieldTd.append(ruleFieldSelect);
			ruleFieldSelect.bind('change',function() {
				rule.field = $(ruleFieldSelect).val();

				trpar = $(this).parents("tr:first");
				for (i=0;i<that.p.columns.length;i++) {
					if(that.p.columns[i].name ===  rule.field) {
						cm = that.p.columns[i];
						break;
					}
				}
				if(!cm) {return;}
				cm.searchoptions.id = $.jgrid.randId();
				if(isIE && cm.inputtype === "text") {
					if(!cm.searchoptions.size) {
						cm.searchoptions.size = 10;
					}
				}
				var elm = $.jgrid.createEl(cm.inputtype,cm.searchoptions, "", true, that.p.ajaxSelectOptions, true);
				$(elm).addClass("input-elm");
				//that.createElement(rule, "");

				if( cm.searchoptions.sopt ) {op = cm.searchoptions.sopt;}
				else if(that.p.sopt) { op= that.p.sopt; }
				else if  (cm.searchtype === 'string') {op = that.p.stropts;}
				else {op = that.p.numopts;}
				// operators
				var s ="", so = 0;
				aoprs = [];
				$.each(that.p.ops, function() { aoprs.push(this.name) });
				for ( i = 0 ; i < op.length; i++) {
					ina = $.inArray(op[i],aoprs);
					if(ina !== -1) {
						if(so===0) {
							rule.op = that.p.ops[ina].name;
						}
						s += "<option value='"+that.p.ops[ina].name+"'>"+that.p.ops[ina].description+"</option>";
						so++;
					}
				}
				$(".selectopts",trpar).empty().append( s );
				$(".selectopts",trpar)[0].selectedIndex = 0;
				if( $.browser.msie && $.browser.version < 9) {
					var sw = parseInt($("select.selectopts",trpar)[0].offsetWidth) + 1;
					$(".selectopts",trpar).width( sw );
					$(".selectopts",trpar).css("width","auto");
				}
				// data
				$(".data",trpar).empty().append( elm );
				$(".input-elm",trpar).bind('change',function( e ) {
					var tmo = $(this).hasClass("ui-autocomplete-input") ? 200 :0;
					setTimeout(function(){
						var elem = e.target;
						rule.data = elem.nodeName.toUpperCase() === "SPAN" && cm.searchoptions && $.isFunction(cm.searchoptions.custom_value) ?
							cm.searchoptions.custom_value($(elem).children(".customelement:first"), 'get') : elem.value;
						that.onchange(); // signals that the filter has changed
					}, tmo);
				});
				setTimeout(function(){ //IE, Opera, Chrome
				rule.data = $(elm).val();
				that.onchange();  // signals that the filter has changed
				}, 0);
			});

			// populate drop down with user provided column definitions
			var j=0;
			for (i = 0; i < that.p.columns.length; i++) {
				// but show only serchable and serchhidden = true fields
		        var searchable = (typeof that.p.columns[i].search === 'undefined') ?  true: that.p.columns[i].search ,
		        hidden = (that.p.columns[i].hidden === true),
				ignoreHiding = (that.p.columns[i].searchoptions.searchhidden === true);
				if ((ignoreHiding && searchable) || (searchable && !hidden)) {
					selected = "";
					if(rule.field === that.p.columns[i].name) {
						selected = " selected='selected'";
						j=i;
					}
					str += "<option value='"+that.p.columns[i].name+"'" +selected+">"+that.p.columns[i].label+"</option>";
				}
			}
			ruleFieldSelect.append( str );


			// create operator container
			var ruleOperatorTd = $("<td class='operators'></td>");
			tr.append(ruleOperatorTd);
			cm = p.columns[j];
			// create it here so it can be referentiated in the onchange event
			//var RD = that.createElement(rule, rule.data);
			cm.searchoptions.id = $.jgrid.randId();
			if(isIE && cm.inputtype === "text") {
				if(!cm.searchoptions.size) {
					cm.searchoptions.size = 10;
				}
			}
			var ruleDataInput = $.jgrid.createEl(cm.inputtype,cm.searchoptions, rule.data, true, that.p.ajaxSelectOptions, true);

			// dropdown for: choosing operator
			var ruleOperatorSelect = $("<select class='selectopts'></select>");
			ruleOperatorTd.append(ruleOperatorSelect);
			ruleOperatorSelect.bind('change',function() {
				rule.op = $(ruleOperatorSelect).val();
				trpar = $(this).parents("tr:first");
				var rd = $(".input-elm",trpar)[0];
				if (rule.op === "nu" || rule.op === "nn") { // disable for operator "is null" and "is not null"
					rule.data = "";
					rd.value = "";
					rd.setAttribute("readonly", "true");
					rd.setAttribute("disabled", "true");
				} else {
					rd.removeAttribute("readonly");
					rd.removeAttribute("disabled");
				}

				that.onchange();  // signals that the filter has changed
			});

			// populate drop down with all available operators
			if( cm.searchoptions.sopt ) {op = cm.searchoptions.sopt;}
			else if(that.p.sopt) { op= that.p.sopt; }
			else if  (cm.searchtype === 'string') {op = p.stropts;}
			else {op = that.p.numopts;}
			str="";
			$.each(that.p.ops, function() { aoprs.push(this.name) });
			for ( i = 0; i < op.length; i++) {
				ina = $.inArray(op[i],aoprs);
				if(ina !== -1) {
					selected = rule.op === that.p.ops[ina].name ? " selected='selected'" : "";
					str += "<option value='"+that.p.ops[ina].name+"'"+selected+">"+that.p.ops[ina].description+"</option>";
				}
			}
			ruleOperatorSelect.append( str );
			// create data container
			var ruleDataTd = $("<td class='data'></td>");
			tr.append(ruleDataTd);

			// textbox for: data
			// is created previously
			//ruleDataInput.setAttribute("type", "text");
			ruleDataTd.append(ruleDataInput);

			$(ruleDataInput)
			.addClass("input-elm")
			.bind('change', function() {
				rule.data = cm.inputtype === 'custom' ? cm.searchoptions.custom_value($(this).children(".customelement:first"),'get') : $(this).val();
				that.onchange(); // signals that the filter has changed
			});

			// create action container
			var ruleDeleteTd = $("<td></td>");
			tr.append(ruleDeleteTd);

			// create button for: delete rule
			if(this.p.ruleButtons === true) {
			var ruleDeleteInput = $("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>");
			ruleDeleteTd.append(ruleDeleteInput);
			//$(ruleDeleteInput).html("").height(20).width(30).button({icons: {  primary: "ui-icon-minus", text:false}});
			ruleDeleteInput.bind('click',function() {
				// remove rule from group
				for (i = 0; i < group.rules.length; i++) {
					if (group.rules[i] === rule) {
						group.rules.splice(i, 1);
						break;
					}
				}

				that.reDraw(); // the html has changed, force reDraw

				that.onchange(); // signals that the filter has changed
				return false;
			});
			}
			return tr;
		};

		this.getStringForGroup = function(group) {
			var s = "(", index;
			if (group.groups !== undefined) {
				for (index = 0; index < group.groups.length; index++) {
					if (s.length > 1) {
						s += " " + group.groupOp + " ";
					}
					try {
						s += this.getStringForGroup(group.groups[index]);
					} catch (eg) {alert(eg);}
				}
			}

			if (group.rules !== undefined) {
				try{
					for (index = 0; index < group.rules.length; index++) {
						if (s.length > 1) {
							s += " " + group.groupOp + " ";
						}
						s += this.getStringForRule(group.rules[index]);
					}
				} catch (e) {alert(e);}
			}

			s += ")";

			if (s === "()") {
				return ""; // ignore groups that don't have rules
			} else {
				return s;
			}
		};
		this.getStringForRule = function(rule) {
			var opUF = "",opC="", i, cm, ret, val,
			numtypes = ['int', 'integer', 'float', 'number', 'currency']; // jqGrid
			for (i = 0; i < this.p.ops.length; i++) {
				if (this.p.ops[i].name === rule.op) {
					opUF = this.p.ops[i].operator;
					opC = this.p.ops[i].name;
					break;
				}
			}
			for (i=0; i<this.p.columns.length; i++) {
				if(this.p.columns[i].name === rule.field) {
					cm = this.p.columns[i];
					break;
				}
			}
			val = rule.data;
			if(opC === 'bw' || opC === 'bn') { val = val+"%"; }
			if(opC === 'ew' || opC === 'en') { val = "%"+val; }
			if(opC === 'cn' || opC === 'nc') { val = "%"+val+"%"; }
			if(opC === 'in' || opC === 'ni') { val = " ("+val+")"; }
			if(p.errorcheck) { checkData(rule.data, cm); }
			if($.inArray(cm.searchtype, numtypes) !== -1 || opC === 'nn' || opC === 'nu') { ret = rule.field + " " + opUF + " " + val; }
			else { ret = rule.field + " " + opUF + " \"" + val + "\""; }
			return ret;
		};
		this.resetFilter = function () {
			this.p.filter = $.extend(true,{},this.p.initFilter);
			this.reDraw();
			this.onchange();
		};
		this.hideError = function() {
			$("th.ui-state-error", this).html("");
			$("tr.error", this).hide();
		};
		this.showError = function() {
			$("th.ui-state-error", this).html(this.p.errmsg);
			$("tr.error", this).show();
		};
		this.toUserFriendlyString = function() {
			return this.getStringForGroup(p.filter);
		};
		this.toString = function() {
			// this will obtain a string that can be used to match an item.
			var that = this;
			function getStringRule(rule) {
				if(that.p.errorcheck) {
					var i, cm;
					for (i=0; i<that.p.columns.length; i++) {
						if(that.p.columns[i].name === rule.field) {
							cm = that.p.columns[i];
							break;
						}
					}
					if(cm) {checkData(rule.data, cm);}
				}
				return rule.op + "(item." + rule.field + ",'" + rule.data + "')";
			}

			function getStringForGroup(group) {
				var s = "(", index;

				if (group.groups !== undefined) {
					for (index = 0; index < group.groups.length; index++) {
						if (s.length > 1) {
							if (group.groupOp === "OR") {
								s += " || ";
							}
							else {
								s += " && ";
							}
						}
						s += getStringForGroup(group.groups[index]);
					}
				}

				if (group.rules !== undefined) {
					for (index = 0; index < group.rules.length; index++) {
						if (s.length > 1) {
							if (group.groupOp === "OR") {
								s += " || ";
							}
							else  {
								s += " && ";
							}
						}
						s += getStringRule(group.rules[index]);
					}
				}

				s += ")";

				if (s === "()") {
					return ""; // ignore groups that don't have rules
				} else {
					return s;
				}
			}

			return getStringForGroup(this.p.filter);
		};

		// Here we init the filter
		this.reDraw();

		if(this.p.showQuery) {
			this.onchange();
		}
		// mark is as created so that it will not be created twice on this element
		this.filter = true;
	});
};
$.extend($.fn.jqFilter,{
	/*
	 * Return SQL like string. Can be used directly
	 */
	toSQLString : function()
	{
		var s ="";
		this.each(function(){
			s = this.toUserFriendlyString();
		});
		return s;
	},
	/*
	 * Return filter data as object.
	 */
	filterData : function()
	{
		var s;
		this.each(function(){
			s = this.p.filter;
		});
		return s;

	},
	getParameter : function (param) {
		if(param !== undefined) {
			if (this.p.hasOwnProperty(param) ) {
				return this.p[param];
			}
		}
		return this.p;
	},
	resetFilter: function() {
		return this.each(function(){
			this.resetFilter();
		});
	},
	addFilter: function (pfilter) {
		if (typeof pfilter === "string") {
			pfilter = jQuery.jgrid.parse( pfilter );
	}
		this.each(function(){
			this.p.filter = pfilter;
			this.reDraw();
			this.onchange();
		});
	}

});
})(jQuery);

(function($){
/**
 * jqGrid extension for form editing Grid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/
"use strict";
/*global xmlJsonClass, jQuery, $  */
var rp_ge = {};
$.jgrid.extend({
	navSeparatorAdd:function (elem,p) {
		p = $.extend({
			sepclass : "ui-separator",
			sepcontent: ''
		}, p ||{});
		return this.each(function() {
			if( !this.grid)  {return;}
			if( typeof elem === "string" && elem.indexOf("#") !== 0) {elem = "#"+$.jgrid.jqID(elem);}
			var findnav = $(".navtable",elem)[0];
			if(findnav) {
				var sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='"+p.sepclass+"'></span>"+p.sepcontent+"</td>";
				$("tr",findnav).append(sep);
			}
		});
	},
	GridToForm : function( rowid, formid ) {
		return this.each(function(){
			var $t = this;
			if (!$t.grid) {return;}
			var rowdata = $($t).jqGrid("getRowData",rowid);
			if (rowdata) {
				for(var i in rowdata) {
					if ( $("[name="+$.jgrid.jqID(i)+"]",formid).is("input:radio") || $("[name="+$.jgrid.jqID(i)+"]",formid).is("input:checkbox"))  {
						$("[name="+$.jgrid.jqID(i)+"]",formid).each( function() {
							if( $(this).val() == rowdata[i] ) {
								$(this)[$t.p.useProp ? 'prop': 'attr']("checked",true);
							} else {
								$(this)[$t.p.useProp ? 'prop': 'attr']("checked", false);
							}
						});
					} else {
					// this is very slow on big table and form.
						$("[name="+$.jgrid.jqID(i)+"]",formid).val(rowdata[i]);
					}
				}
			}
		});
	},
	FormToGrid : function(rowid, formid, mode, position){
		return this.each(function() {
			var $t = this;
			if(!$t.grid) {return;}
			if(!mode) {mode = 'set';}
			if(!position) {position = 'first';}
			var fields = $(formid).serializeArray();
			var griddata = {};
			$.each(fields, function(i, field){
				griddata[field.name] = field.value;
			});
			if(mode=='add') {$($t).jqGrid("addRowData",rowid,griddata, position);}
			else if(mode=='set') {$($t).jqGrid("setRowData",rowid,griddata);}
		});
	},
	//设置选中行（onse为ture）、取消行（onse为false）
    setSelectRow : function(rowid,onsr){
        return this.each(function(){
        	var $t = this,
                isCbox = $t.p.multiselect;//是否有多选、单选列
                //$("#jqg_" + $.jgrid.jqID($t.p.id)+"_"+rowid)[0]判断的是rowid的选择框，单选情况下为undefined
                var checkEle = isCbox ? $("#jqg_" + $.jgrid.jqID($t.p.id)+"_"+rowid)[0] :{checked:false};//多选、多选框是否check
    			
    			//rowid对应行是否已经选中,选中为0，未选中为-1    
                var isSelected = isCbox ? $.inArray(rowid.toString(),$t.p.selarrrow) : ($t.p.selrow == rowid ? 0 : -1);
            	onsr = (typeof onsr == "undefined") ? true : onsr;
            
            	if( (isCbox && isSelected != -1 && !onsr) || (isCbox && isSelected == -1 && onsr) ||
                  (!isCbox && isSelected == -1 && onsr)){
                  	//单选，取消时
	                if(!checkEle && !onsr){
	                	$("[name="+ $t.p.id +"_cb]").get(rowid-1).checked = false;
	                	$t.p.selrow = null;
	                	$t.p.selarrrow = [];
	                }
	                else{
	                	$($t).jqGrid("setSelection",rowid);	
	                }
	            }
	            else if(!isCbox && isSelected != -1 && !onsr){
	                $($t.rows.namedItem($t.p.selrow)).removeClass("ui-state-highlight").attr({"aria-selected":"false", "tabindex" : "-1"});
	                $t.p.selrow = null;
	            }
	            else if(!onsr && checkEle && checkEle.checked && isCbox){
	                checkEle.checked = false;
	            }
        });
	}
});
})(jQuery);
;(function($){
/**
 * jqGrid extension for manipulating Grid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
//jsHint options
/*global alert, $, jQuery */
"use strict";
$.jgrid.inlineEdit = $.jgrid.inlineEdit || {};
$.jgrid.extend({

	restoreRow : function(rowid, afterrestorefunc) {
		// Compatible mode old versions
		var args = $.makeArray(arguments).slice(1), o={};

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
		}
		o = $.extend(true, $.jgrid.inlineEdit, o );

		// End compatible

		return this.each(function(){
			var $t= this, fr, ind, ares={};
			if (!$t.grid ) { return; }
			ind = $($t).jqGrid("getInd",rowid,true);
			if(ind === false) {return;}
			for( var k=0;k<$t.p.savedRow.length;k++) {
				if( $t.p.savedRow[k].id == rowid) {fr = k; break;}
			}
			if(fr >= 0) {
				if($.isFunction($.fn.datepicker)) {
					try {
						$("input.hasDatepicker","#"+$.jgrid.jqID(ind.id)).datepicker('hide');
					} catch (e) {}
				}
				$.each($t.p.colModel, function(){
					if(this.editable === true && this.name in $t.p.savedRow[fr] ) {
						ares[this.name] = $t.p.savedRow[fr][this.name];
					}
				});
				$($t).jqGrid("setRowData",rowid,ares);
				$(ind).attr("editable","0").unbind("keydown");
				$t.p.savedRow.splice(fr,1);
				if($("#"+$.jgrid.jqID(rowid), "#"+$.jgrid.jqID($t.p.id)).hasClass("jqgrid-new-row")){
					setTimeout(function(){$($t).jqGrid("delRowData",rowid);},0);
				}
			}
			$($t).triggerHandler("jqGridInlineAfterRestoreRow", [rowid]);
			if ($.isFunction(o.afterrestorefunc))
			{
				o.afterrestorefunc.call($t, rowid);
			}
		});
	},
	addRow : function ( p ) {
		p = $.extend(true, {
			rowID : "new_row",
			initdata : {},
			position :"first",
			useDefValues : true,
			useFormatter : false,
			addRowParams : {extraparam:{}}
		},p  || {});
		return this.each(function(){
			if (!this.grid ) { return; }
			var $t = this;
			if(p.useDefValues === true) {
				$($t.p.colModel).each(function(){
					if( this.editoptions && this.editoptions.defaultValue ) {
						var opt = this.editoptions.defaultValue,
						tmp = $.isFunction(opt) ? opt.call($t) : opt;
						p.initdata[this.name] = tmp;
					}
				});
			}
			$($t).jqGrid('addRowData', p.rowID, p.initdata, p.position);
			p.rowID = $t.p.idPrefix + p.rowID;
			$("#"+$.jgrid.jqID(p.rowID), "#"+$.jgrid.jqID($t.p.id)).addClass("jqgrid-new-row");
			if(p.useFormatter) {
				$("#"+$.jgrid.jqID(p.rowID)+" .ui-inline-edit", "#"+$.jgrid.jqID($t.p.id)).click();
			} else {
				var opers = $t.p.prmNames,
				oper = opers.oper;
				p.addRowParams.extraparam[oper] = opers.addoper;
				$($t).jqGrid('editRow', p.rowID, p.addRowParams);
				$($t).jqGrid('setSelection', p.rowID);
			}
		});
	},
	showAddEditButtons : function()  {
		return this.each(function(){
			if (!this.grid ) { return; }
			var gID = $.jgrid.jqID(this.p.id);
			$("#"+gID+"_ilsave").addClass('ui-state-disabled');
			$("#"+gID+"_ilcancel").addClass('ui-state-disabled');
			$("#"+gID+"_iladd").removeClass('ui-state-disabled');
			$("#"+gID+"_iledit").removeClass('ui-state-disabled');
		});
	}
//end inline edit
});
})(jQuery);
;(function($){
/*
**
 * jqGrid extension for cellediting Grid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
/**
 * all events and options here are aded anonynous and not in the base grid
 * since the array is to big. Here is the order of execution.
 * From this point we use jQuery isFunction
 * formatCell
 * beforeEditCell,
 * onSelectCell (used only for noneditable cels)
 * afterEditCell,
 * beforeSaveCell, (called before validation of values if any)
 * beforeSubmitCell (if cellsubmit remote (ajax))
 * afterSubmitCell(if cellsubmit remote (ajax)),
 * afterSaveCell,
 * errorCell,
 * serializeCellData - new
 * Options
 * cellsubmit (remote,clientArray) (added in grid options)
 * cellurl
 * ajaxCellOptions
* */
"use strict";
$.jgrid.extend({
	restoreCell : function(iRow, iCol) {
		return this.each(function(){
			var $t= this, fr;
			if (!$t.grid || $t.p.cellEdit !== true ) {return;}
			if ( $t.p.savedRow.length >= 1) {fr = 0;} else {fr=null;}
			if(fr !== null) {
				var cc = $("td:eq("+iCol+")",$t.rows[iRow]);
				// datepicker fix
				if($.isFunction($.fn.datepicker)) {
					try {
						$("input.hasDatepicker",cc).datepicker('hide');
					} catch (e) {}
				}
				$(cc).empty().attr("tabindex","-1");
				$($t).jqGrid("setCell",$t.rows[iRow].id, iCol, $t.p.savedRow[fr].v, false, false, true);
				$($t).triggerHandler("jqGridAfterRestoreCell", [$t.rows[iRow].id, $t.p.savedRow[fr].v, iRow, iCol]);
				if ($.isFunction($t.p.afterRestoreCell)) {
					$t.p.afterRestoreCell.call($t, $t.rows[iRow].id, $t.p.savedRow[fr].v, iRow, iCol);
				}				
				$t.p.savedRow.splice(0,1);
			}
			window.setTimeout(function () { $("#"+$t.p.knv).attr("tabindex","-1").focus();},0);
		});
	},
	nextCell : function (iRow,iCol) {
		return this.each(function (){
			var $t = this, nCol=false;
			if (!$t.grid || $t.p.cellEdit !== true) {return;}
			// try to find next editable cell
			for (var i=iCol+1; i<$t.p.colModel.length; i++) {
				if ( $t.p.colModel[i].editable ===true) {
					nCol = i; break;
				}
			}
			if(nCol !== false) {
				$($t).jqGrid("editCell",iRow,nCol,true);
			} else {
				if ($t.p.savedRow.length >0) {
					$($t).jqGrid("saveCell",iRow,iCol);
				}
			}
		});
	},
	prevCell : function (iRow,iCol) {
		return this.each(function (){
			var $t = this, nCol=false;
			if (!$t.grid || $t.p.cellEdit !== true) {return;}
			// try to find next editable cell
			for (var i=iCol-1; i>=0; i--) {
				if ( $t.p.colModel[i].editable ===true) {
					nCol = i; break;
				}
			}
			if(nCol !== false) {
				$($t).jqGrid("editCell",iRow,nCol,true);
			} else {
				if ($t.p.savedRow.length >0) {
					$($t).jqGrid("saveCell",iRow,iCol);
				}
			}
		});
	},
	GridNav : function() {
		return this.each(function () {
			var  $t = this;
			if (!$t.grid || $t.p.cellEdit !== true ) {return;}
			// trick to process keydown on non input elements
			$t.p.knv = $t.p.id + "_kn";
			var selection = $("<span style='width:0px;height:0px;background-color:black;' tabindex='0'><span tabindex='-1' style='width:0px;height:0px;background-color:grey' id='"+$t.p.knv+"'></span></span>"),
			i, kdir;
			function scrollGrid(iR, iC, tp){
				if (tp.substr(0,1)=='v') {
					var ch = $($t.grid.bDiv)[0].clientHeight,
					st = $($t.grid.bDiv)[0].scrollTop,
					nROT = $t.rows[iR].offsetTop+$t.rows[iR].clientHeight,
					pROT = $t.rows[iR].offsetTop;
					if(tp == 'vd') {
						if(nROT >= ch) {
							$($t.grid.bDiv)[0].scrollTop = $($t.grid.bDiv)[0].scrollTop + $t.rows[iR].clientHeight;
						}
					}
					if(tp == 'vu'){
						if (pROT < st ) {
							$($t.grid.bDiv)[0].scrollTop = $($t.grid.bDiv)[0].scrollTop - $t.rows[iR].clientHeight;
						}
					}
				}
				if(tp=='h') {
					var cw = $($t.grid.bDiv)[0].clientWidth,
					sl = $($t.grid.bDiv)[0].scrollLeft,
					nCOL = $t.rows[iR].cells[iC].offsetLeft+$t.rows[iR].cells[iC].clientWidth,
					pCOL = $t.rows[iR].cells[iC].offsetLeft;
					if(nCOL >= cw+parseInt(sl,10)) {
						$($t.grid.bDiv)[0].scrollLeft = $($t.grid.bDiv)[0].scrollLeft + $t.rows[iR].cells[iC].clientWidth;
					} else if (pCOL < sl) {
						$($t.grid.bDiv)[0].scrollLeft = $($t.grid.bDiv)[0].scrollLeft - $t.rows[iR].cells[iC].clientWidth;
					}
				}
			}
			function findNextVisible(iC,act){
				var ind, i;
				if(act == 'lft') {
					ind = iC+1;
					for (i=iC;i>=0;i--){
						if ($t.p.colModel[i].hidden !== true) {
							ind = i;
							break;
						}
					}
				}
				if(act == 'rgt') {
					ind = iC-1;
					for (i=iC; i<$t.p.colModel.length;i++){
						if ($t.p.colModel[i].hidden !== true) {
							ind = i;
							break;
						}						
					}
				}
				return ind;
			}

			$(selection).insertBefore($t.grid.cDiv);
			$("#"+$t.p.knv)
			.focus()
			.keydown(function (e){
				kdir = e.keyCode;
				if($t.p.direction == "rtl") {
					if(kdir===37) { kdir = 39;}
					else if (kdir===39) { kdir = 37; }
				}
				switch (kdir) {
					case 38:
						if ($t.p.iRow-1 >0 ) {
							scrollGrid($t.p.iRow-1,$t.p.iCol,'vu');
							$($t).jqGrid("editCell",$t.p.iRow-1,$t.p.iCol,false);
						}
					break;
					case 40 :
						if ($t.p.iRow+1 <=  $t.rows.length-1) {
							scrollGrid($t.p.iRow+1,$t.p.iCol,'vd');
							$($t).jqGrid("editCell",$t.p.iRow+1,$t.p.iCol,false);
						}
					break;
					case 37 :
						if ($t.p.iCol -1 >=  0) {
							i = findNextVisible($t.p.iCol-1,'lft');
							scrollGrid($t.p.iRow, i,'h');
							$($t).jqGrid("editCell",$t.p.iRow, i,false);
						}
					break;
					case 39 :
						if ($t.p.iCol +1 <=  $t.p.colModel.length-1) {
							i = findNextVisible($t.p.iCol+1,'rgt');
							scrollGrid($t.p.iRow,i,'h');
							$($t).jqGrid("editCell",$t.p.iRow,i,false);
						}
					break;
					case 13:
						if (parseInt($t.p.iCol,10)>=0 && parseInt($t.p.iRow,10)>=0) {
							$($t).jqGrid("editCell",$t.p.iRow,$t.p.iCol,true);
						}
					break;
					default :
						return true;
				}
				return false;
			});
		});
	}
/// end  cell editing
});
})(jQuery);
;(function($){
/**
 * jqGrid extension for SubGrid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/
"use strict";
$.jgrid.extend({
setSubGrid : function () {
	return this.each(function (){
		var $t = this, cm,
		suboptions = {
			plusicon : "ui-icon-plus",
			minusicon : "ui-icon-minus",
			openicon: "ui-icon-carat-1-sw",
			expandOnLoad:  false,
			delayOnLoad : 50,
			selectOnExpand : false,
			reloadOnExpand : true
		};
		$t.p.subGridOptions = $.extend(suboptions, $t.p.subGridOptions || {});
		$t.p.colNames.unshift("");
		$t.p.colModel.unshift({name:'subgrid',width: $.browser.safari ?  $t.p.subGridWidth+$t.p.cellLayout : $t.p.subGridWidth,sortable: false,resizable:false,hidedlg:true,search:false,fixed:true});
		cm = $t.p.subGridModel;
		if(cm[0]) {
			cm[0].align = $.extend([],cm[0].align || []);
			for(var i=0;i<cm[0].name.length;i++) { cm[0].align[i] = cm[0].align[i] || 'left';}
		}
	});
},
addSubGridCell :function (pos,iRow) {
	var prp='',ic,sid;
	this.each(function(){
		prp = this.formatCol(pos,iRow);
		sid= this.p.id;
		ic = this.p.subGridOptions.plusicon;
	});
	return "<td role=\"gridcell\" aria-describedby=\""+sid+"_subgrid\" class=\"ui-sgcollapsed sgcollapsed\" "+prp+"><a href='javascript:void(0);'><span class='ui-icon "+ic+"'></span></a></td>";
},
addSubGrid : function( pos, sind ) {
	return this.each(function(){
		var ts = this;
		if (!ts.grid ) { return; }
		//-------------------------
		var subGridCell = function(trdiv,cell,pos)
		{
			var tddiv = $("<td align='"+ts.p.subGridModel[0].align[pos]+"'></td>").html(cell);
			$(trdiv).append(tddiv);
		};
		var subGridXml = function(sjxml, sbid){
			var tddiv, i,  sgmap,
			dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
			trdiv = $("<tr></tr>");
			for (i = 0; i<ts.p.subGridModel[0].name.length; i++) {
				tddiv = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-"+ts.p.direction+"'></th>");
				$(tddiv).html(ts.p.subGridModel[0].name[i]);
				$(tddiv).width( ts.p.subGridModel[0].width[i]);
				$(trdiv).append(tddiv);
			}
			$(dummy).append(trdiv);
			if (sjxml){
				sgmap = ts.p.xmlReader.subgrid;
				$(sgmap.root+" "+sgmap.row, sjxml).each( function(){
					trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>");
					if(sgmap.repeatitems === true) {
						$(sgmap.cell,this).each( function(i) {
							subGridCell(trdiv, $(this).text() || '&#160;',i);
						});
					} else {
						var f = ts.p.subGridModel[0].mapping || ts.p.subGridModel[0].name;
						if (f) {
							for (i=0;i<f.length;i++) {
								subGridCell(trdiv, $(f[i],this).text() || '&#160;',i);
							}
						}
					}
					$(dummy).append(trdiv);
				});
			}
			var pID = $("table:first",ts.grid.bDiv).attr("id")+"_";
			$("#"+$.jgrid.jqID(pID+sbid)).append(dummy);
			ts.grid.hDiv.loading = false;
			$("#load_"+$.jgrid.jqID(ts.p.id)).hide();
			return false;
		};
		var subGridJson = function(sjxml, sbid){
			var tddiv,result , i,cur, sgmap,j,
			dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
			trdiv = $("<tr></tr>");
			for (i = 0; i<ts.p.subGridModel[0].name.length; i++) {
				tddiv = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-"+ts.p.direction+"'></th>");
				$(tddiv).html(ts.p.subGridModel[0].name[i]);
				$(tddiv).width( ts.p.subGridModel[0].width[i]);
				$(trdiv).append(tddiv);
			}
			$(dummy).append(trdiv);
			if (sjxml){
				sgmap = ts.p.jsonReader.subgrid;
				result = sjxml[sgmap.root];
				if ( typeof result !== 'undefined' ) {
					for (i=0;i<result.length;i++) {
						cur = result[i];
						trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>");
						if(sgmap.repeatitems === true) {
							if(sgmap.cell) { cur=cur[sgmap.cell]; }
							for (j=0;j<cur.length;j++) {
								subGridCell(trdiv, cur[j] || '&#160;',j);
							}
						} else {
							var f = ts.p.subGridModel[0].mapping || ts.p.subGridModel[0].name;
							if(f.length) {
								for (j=0;j<f.length;j++) {
									subGridCell(trdiv, cur[f[j]] || '&#160;',j);
								}
							}
						}
						$(dummy).append(trdiv);
					}
				}
			}
			var pID = $("table:first",ts.grid.bDiv).attr("id")+"_";
			$("#"+$.jgrid.jqID(pID+sbid)).append(dummy);
			ts.grid.hDiv.loading = false;
			$("#load_"+$.jgrid.jqID(ts.p.id)).hide();
			return false;
		};
		var populatesubgrid = function( rd )
		{
			var sid,dp, i, j;
			sid = $(rd).attr("id");
			dp = {nd_: (new Date().getTime())};
			dp[ts.p.prmNames.subgridid]=sid;
			if(!ts.p.subGridModel[0]) { return false; }
			if(ts.p.subGridModel[0].params) {
				for(j=0; j < ts.p.subGridModel[0].params.length; j++) {
					for(i=0; i<ts.p.colModel.length; i++) {
						if(ts.p.colModel[i].name === ts.p.subGridModel[0].params[j]) {
							dp[ts.p.colModel[i].name]= $("td:eq("+i+")",rd).text().replace(/\&#160\;/ig,'');
						}
					}
				}
			}
			if(!ts.grid.hDiv.loading) {
				ts.grid.hDiv.loading = true;
				$("#load_"+$.jgrid.jqID(ts.p.id)).show();
				if(!ts.p.subgridtype) { ts.p.subgridtype = ts.p.datatype; }
				if($.isFunction(ts.p.subgridtype)) {
					ts.p.subgridtype.call(ts, dp);
				} else {
					ts.p.subgridtype = ts.p.subgridtype.toLowerCase();
				}
				switch(ts.p.subgridtype) {
					case "xml":
					case "json":
					$.ajax($.extend({
						type:ts.p.mtype,
						url: ts.p.subGridUrl,
						dataType:ts.p.subgridtype,
						data: $.isFunction(ts.p.serializeSubGridData)? ts.p.serializeSubGridData.call(ts, dp) : dp,
						complete: function(sxml) {
							if(ts.p.subgridtype === "xml") {
								subGridXml(sxml.responseXML, sid);
							} else {
								subGridJson($.jgrid.parse(sxml.responseText),sid);
							}
							sxml=null;
						}
					}, $.jgrid.ajaxOptions, ts.p.ajaxSubgridOptions || {}));
					break;
				}
			}
			return false;
		};
		var _id, pID,atd, nhc=0, bfsc, r;
		$.each(ts.p.colModel,function(){
			if(this.hidden === true || this.name === 'rn' || this.name === 'cb') {
				nhc++;
			}
		});
		var len = ts.rows.length, i=1;
		if( sind !== undefined && sind > 0) {
			i = sind;
			len = sind+1;
		}
		while(i < len) {
			if($(ts.rows[i]).hasClass('jqgrow')) {
				$(ts.rows[i].cells[pos]).bind('click', function() {
					var tr = $(this).parent("tr")[0];
					r = tr.nextSibling;
					if($(this).hasClass("sgcollapsed")) {
						pID = ts.p.id;
						_id = tr.id;
						if(ts.p.subGridOptions.reloadOnExpand === true || ( ts.p.subGridOptions.reloadOnExpand === false && !$(r).hasClass('ui-subgrid') ) ) {
							atd = pos >=1 ? "<td colspan='"+pos+"'>&#160;</td>":"";
							bfsc = $(ts).triggerHandler("jqGridSubGridBeforeExpand", [pID + "_" + _id, _id]);
							bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
							if(bfsc && $.isFunction(ts.p.subGridBeforeExpand)) {
								bfsc = ts.p.subGridBeforeExpand.call(ts, pID+"_"+_id,_id);
							}
							if(bfsc === false) {return false;}
							$(tr).after( "<tr role='row' class='ui-subgrid'>"+atd+"<td class='ui-widget-content subgrid-cell'><span class='ui-icon "+ts.p.subGridOptions.openicon+"'></span></td><td colspan='"+parseInt(ts.p.colNames.length-1-nhc,10)+"' class='ui-widget-content subgrid-data'><div id="+pID+"_"+_id+" class='tablediv'></div></td></tr>" );
							$(ts).triggerHandler("jqGridSubGridRowExpanded", [pID + "_" + _id, _id]);
							if( $.isFunction(ts.p.subGridRowExpanded)) {
								ts.p.subGridRowExpanded.call(ts, pID+"_"+ _id,_id);
							} else {
								populatesubgrid(tr);
							}
						} else {
							$(r).show();
						}
						$(this).html("<a href='javascript:void(0);'><span class='ui-icon "+ts.p.subGridOptions.minusicon+"'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");
						if(ts.p.subGridOptions.selectOnExpand) {
							$(ts).jqGrid('setSelection',_id);
						}
					} else if($(this).hasClass("sgexpanded")) {
						bfsc = $(ts).triggerHandler("jqGridSubGridRowColapsed", [pID + "_" + _id, _id]);
						bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
						if( bfsc &&  $.isFunction(ts.p.subGridRowColapsed)) {
							_id = tr.id;
							bfsc = ts.p.subGridRowColapsed.call(ts, pID+"_"+_id,_id );
						}
						if(bfsc===false) {return false;}
						if(ts.p.subGridOptions.reloadOnExpand === true) {
							$(r).remove(".ui-subgrid");
						} else if($(r).hasClass('ui-subgrid')) { // incase of dynamic deleting
							$(r).hide();
						}
						$(this).html("<a href='javascript:void(0);'><span class='ui-icon "+ts.p.subGridOptions.plusicon+"'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed");
					}
					return false;
				});
			}
			i++;
		}
		if(ts.p.subGridOptions.expandOnLoad === true) {
			$(ts.rows).filter('.jqgrow').each(function(index,row){
				$(row.cells[0]).click();
			});
		}
		ts.subGridXml = function(xml,sid) {subGridXml(xml,sid);};
		ts.subGridJson = function(json,sid) {subGridJson(json,sid);};
	});
},
expandSubGridRow : function(rowid) {
	return this.each(function () {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.p.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgcollapsed",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				}
			}
		}
	});
},
collapseSubGridRow : function(rowid) {
	return this.each(function () {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.p.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgexpanded",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				}
			}
		}
	});
},
toggleSubGridRow : function(rowid) {
	return this.each(function () {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.p.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgcollapsed",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				} else {
					sgc = $("td.sgexpanded",rc)[0];
					if(sgc) {
						$(sgc).trigger("click");
					}
				}
			}
		}
	});
}
});
})(jQuery);
/**
 * jqGrid extension - Tree Grid
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
**/

/*global document, jQuery, $ */
(function($) {
"use strict";
$.jgrid.extend({
	setTreeNode : function(i, len){
		return this.each(function(){
			var $t = this;
			if( !$t.grid || !$t.p.treeGrid ) {return;}
			var expCol = $t.p.expColInd,
			expanded = $t.p.treeReader.expanded_field,
			isLeaf = $t.p.treeReader.leaf_field,
			level = $t.p.treeReader.level_field,
			icon = $t.p.treeReader.icon_field,
			loaded = $t.p.treeReader.loaded,  lft, rgt, curLevel, ident,lftpos, twrap,
			ldat, lf;
			while(i<len) {
				var ind = $t.rows[i].id, dind = $t.p._index[ind], expan;
				ldat = $t.p.data[dind];
				//$t.rows[i].level = ldat[level];
				if($t.p.treeGridModel == 'nested') {
					if(!ldat[isLeaf]) {
					lft = parseInt(ldat[$t.p.treeReader.left_field],10);
					rgt = parseInt(ldat[$t.p.treeReader.right_field],10);
					// NS Model
						ldat[isLeaf] = (rgt === lft+1) ? 'true' : 'false';
						$t.rows[i].cells[$t.p._treeleafpos].innerHTML = ldat[isLeaf];
					}
				}
				//else {
					//row.parent_id = rd[$t.p.treeReader.parent_id_field];
				//}
				curLevel = parseInt(ldat[level],10);
				if($t.p.tree_root_level === 0) {
					ident = curLevel+1;
					lftpos = curLevel;
				} else {
					ident = curLevel;
					lftpos = curLevel -1;
				}
				twrap = "<div class='tree-wrap tree-wrap-"+$t.p.direction+"' style='width:"+(ident*18)+"px;'>";
				twrap += "<div style='"+($t.p.direction=="rtl" ? "right:" : "left:")+(lftpos*18)+"px;' class='ui-icon ";


				if(ldat[loaded] !== undefined) {
					if(ldat[loaded]=="true" || ldat[loaded]===true) {
						ldat[loaded] = true;
					} else {
						ldat[loaded] = false;
					}
				}
				if(ldat[isLeaf] == "true" || ldat[isLeaf] === true) {
					twrap += ((ldat[icon] !== undefined && ldat[icon] !== "") ? ldat[icon] : $t.p.treeIcons.leaf)+" tree-leaf treeclick";
					ldat[isLeaf] = true;
					lf="leaf";
				} else {
					ldat[isLeaf] = false;
					lf="";
				}
				ldat[expanded] = ((ldat[expanded] == "true" || ldat[expanded] === true) ? true : false) && ldat[loaded];
				if(ldat[expanded] === false) {
					twrap += ((ldat[isLeaf] === true) ? "'" : $t.p.treeIcons.plus+" tree-plus treeclick'");
				} else {
					twrap += ((ldat[isLeaf] === true) ? "'" : $t.p.treeIcons.minus+" tree-minus treeclick'");
				}
				
				twrap += "></div></div>";
				$($t.rows[i].cells[expCol]).wrapInner("<span class='cell-wrapper"+lf+"'></span>").prepend(twrap);

				if(curLevel !== parseInt($t.p.tree_root_level,10)) {
					var pn = $($t).jqGrid('getNodeParent',ldat);
					expan = pn && pn.hasOwnProperty(expanded) ? pn[expanded] : true;
					if( !expan ){
						$($t.rows[i]).css("display","none");
					}
				}
				$($t.rows[i].cells[expCol])
					.find("div.treeclick")
					.bind("click",function(e){
						var target = e.target || e.srcElement,
						ind2 =$(target,$t.rows).closest("tr.jqgrow")[0].id,
						pos = $t.p._index[ind2];
						if(!$t.p.data[pos][isLeaf]){
							if($t.p.data[pos][expanded]){
								$($t).jqGrid("collapseRow",$t.p.data[pos]);
								$($t).jqGrid("collapseNode",$t.p.data[pos]);
							} else {
								$($t).jqGrid("expandRow",$t.p.data[pos]);
								$($t).jqGrid("expandNode",$t.p.data[pos]);
							}
						}
						return false;
					});
				if($t.p.ExpandColClick === true) {
					$($t.rows[i].cells[expCol])
						.find("span.cell-wrapper")
						.css("cursor","pointer")
						.bind("click",function(e) {
							var target = e.target || e.srcElement,
							ind2 =$(target,$t.rows).closest("tr.jqgrow")[0].id,
							pos = $t.p._index[ind2];
							if(!$t.p.data[pos][isLeaf]){
								if($t.p.data[pos][expanded]){
									$($t).jqGrid("collapseRow",$t.p.data[pos]);
									$($t).jqGrid("collapseNode",$t.p.data[pos]);
								} else {
									$($t).jqGrid("expandRow",$t.p.data[pos]);
									$($t).jqGrid("expandNode",$t.p.data[pos]);
								}
							}
							$($t).jqGrid("setSelection",ind2);
							return false;
						});
				}
				i++;
			}

		});
	},
	setTreeGrid : function() {
		return this.each(function (){
			var $t = this, i=0, pico, ecol = false, nm, key, dupcols=[];
			if(!$t.p.treeGrid) {return;}
			if(!$t.p.treedatatype ) {$.extend($t.p,{treedatatype: $t.p.datatype});}
			$t.p.subGrid = false;$t.p.altRows =false;
			$t.p.pgbuttons = false;$t.p.pginput = false;
			$t.p.gridview =  true;
			if($t.p.rowTotal === null ) { $t.p.rowNum = 10000; }
			$t.p.multiselect = false;$t.p.rowList = [];
			$t.p.expColInd = 0;
			pico = 'ui-icon-triangle-1-' + ($t.p.direction=="rtl" ? 'w' : 'e');
			$t.p.treeIcons = $.extend({plus:pico,minus:'ui-icon-triangle-1-s',leaf:'ui-icon-radio-off'},$t.p.treeIcons || {});
			if($t.p.treeGridModel == 'nested') {
				$t.p.treeReader = $.extend({
					level_field: "level",
					left_field:"lft",
					right_field: "rgt",
					leaf_field: "isLeaf",
					expanded_field: "expanded",
					loaded: "loaded",
					icon_field: "icon"
				},$t.p.treeReader);
			} else if($t.p.treeGridModel == 'adjacency') {
				$t.p.treeReader = $.extend({
						level_field: "level",
						parent_id_field: "parent",
						leaf_field: "isLeaf",
						expanded_field: "expanded",
						loaded: "loaded",
						icon_field: "icon"
				},$t.p.treeReader );
			}
			for ( key in $t.p.colModel){
				if($t.p.colModel.hasOwnProperty(key)) {
					nm = $t.p.colModel[key].name;
					if( nm == $t.p.ExpandColumn && !ecol ) {
						ecol = true;
						$t.p.expColInd = i;
					}
					i++;
					//
					for(var tkey in $t.p.treeReader) {
						if($t.p.treeReader[tkey] == nm) {
							dupcols.push(nm);
						}
					}
				}
			}
			$.each($t.p.treeReader,function(j,n){
				if(n && $.inArray(n, dupcols) === -1){
					if(j==='leaf_field') { $t.p._treeleafpos= i; }
				i++;
					$t.p.colNames.push(n);
					$t.p.colModel.push({name:n,width:1,hidden:true,sortable:false,resizable:false,hidedlg:true,editable:true,search:false});
				}
			});			
		});
	},
	expandRow: function (record){
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			var childern = $($t).jqGrid("getNodeChildren",record),
			//if ($($t).jqGrid("isVisibleNode",record)) {
			expanded = $t.p.treeReader.expanded_field,
			rows = $t.rows;
			$(childern).each(function(){
				var id  = $.jgrid.getAccessor(this,$t.p.localReader.id);
				$(rows.namedItem(id)).css("display","");
				if(this[expanded]) {
					$($t).jqGrid("expandRow",this);
				}
			});
			//}
		});
	},
	collapseRow : function (record) {
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			var childern = $($t).jqGrid("getNodeChildren",record),
			expanded = $t.p.treeReader.expanded_field,
			rows = $t.rows;
			$(childern).each(function(){
				var id  = $.jgrid.getAccessor(this,$t.p.localReader.id);
				$(rows.namedItem(id)).css("display","none");
				if(this[expanded]){
					$($t).jqGrid("collapseRow",this);
				}
			});
		});
	},
	// NS ,adjacency models
	getRootNodes : function() {
		var result = [];
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			switch ($t.p.treeGridModel) {
				case 'nested' :
					var level = $t.p.treeReader.level_field;
					$($t.p.data).each(function(){
						if(parseInt(this[level],10) === parseInt($t.p.tree_root_level,10)) {
							result.push(this);
						}
					});
					break;
				case 'adjacency' :
					var parent_id = $t.p.treeReader.parent_id_field;
					$($t.p.data).each(function(){
						if(this[parent_id]==undefined||this[parent_id]==""||this[parent_id]=="undefined"||this[parent_id] === null || String(this[parent_id]).toLowerCase() == "null") {
								result.push(this);
						}
					});
					break;
			}
		});
		return result;
	},
	getNodeDepth : function(rc) {
		var ret = null;
		this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var $t = this;
			switch ($t.p.treeGridModel) {
				case 'nested' :
					var level = $t.p.treeReader.level_field;
					ret = parseInt(rc[level],10) - parseInt($t.p.tree_root_level,10);
					break;
				case 'adjacency' :
					ret = $($t).jqGrid("getNodeAncestors",rc).length;
					break;
			}
		});
		return ret;
	},
	getNodeParent : function(rc) {
		var result = null;
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			switch ($t.p.treeGridModel) {
				case 'nested' :
					var lftc = $t.p.treeReader.left_field,
					rgtc = $t.p.treeReader.right_field,
					levelc = $t.p.treeReader.level_field,
					lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
					$(this.p.data).each(function(){
						if(parseInt(this[levelc],10) === level-1 && parseInt(this[lftc],10) < lft && parseInt(this[rgtc],10) > rgt) {
							result = this;
							return false;
						}
					});
					break;
				case 'adjacency' :
					var parent_id = $t.p.treeReader.parent_id_field,
					dtid = $t.p.localReader.id;
					$(this.p.data).each(function(){
						if(this[dtid] == rc[parent_id] ) {
							result = this;
							return false;
						}
					});
					break;
			}
		});
		return result;
	},
	getNodeChildren : function(rc) {
		var result = [];
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			switch ($t.p.treeGridModel) {
				case 'nested' :
					var lftc = $t.p.treeReader.left_field,
					rgtc = $t.p.treeReader.right_field,
					levelc = $t.p.treeReader.level_field,
					lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
					$(this.p.data).each(function(){
						if(parseInt(this[levelc],10) === level+1 && parseInt(this[lftc],10) > lft && parseInt(this[rgtc],10) < rgt) {
							result.push(this);
						}
					});
					break;
				case 'adjacency' :
					var parent_id = $t.p.treeReader.parent_id_field,
					dtid = $t.p.localReader.id;
					$(this.p.data).each(function(){
						if(this[parent_id] == rc[dtid]) {
							result.push(this);
						}
					});
					break;
			}
		});
		return result;
	},
	getFullTreeNode : function(rc) {
		var result = [];
		this.each(function(){
			var $t = this, len;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			switch ($t.p.treeGridModel) {
				case 'nested' :
					var lftc = $t.p.treeReader.left_field,
					rgtc = $t.p.treeReader.right_field,
					levelc = $t.p.treeReader.level_field,
					lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
					$(this.p.data).each(function(){
						if(parseInt(this[levelc],10) >= level && parseInt(this[lftc],10) >= lft && parseInt(this[lftc],10) <= rgt) {
							result.push(this);
						}
					});
					break;
				case 'adjacency' :
					if(rc) {
					result.push(rc);
					var parent_id = $t.p.treeReader.parent_id_field,
					dtid = $t.p.localReader.id;
					$(this.p.data).each(function(i){
						len = result.length;
						for (i = 0; i < len; i++) {
							if (result[i][dtid] == this[parent_id]) {
								result.push(this);
								break;
							}
						}
					});
					}
					break;
			}
		});
		return result;
	},	
	// End NS, adjacency Model
	getNodeAncestors : function(rc) {
		var ancestors = [];
		this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var parent = $(this).jqGrid("getNodeParent",rc);
			while (parent) {
				ancestors.push(parent);
				parent = $(this).jqGrid("getNodeParent",parent);	
			}
		});
		return ancestors;
	},
	isVisibleNode : function(rc) {
		var result = true;
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			var ancestors = $($t).jqGrid("getNodeAncestors",rc),
			expanded = $t.p.treeReader.expanded_field;
			$(ancestors).each(function(){
				result = result && this[expanded];
				if(!result) {return false;}
			});
		});
		return result;
	},
	isNodeLoaded : function(rc) {
		var result;
		this.each(function(){
			var $t = this;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			var isLeaf = $t.p.treeReader.leaf_field;
			if(rc !== undefined ) {
				if(rc.loaded !== undefined) {
					result = rc.loaded;
				} else if( rc[isLeaf] || $($t).jqGrid("getNodeChildren",rc).length > 0){
					result = true;
				} else {
					result = false;
				}
			} else {
				result = false;
			}
		});
		return result;
	},
	expandNode : function(rc) {
		return this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var expanded = this.p.treeReader.expanded_field,
			parent = this.p.treeReader.parent_id_field,
			loaded = this.p.treeReader.loaded,
			level = this.p.treeReader.level_field,
			lft = this.p.treeReader.left_field,
			rgt = this.p.treeReader.right_field;

			if(!rc[expanded]) {
				var id = $.jgrid.getAccessor(rc,this.p.localReader.id);
				var rc1 = $("#"+$.jgrid.jqID(id),this.grid.bDiv)[0];
				var position = this.p._index[id];
				if( $(this).jqGrid("isNodeLoaded",this.p.data[position]) ) {
					rc[expanded] = true;
					$("div.treeclick",rc1).removeClass(this.p.treeIcons.plus+" tree-plus").addClass(this.p.treeIcons.minus+" tree-minus");
				} else if (!this.grid.hDiv.loading) {
					rc[expanded] = true;
					$("div.treeclick",rc1).removeClass(this.p.treeIcons.plus+" tree-plus").addClass(this.p.treeIcons.minus+" tree-minus");
					this.p.treeANode = rc1.rowIndex;
					this.p.datatype = this.p.treedatatype;
					if(this.p.treeGridModel == 'nested') {
						$(this).jqGrid("setGridParam",{postData:{nodeid:id,n_left:rc[lft],n_right:rc[rgt],n_level:rc[level]}});
					} else {
						$(this).jqGrid("setGridParam",{postData:{nodeid:id,parentid:rc[parent],n_level:rc[level]}} );
					}
					$(this).trigger("reloadGrid");
					rc[loaded] = true;
					if(this.p.treeGridModel == 'nested') {
						$(this).jqGrid("setGridParam",{postData:{nodeid:'',n_left:'',n_right:'',n_level:''}});
					} else {
						$(this).jqGrid("setGridParam",{postData:{nodeid:'',parentid:'',n_level:''}}); 
					}
				}
			}
		});
	},
	collapseNode : function(rc) {
		return this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var expanded = this.p.treeReader.expanded_field;
			if(rc[expanded]) {
				rc[expanded] = false;
				var id = $.jgrid.getAccessor(rc,this.p.localReader.id);
				var rc1 = $("#"+$.jgrid.jqID(id),this.grid.bDiv)[0];
				$("div.treeclick",rc1).removeClass(this.p.treeIcons.minus+" tree-minus").addClass(this.p.treeIcons.plus+" tree-plus");
			}
		});
	},
	SortTree : function( sortname, newDir, st, datefmt) {
		return this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var i, len,
			rec, records = [], $t = this, query, roots,
			rt = $(this).jqGrid("getRootNodes");
			// Sorting roots
			query = $.jgrid.from(rt);
			query.orderBy(sortname,newDir,st, datefmt);
			roots = query.select();

			// Sorting children
			for (i = 0, len = roots.length; i < len; i++) {
				rec = roots[i];
				records.push(rec);
				$(this).jqGrid("collectChildrenSortTree",records, rec, sortname, newDir,st, datefmt);
			}
			$.each(records, function(index) {
				var id  = $.jgrid.getAccessor(this,$t.p.localReader.id);
				$('#'+$.jgrid.jqID($t.p.id)+ ' tbody tr:eq('+index+')').after($('tr#'+$.jgrid.jqID(id),$t.grid.bDiv));
			});
			query = null;roots=null;records=null;
		});
	},
	collectChildrenSortTree : function(records, rec, sortname, newDir,st, datefmt) {
		return this.each(function(){
			if(!this.grid || !this.p.treeGrid) {return;}
			var i, len,
			child, ch, query, children;
			ch = $(this).jqGrid("getNodeChildren",rec);
			query = $.jgrid.from(ch);
			query.orderBy(sortname, newDir, st, datefmt);
			children = query.select();
			for (i = 0, len = children.length; i < len; i++) {
				child = children[i];
				records.push(child);
				$(this).jqGrid("collectChildrenSortTree",records, child, sortname, newDir, st, datefmt); 
			}
		});
	},
	// experimental 
	setTreeRow : function(rowid, data) {
		var success=false;
		this.each(function(){
			var t = this;
			if(!t.grid || !t.p.treeGrid) {return;}
			success = $(t).jqGrid("setRowData",rowid,data);
		});
		return success;
	},
	delTreeNode : function (rowid) {
		return this.each(function () {
			var $t = this, rid = $t.p.localReader.id,
			left = $t.p.treeReader.left_field,
			right = $t.p.treeReader.right_field, myright, width, res, key;
			if(!$t.grid || !$t.p.treeGrid) {return;}
			var rc = $t.p._index[rowid];
			if (rc !== undefined) {
				// nested
				myright = parseInt($t.p.data[rc][right],10);
				width = myright -  parseInt($t.p.data[rc][left],10) + 1;
				var dr = $($t).jqGrid("getFullTreeNode",$t.p.data[rc]);
				if(dr.length>0){
					for (var i=0;i<dr.length;i++){
						$($t).jqGrid("delRowData",dr[i][rid]);
					}
				}
				if( $t.p.treeGridModel === "nested") {
					// ToDo - update grid data
					res = $.jgrid.from($t.p.data)
						.greater(left,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) - width ;
							}
						}
					}
					res = $.jgrid.from($t.p.data)
						.greater(right,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) - width ;
							}
						}
					}
				}
			}
		});
	},
	addChildNode : function( nodeid, parentid, data ) {
		//return this.each(function(){
		var $t = this[0];
		if(data) {
			// we suppose tha the id is autoincremet and
			var expanded = $t.p.treeReader.expanded_field,
			isLeaf = $t.p.treeReader.leaf_field,
			level = $t.p.treeReader.level_field,
			//icon = $t.p.treeReader.icon_field,
			parent = $t.p.treeReader.parent_id_field,
			left = $t.p.treeReader.left_field,
			right = $t.p.treeReader.right_field,
			loaded = $t.p.treeReader.loaded,
			method, parentindex, parentdata, parentlevel, i, len, max=0, rowind = parentid, leaf, maxright;

			if ( typeof nodeid === 'undefined' || nodeid === null ) {
				i = $t.p.data.length-1;
				if(	i>= 0 ) {
					while(i>=0){max = Math.max(max, parseInt($t.p.data[i][$t.p.localReader.id],10)); i--;}
				}
				nodeid = max+1;
			}
			var prow = $($t).jqGrid('getInd', parentid);
				leaf = false;
				// if not a parent we assume root
				if ( parentid === undefined  || parentid === null || parentid==="") {
					parentid = null;
					rowind = null;
					method = 'last';
					parentlevel = $t.p.tree_root_level;
					i = $t.p.data.length+1;
				} else {
					method = 'after';
					parentindex = $t.p._index[parentid];
					parentdata = $t.p.data[parentindex];
					parentid = parentdata[$t.p.localReader.id];
					parentlevel = parseInt(parentdata[level],10)+1;
					var childs = $($t).jqGrid('getFullTreeNode', parentdata);
					// if there are child nodes get the last index of it
					if(childs.length) {
						i = childs[childs.length-1][$t.p.localReader.id];
						rowind = i;
						i = $($t).jqGrid('getInd',rowind)+1;
					} else {
						i = $($t).jqGrid('getInd', parentid)+1;
					}
					// if the node is leaf
					if(parentdata[isLeaf]) {
						leaf = true;
						parentdata[expanded] = true;
						//var prow = $($t).jqGrid('getInd', parentid);
						$($t.rows[prow])
							.find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper")
							.end()
							.find("div.tree-leaf").removeClass($t.p.treeIcons.leaf+" tree-leaf").addClass($t.p.treeIcons.minus+" tree-minus");
						$t.p.data[parentindex][isLeaf] = false;
						parentdata[loaded] = true;
					}
				}
				len = i+1;

			data[expanded] = false;
			data[loaded] = true;
			data[level] = parentlevel;
			data[isLeaf] = true;
			if( $t.p.treeGridModel === "adjacency") {
				data[parent] = parentid;
			}
			if( $t.p.treeGridModel === "nested") {
				// this method requiere more attention
				var query, res, key;
				//maxright = parseInt(maxright,10);
				// ToDo - update grid data
				if(parentid !== null) {
					maxright = parseInt(parentdata[right],10);
					query = $.jgrid.from($t.p.data);
					query = query.greaterOrEquals(right,maxright,{stype:'integer'});
					res = query.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = res[key][left] > maxright ? parseInt(res[key][left],10) +2 : res[key][left];
								res[key][right] = res[key][right] >= maxright ? parseInt(res[key][right],10) +2 : res[key][right];
							}
						}
					}
					data[left] = maxright;
					data[right]= maxright+1;
				} else {
					maxright = parseInt( $($t).jqGrid('getCol', right, false, 'max'), 10);
					res = $.jgrid.from($t.p.data)
						.greater(left,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) +2 ;
							}
						}
					}
					res = $.jgrid.from($t.p.data)
						.greater(right,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) +2 ;
							}
						}
					}
					data[left] = maxright+1;
					data[right] = maxright + 2;
				}
			}
			if( parentid === null || $($t).jqGrid("isNodeLoaded",parentdata) || leaf ) {
					$($t).jqGrid('addRowData', nodeid, data, method, rowind);
					$($t).jqGrid('setTreeNode', i, len);
			}
			if(parentdata && !parentdata[expanded]) {
				$($t.rows[prow])
					.find("div.treeclick")
					.click();
			}
		}
		//});
	}
});
})(jQuery);
// Grouping module
;(function($){
"use strict";
$.extend($.jgrid,{
	template : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1), j = 1;
		if(format===undefined) { format = ""; }
		return format.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function(m,i){
			if(!isNaN(parseInt(i,10))) {
				j++;
				return args[parseInt(i,10)];
			} else {
				var nmarr = args[ j ],
				k = nmarr.length;
				while(k--) {
					if(i===nmarr[k].nm) {
						return nmarr[k].v;
						break;
					}
				}
				j++;
			}
		});
	}
});
$.jgrid.extend({
	
	groupingPrepare : function (rData, gdata, record, irow) {
		this.each(function(){
			var grp = this.p.groupingView, $t= this;
			var grlen = grp.groupField.length, 
			fieldName,
			v,
			changed = 0;
			for(var i=0;i<grlen;i++) {
				fieldName = grp.groupField[i];
				v = record[fieldName];
				if( v !== undefined ) {
					if(irow === 0 ) {
						// First record always starts a new group
						grp.groups.push({idx:i,dataIndex:fieldName,value:v, startRow: irow, cnt:1, summary : [] } );
						grp.lastvalues[i] = v;
						grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
						$.each(grp.counters[i].summary,function() {
							if ($.isFunction(this.st)) {
								this.v = this.st.call($t, this.v, this.nm, record);
							} else {
								this.v = $($t).jqGrid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
							}
						});
						grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
					} else {
						if( (typeof(v) !== "object" && (grp.lastvalues[i] !== v) ) ) {
							// This record is not in same group as previous one
							grp.groups.push({idx:i,dataIndex:fieldName,value:v, startRow: irow, cnt:1, summary : [] } );
							grp.lastvalues[i] = v;
							changed = 1;
							grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
							$.each(grp.counters[i].summary,function() {
								if ($.isFunction(this.st)) {
									this.v = this.st.call($t, this.v, this.nm, record);
								} else {
									this.v = $($t).jqGrid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
								}
							});
							grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
						} else {
							if (changed === 1) {
								// This group has changed because an earlier group changed.
								grp.groups.push({idx:i,dataIndex:fieldName,value:v, startRow: irow, cnt:1, summary : [] } );
								grp.lastvalues[i] = v;
								grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
								$.each(grp.counters[i].summary,function() {
									if ($.isFunction(this.st)) {
										this.v = this.st.call($t, this.v, this.nm, record);
									} else {
										this.v = $($t).jqGrid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
									}
								});
								grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
							} else {
								grp.counters[i].cnt += 1;
								grp.groups[grp.counters[i].pos].cnt = grp.counters[i].cnt;
								$.each(grp.counters[i].summary,function() {
									if ($.isFunction(this.st)) {
										this.v = this.st.call($t, this.v, this.nm, record);
									} else {
										this.v = $($t).jqGrid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
									}
								});
								grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
							}
						}
					}
				}
			}
			gdata.push( rData );
		});
		return gdata;
	},
	groupingToggle : function(hid){
		this.each(function(){
			var $t = this,
			grp = $t.p.groupingView,
			strpos = hid.split('_'),
			//uid = hid.substring(0,strpos+1),
			num = parseInt(strpos[strpos.length-2], 10);
			strpos.splice(strpos.length-2,2);
			var uid = strpos.join("_"),
			minus = grp.minusicon,
			plus = grp.plusicon,
			tar = $("#"+$.jgrid.jqID(hid)),
			r = tar.length ? tar[0].nextSibling : null,
			tarspan = $("#"+$.jgrid.jqID(hid)+" span."+"tree-wrap-"+$t.p.direction),
			collapsed = false;
			if( tarspan.hasClass(minus) ) {
				if(grp.showSummaryOnHide) {
					if(r){
						while(r) {
							if($(r).hasClass('jqfoot') ) { break; }
							$(r).hide();
							r = r.nextSibling;
						}
					}
				} else  {
					if(r){
						while(r) {
							if( $(r).hasClass(uid+"_"+String(num) ) || $(r).hasClass(uid+"_"+String(num-1))) { break; }
							$(r).hide();
							r = r.nextSibling;
						}
					}
				}
				tarspan.removeClass(minus).addClass(plus);
				collapsed = true;
			} else {
				if(r){
					while(r) {
						if($(r).hasClass(uid+"_"+String(num)) || $(r).hasClass(uid+"_"+String(num-1)) ) { break; }
						$(r).show();
						r = r.nextSibling;
					}
				}
				tarspan.removeClass(plus).addClass(minus);
			}
			$($t).triggerHandler("jqGridGroupingClickGroup", [hid , collapsed]);
			if( $.isFunction($t.p.onClickGroup)) { $t.p.onClickGroup.call($t, hid , collapsed); }

		});
		return false;
	},
	
	groupingGroupBy : function (name, options ) {
		return this.each(function(){
			var $t = this;
			if(typeof(name) === "string") {
				name = [name];
			}
			var grp = $t.p.groupingView;
			$t.p.grouping = true;

			//Set default, in case visibilityOnNextGrouping is undefined 
			if (typeof grp.visibiltyOnNextGrouping === "undefined") {
				grp.visibiltyOnNextGrouping = [];
			}
			var i;
			// show previous hidden groups if they are hidden and weren't removed yet
			for(i=0;i<grp.groupField.length;i++) {
				if(!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
				$($t).jqGrid('showCol',grp.groupField[i]);
				}
			}
			// set visibility status of current group columns on next grouping
			for(i=0;i<name.length;i++) {
				grp.visibiltyOnNextGrouping[i] = $("#"+$.jgrid.jqID($t.p.id)+"_"+$.jgrid.jqID(name[i])).is(":visible");
			}
			$t.p.groupingView = $.extend($t.p.groupingView, options || {});
			grp.groupField = name;
			$($t).trigger("reloadGrid");
		});
	},
	groupingRemove : function (current) {
		return this.each(function(){
			var $t = this;
			if(typeof(current) === 'undefined') {
				current = true;
			}
			$t.p.grouping = false;
			if(current===true) {
				var grp = $t.p.groupingView;
				// show previous hidden groups if they are hidden and weren't removed yet
				for(var i=0;i<grp.groupField.length;i++) {
				if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
						$($t).jqGrid('showCol', grp.groupField);
					}
				}
				$("tr.jqgroup, tr.jqfoot","#"+$.jgrid.jqID($t.p.id)+" tbody:first").remove();
				$("tr.jqgrow:hidden","#"+$.jgrid.jqID($t.p.id)+" tbody:first").show();
			} else {
				$($t).trigger("reloadGrid");
			}
		});
	},
	groupingCalculations : {
		handler: function(fn, v, field, round, roundType, rc) {
			var funcs = {
				sum: function() {
					return parseFloat(v||0) + parseFloat((rc[field]||0));
				},

				min: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.min(parseFloat(v),parseFloat(rc[field]||0));
				},

				max: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.max(parseFloat(v),parseFloat(rc[field]||0));
				},

				count: function() {
					if(v==="") {v=0;}
					if(rc.hasOwnProperty(field)) {
						return v+1;
					} else {
						return 0;
					}
				},

				avg: function() {
					// the same as sum, but at end we divide it
					// so use sum instead of duplicating the code (?)
					return funcs.sum();
				}
			}

			if(!funcs[fn]) {
				throw ("jqGrid Grouping No such method: " + fn);
			}
			var res = funcs[fn]();

			if (round != null) {
				if (roundType == 'fixed')
					res = res.toFixed(round);
				else {
					var mul = Math.pow(10, round);

					res = Math.round(res * mul) / mul;
				}
			}

			return res;
		}	
	}
});
})(jQuery);
;(function($){
/*
 * jqGrid extension for constructing Grid Data from external file
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
//jsHint options
/*global jQuery, $, alert, xmlJsonClass */

"use strict";
    $.jgrid.extend({
        jqGridImport : function(o) {
            o = $.extend({
                imptype : "xml", // xml, json, xmlstring, jsonstring
                impstring: "",
                impurl: "",
                mtype: "GET",
                impData : {},
                xmlGrid :{
                    config : "roots>grid",
                    data: "roots>rows"
                },
                jsonGrid :{
                    config : "grid",
                    data: "data"
                },
                ajaxOptions :{}
            }, o || {});
            return this.each(function(){
                var $t = this;
                var xmlConvert = function (xml,o) {
                    var cnfg = $(o.xmlGrid.config,xml)[0];
                    var xmldata = $(o.xmlGrid.data,xml)[0], jstr, jstr1;
                    if(xmlJsonClass.xml2json && $.jgrid.parse) {
                        jstr = xmlJsonClass.xml2json(cnfg," ");
                        jstr = $.jgrid.parse(jstr);
                        for(var key in jstr) {
                            if(jstr.hasOwnProperty(key)) {
                                jstr1=jstr[key];
                            }
                        }
                        if(xmldata) {
                        // save the datatype
                            var svdatatype = jstr.grid.datatype;
                            jstr.grid.datatype = 'xmlstring';
                            jstr.grid.datastr = xml;
                            $($t).jqGrid( jstr1 ).jqGrid("setGridParam",{datatype:svdatatype});
                        } else {
                            $($t).jqGrid( jstr1 );
                        }
                        jstr = null;jstr1=null;
                    } else {
                        alert("xml2json or parse are not present");
                    }
                };
                var jsonConvert = function (jsonstr,o){
                    if (jsonstr && typeof jsonstr == 'string') {
						var _jsonparse = false;
						if($.jgrid.useJSON) {
							$.jgrid.useJSON = false;
							_jsonparse = true;
						}
                        var json = $.jgrid.parse(jsonstr);
						if(_jsonparse) { $.jgrid.useJSON = true; }
                        var gprm = json[o.jsonGrid.config];
                        var jdata = json[o.jsonGrid.data];
                        if(jdata) {
                            var svdatatype = gprm.datatype;
                            gprm.datatype = 'jsonstring';
                            gprm.datastr = jdata;
                            $($t).jqGrid( gprm ).jqGrid("setGridParam",{datatype:svdatatype});
                        } else {
                            $($t).jqGrid( gprm );
                        }
                    }
                };
                switch (o.imptype){
                    case 'xml':
                        $.ajax($.extend({
                            url:o.impurl,
                            type:o.mtype,
                            data: o.impData,
                            dataType:"xml",
                            complete: function(xml,stat) {
                                if(stat == 'success') {
                                    xmlConvert(xml.responseXML,o);
                                    $($t).triggerHandler("jqGridImportComplete", [xml, o]);
                                    if($.isFunction(o.importComplete)) {
                                        o.importComplete(xml);
                                    }
                                }
                                xml=null;
                            }
                        }, o.ajaxOptions));
                        break;
                    case 'xmlstring' :
                        // we need to make just the conversion and use the same code as xml
                        if(o.impstring && typeof o.impstring == 'string') {
                            var xmld = $.jgrid.stringToDoc(o.impstring);
                            if(xmld) {
                                xmlConvert(xmld,o);
                                $($t).triggerHandler("jqGridImportComplete", [xmld, o]);
                                if($.isFunction(o.importComplete)) {
                                    o.importComplete(xmld);
                                }
                                o.impstring = null;
                            }
                            xmld = null;
                        }
                        break;
                    case 'json':
                        $.ajax($.extend({
                            url:o.impurl,
                            type:o.mtype,
                            data: o.impData,
                            dataType:"json",
                            complete: function(json) {
                                try {
                                    jsonConvert(json.responseText,o );
                                    $($t).triggerHandler("jqGridImportComplete", [json, o]);
                                    if($.isFunction(o.importComplete)) {
                                        o.importComplete(json);
                                    }
                                } catch (ee){}
                                json=null;
                            }
                        }, o.ajaxOptions ));
                        break;
                    case 'jsonstring' :
                        if(o.impstring && typeof o.impstring == 'string') {
                            jsonConvert(o.impstring,o );
                            $($t).triggerHandler("jqGridImportComplete", [o.impstring, o]);
                            if($.isFunction(o.importComplete)) {
                                o.importComplete(o.impstring);
                            }
                            o.impstring = null;
                        }
                        break;
                }
            });
        },
        jqGridExport : function(o) {
            o = $.extend({
                exptype : "xmlstring",
                root: "grid",
                ident: "\t"
            }, o || {});
            var ret = null;
            this.each(function () {
                if(!this.grid) { return;}
                var gprm = $.extend(true, {},$(this).jqGrid("getGridParam"));
                // we need to check for:
                // 1.multiselect, 2.subgrid  3. treegrid and remove the unneded columns from colNames
                if(gprm.rownumbers) {
                    gprm.colNames.splice(0,1);
                    gprm.colModel.splice(0,1);
                }
                if(gprm.multiselect) {
                    gprm.colNames.splice(0,1);
                    gprm.colModel.splice(0,1);
                }
                if(gprm.subGrid) {
                    gprm.colNames.splice(0,1);
                    gprm.colModel.splice(0,1);
                }
                gprm.knv = null;
                if(gprm.treeGrid) {
                    for (var key in gprm.treeReader) {
                        if(gprm.treeReader.hasOwnProperty(key)) {
                            gprm.colNames.splice(gprm.colNames.length-1);
                            gprm.colModel.splice(gprm.colModel.length-1);
                        }
                    }
                }
                switch (o.exptype) {
                    case 'xmlstring' :
                        ret = "<"+o.root+">"+xmlJsonClass.json2xml(gprm,o.ident)+"</"+o.root+">";
                        break;
                    case 'jsonstring' :
                        ret = "{"+ xmlJsonClass.toJson(gprm,o.root,o.ident,false)+"}";
                        if(gprm.postData.filters !== undefined) {
                            ret=ret.replace(/filters":"/,'filters":');
                            var temp = new RegExp("}]}\"","i");
                            ret=ret.replace(temp,'}]}');
                        }
                        break;
                }
            });
            return ret;
        }
    });
})(jQuery);;(function($){
/*
**
 * jqGrid addons using jQuery UI 
 * Author: Mark Williams
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * depends on jQuery UI 
**/
if ($.browser.msie && $.browser.version==8) {
	$.expr[":"].hidden = function(elem) {
		return elem.offsetWidth === 0 || elem.offsetHeight === 0 ||
			elem.style.display == "none";
	};
}
// requiere load multiselect before grid
$.jgrid._multiselect = false;
if($.ui) {
	if ($.ui.multiselect ) {
		if($.ui.multiselect.prototype._setSelected) {
			var setSelected = $.ui.multiselect.prototype._setSelected;
		    $.ui.multiselect.prototype._setSelected = function(item,selected) {
		        var ret = setSelected.call(this,item,selected);
		        if (selected && this.selectedList) {
		            var elt = this.element;
				    this.selectedList.find('li').each(function() {
					    if ($(this).data('optionLink')) {
						    $(this).data('optionLink').remove().appendTo(elt);
					    }
				    });
		        }
		        return ret;
			};
		}
		if($.ui.multiselect.prototype.destroy) {
			$.ui.multiselect.prototype.destroy = function() {
				this.element.show();
				this.container.remove();
				if ($.Widget === undefined) {
					$.widget.prototype.destroy.apply(this, arguments);
				} else {
					$.Widget.prototype.destroy.apply(this, arguments);
	            }
			};
		}
		$.jgrid._multiselect = true;
	}
}
        
$.jgrid.extend({
	sortableColumns : function (tblrow)
	{
		return this.each(function (){
			var ts = this, tid= $.jgrid.jqID( ts.p.id );
			function start() {ts.p.disableClick = true;}
			var sortable_opts = {
				"tolerance" : "pointer",
				"axis" : "x",
				"scrollSensitivity": "1",
				"items": '>th:not(:has(#jqgh_'+tid+'_cb'+',#jqgh_'+tid+'_rn'+',#jqgh_'+tid+'_subgrid),:hidden)',
				"placeholder": {
					element: function(item) {
						var el = $(document.createElement(item[0].nodeName))
						.addClass(item[0].className+" ui-sortable-placeholder ui-state-highlight")
						.removeClass("ui-sortable-helper")[0];
						return el;
					},
					update: function(self, p) {
						p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop')||0, 10) - parseInt(self.currentItem.css('paddingBottom')||0, 10));
						p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft')||0, 10) - parseInt(self.currentItem.css('paddingRight')||0, 10));
					}
				},
				"update": function(event, ui) {
					var p = $(ui.item).parent(),
					th = $(">th", p),
					colModel = ts.p.colModel,
					cmMap = {}, tid= ts.p.id+"_";
					$.each(colModel, function(i) { cmMap[this.name]=i; });
					var permutation = [];
					th.each(function() {
						var id = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid,"");
							if (id in cmMap) {
								permutation.push(cmMap[id]);
							}
					});
	
					$(ts).jqGrid("remapColumns",permutation, true, true);
					if ($.isFunction(ts.p.sortable.update)) {
						ts.p.sortable.update(permutation);
					}
					setTimeout(function(){ts.p.disableClick=false;}, 50);
				}
			};
			if (ts.p.sortable.options) {
				$.extend(sortable_opts, ts.p.sortable.options);
			} else if ($.isFunction(ts.p.sortable)) {
				ts.p.sortable = { "update" : ts.p.sortable };
			}
			if (sortable_opts.start) {
				var s = sortable_opts.start;
				sortable_opts.start = function(e,ui) {
					start();
					s.call(this,e,ui);
				};
			} else {
				sortable_opts.start = start;
			}
			if (ts.p.sortable.exclude) {
				sortable_opts.items += ":not("+ts.p.sortable.exclude+")";
			}
			tblrow.sortable(sortable_opts).data("sortable").floating = true;
		});
	},
    columnChooser : function(opts) {
        var self = this;
		if($("#colchooser_"+$.jgrid.jqID(self[0].p.id)).length ) { return; }
        var selector = $('<div id="colchooser_'+self[0].p.id+'" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>');
        var select = $('select', selector);
		
		function insert(perm,i,v) {
			if(i>=0){
				var a = perm.slice();
				var b = a.splice(i,Math.max(perm.length-i,i));
				if(i>perm.length) { i = perm.length; }
				a[i] = v;
				return a.concat(b);
			}
		}
        opts = $.extend({
            "width" : 420,
            "height" : 240,
            "classname" : null,
            "done" : function(perm) { if (perm) { self.jqGrid("remapColumns", perm, true); } },
            /* msel is either the name of a ui widget class that
               extends a multiselect, or a function that supports
               creating a multiselect object (with no argument,
               or when passed an object), and destroying it (when
               passed the string "destroy"). */
            "msel" : "multiselect",
            /* "msel_opts" : {}, */

            /* dlog is either the name of a ui widget class that 
               behaves in a dialog-like way, or a function, that
               supports creating a dialog (when passed dlog_opts)
               or destroying a dialog (when passed the string
               "destroy")
               */
            "dlog" : "dialog",
			"dialog_opts" : {
				"minWidth": 470
			},
            /* dlog_opts is either an option object to be passed 
               to "dlog", or (more likely) a function that creates
               the options object.
               The default produces a suitable options object for
               ui.dialog */
            "dlog_opts" : function(opts) {
                var buttons = {};
                buttons[opts.bSubmit] = function() {
                    opts.apply_perm();
                    opts.cleanup(false);
                };
                buttons[opts.bCancel] = function() {
                    opts.cleanup(true);
                };
                return $.extend(true, {
                    "buttons": buttons,
                    "close": function() {
                        opts.cleanup(true);
                    },
					"modal" : opts.modal ? opts.modal : false,
					"resizable": opts.resizable ? opts.resizable : true,
                    "width": opts.width+20
                }, opts.dialog_opts || {});
            },
            /* Function to get the permutation array, and pass it to the
               "done" function */
            "apply_perm" : function() {
                $('option',select).each(function() {
                    if (this.selected) {
                        self.jqGrid("showCol", colModel[this.value].name);
                    } else {
                        self.jqGrid("hideCol", colModel[this.value].name);
                    }
                });
                
                var perm = [];
				//fixedCols.slice(0);
                $('option:selected',select).each(function() { perm.push(parseInt(this.value,10)); });
                $.each(perm, function() { delete colMap[colModel[parseInt(this,10)].name]; });
                $.each(colMap, function() {
					var ti = parseInt(this,10);
					perm = insert(perm,ti,ti);
				});
                if (opts.done) {
                    opts.done.call(self, perm);
                }
            },
            /* Function to cleanup the dialog, and select. Also calls the
               done function with no permutation (to indicate that the
               columnChooser was aborted */
            "cleanup" : function(calldone) {
                call(opts.dlog, selector, 'destroy');
                call(opts.msel, select, 'destroy');
                selector.remove();
                if (calldone && opts.done) {
                    opts.done.call(self);
                }
            },
			"msel_opts" : {}
        }, $.jgrid.col, opts || {});
		if($.ui) {
			if ($.ui.multiselect ) {
				if(opts.msel == "multiselect") {
					if(!$.jgrid._multiselect) {
						// should be in language file
						alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
						return;
					}
					opts.msel_opts = $.extend($.ui.multiselect.defaults,opts.msel_opts);
				}
			}
		}
        if (opts.caption) {
            selector.attr("title", opts.caption);
        }
        if (opts.classname) {
            selector.addClass(opts.classname);
            select.addClass(opts.classname);
        }
        if (opts.width) {
            $(">div",selector).css({"width": opts.width,"margin":"0 auto"});
            select.css("width", opts.width);
        }
        if (opts.height) {
            $(">div",selector).css("height", opts.height);
            select.css("height", opts.height - 10);
        }
        var colModel = self.jqGrid("getGridParam", "colModel");
        var colNames = self.jqGrid("getGridParam", "colNames");
        var colMap = {}, fixedCols = [];

        select.empty();
        $.each(colModel, function(i) {
            colMap[this.name] = i;
            if (this.hidedlg) {
                if (!this.hidden) {
                    fixedCols.push(i);
                }
                return;
            }

            select.append("<option value='"+i+"' "+
                          (this.hidden?"":"selected='selected'")+">"+jQuery.jgrid.stripHtml(colNames[i])+"</option>");
        });
        function call(fn, obj) {
            if (!fn) { return; }
            if (typeof fn == 'string') {
                if ($.fn[fn]) {
                    $.fn[fn].apply(obj, $.makeArray(arguments).slice(2));
                }
            } else if ($.isFunction(fn)) {
                fn.apply(obj, $.makeArray(arguments).slice(2));
            }
        }

        var dopts = $.isFunction(opts.dlog_opts) ? opts.dlog_opts.call(self, opts) : opts.dlog_opts;
        call(opts.dlog, selector, dopts);
        var mopts = $.isFunction(opts.msel_opts) ? opts.msel_opts.call(self, opts) : opts.msel_opts;
        call(opts.msel, select, mopts);
    },
	sortableRows : function (opts) {
		// Can accept all sortable options and events
		return this.each(function(){
			var $t = this;
			if(!$t.grid) { return; }
			// Currently we disable a treeGrid sortable
			if($t.p.treeGrid) { return; }
			if($.fn.sortable) {
				opts = $.extend({
					"cursor":"move",
					"axis" : "y",
					"items": ".jqgrow"
					},
				opts || {});
				if(opts.start && $.isFunction(opts.start)) {
					opts._start_ = opts.start;
					delete opts.start;
				} else {opts._start_=false;}
				if(opts.update && $.isFunction(opts.update)) {
					opts._update_ = opts.update;
					delete opts.update;
				} else {opts._update_ = false;}
				opts.start = function(ev,ui) {
					$(ui.item).css("border-width","0px");
					$("td",ui.item).each(function(i){
						this.style.width = $t.grid.cols[i].style.width;
					});
					if($t.p.subGrid) {
						var subgid = $(ui.item).attr("id");
						try {
							$($t).jqGrid('collapseSubGridRow',subgid);
						} catch (e) {}
					}
					if(opts._start_) {
						opts._start_.apply(this,[ev,ui]);
					}
				};
				opts.update = function (ev,ui) {
					$(ui.item).css("border-width","");
					if($t.p.rownumbers === true) {
						$("td.jqgrid-rownum",$t.rows).each(function( i ){
							$(this).html( i+1+(parseInt($t.p.page,10)-1)*parseInt($t.p.rowNum,10) );
						});
					}
					if(opts._update_) {
						opts._update_.apply(this,[ev,ui]);
					}
				};
				$("tbody:first",$t).sortable(opts);
				$("tbody:first",$t).disableSelection();
			}
		});
	},
	gridDnD : function(opts) {
		return this.each(function(){
		var $t = this;
		if(!$t.grid) { return; }
		// Currently we disable a treeGrid drag and drop
		if($t.p.treeGrid) { return; }
		if(!$.fn.draggable || !$.fn.droppable) { return; }
		function updateDnD ()
		{
			var datadnd = $.data($t,"dnd");
		    $("tr.jqgrow:not(.ui-draggable)",$t).draggable($.isFunction(datadnd.drag) ? datadnd.drag.call($($t),datadnd) : datadnd.drag);
		}
		var appender = "<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>";
		if($("#jqgrid_dnd").html() === null) {
			$('body').append(appender);
		}

		if(typeof opts == 'string' && opts == 'updateDnD' && $t.p.jqgdnd===true) {
			updateDnD();
			return;
		}
		opts = $.extend({
			"drag" : function (opts) {
				return $.extend({
					start : function (ev, ui) {
						// if we are in subgrid mode try to collapse the node
						if($t.p.subGrid) {
							var subgid = $(ui.helper).attr("id");
							try {
								$($t).jqGrid('collapseSubGridRow',subgid);
							} catch (e) {}
						}
						// hack
						// drag and drop does not insert tr in table, when the table has no rows
						// we try to insert new empty row on the target(s)
						for (var i=0;i<$.data($t,"dnd").connectWith.length;i++){
							if($($.data($t,"dnd").connectWith[i]).jqGrid('getGridParam','reccount') == "0" ){
								$($.data($t,"dnd").connectWith[i]).jqGrid('addRowData','jqg_empty_row',{});
							}
						}
						ui.helper.addClass("ui-state-highlight");
						$("td",ui.helper).each(function(i) {
							this.style.width = $t.grid.headers[i].width+"px";
						});
						if(opts.onstart && $.isFunction(opts.onstart) ) { opts.onstart.call($($t),ev,ui); }
					},
					stop :function(ev,ui) {
						if(ui.helper.dropped && !opts.dragcopy) {
							var ids = $(ui.helper).attr("id");
							if(ids === undefined) { ids = $(this).attr("id"); }
							$($t).jqGrid('delRowData',ids );
						}
						// if we have a empty row inserted from start event try to delete it
						for (var i=0;i<$.data($t,"dnd").connectWith.length;i++){
							$($.data($t,"dnd").connectWith[i]).jqGrid('delRowData','jqg_empty_row');
						}
						if(opts.onstop && $.isFunction(opts.onstop) ) { opts.onstop.call($($t),ev,ui); }
					}
				},opts.drag_opts || {});
			},
			"drop" : function (opts) {
				return $.extend({
					accept: function(d) {
						if (!$(d).hasClass('jqgrow')) { return d;}
						var tid = $(d).closest("table.ui-jqgrid-btable");
						if(tid.length > 0 && $.data(tid[0],"dnd") !== undefined) {
						    var cn = $.data(tid[0],"dnd").connectWith;
						    return $.inArray('#'+$.jgrid.jqID(this.id),cn) != -1 ? true : false;
						}
						return false;
					},
					drop: function(ev, ui) {
						if (!$(ui.draggable).hasClass('jqgrow')) { return; }
						var accept = $(ui.draggable).attr("id");
						var getdata = ui.draggable.parent().parent().jqGrid('getRowData',accept);
						if(!opts.dropbyname) {
							var j =0, tmpdata = {}, nm;
							var dropmodel = $("#"+$.jgrid.jqID(this.id)).jqGrid('getGridParam','colModel');
							try {
								for (var key in getdata) {
									nm = dropmodel[j].name;
									if( !(nm == 'cb' || nm =='rn' || nm == 'subgrid' )) {
										if(getdata.hasOwnProperty(key) && dropmodel[j]) {
											tmpdata[nm] = getdata[key];
										}
									}
									j++;
								}
								getdata = tmpdata;
							} catch (e) {}
						}
						ui.helper.dropped = true;
						if(opts.beforedrop && $.isFunction(opts.beforedrop) ) {
							//parameters to this callback - event, element, data to be inserted, sender, reciever
							// should return object which will be inserted into the reciever
							var datatoinsert = opts.beforedrop.call(this,ev,ui,getdata,$('#'+$.jgrid.jqID($t.p.id)),$(this));
							if (typeof datatoinsert != "undefined" && datatoinsert !== null && typeof datatoinsert == "object") { getdata = datatoinsert; }
						}
						if(ui.helper.dropped) {
							var grid;
							if(opts.autoid) {
								if($.isFunction(opts.autoid)) {
									grid = opts.autoid.call(this,getdata);
								} else {
									grid = Math.ceil(Math.random()*1000);
									grid = opts.autoidprefix+grid;
								}
							}
							// NULL is interpreted as undefined while null as object
							$("#"+$.jgrid.jqID(this.id)).jqGrid('addRowData',grid,getdata,opts.droppos);
						}
						if(opts.ondrop && $.isFunction(opts.ondrop) ) { opts.ondrop.call(this,ev,ui, getdata); }
					}}, opts.drop_opts || {});
			},
			"onstart" : null,
			"onstop" : null,
			"beforedrop": null,
			"ondrop" : null,
			"drop_opts" : {
				"activeClass": "ui-state-active",
				"hoverClass": "ui-state-hover"
			},
			"drag_opts" : {
				"revert": "invalid",
				"helper": "clone",
				"cursor": "move",
				"appendTo" : "#jqgrid_dnd",
				"zIndex": 5000
			},
			"dragcopy": false,
			"dropbyname" : false,
			"droppos" : "first",
			"autoid" : true,
			"autoidprefix" : "dnd_"
		}, opts || {});
		
		if(!opts.connectWith) { return; }
		opts.connectWith = opts.connectWith.split(",");
		opts.connectWith = $.map(opts.connectWith,function(n){return $.trim(n);});
		$.data($t,"dnd",opts);
		
		if($t.p.reccount != "0" && !$t.p.jqgdnd) {
			updateDnD();
		}
		$t.p.jqgdnd = true;
		for (var i=0;i<opts.connectWith.length;i++){
			var cn =opts.connectWith[i];
			$(cn).droppable($.isFunction(opts.drop) ? opts.drop.call($($t),opts) : opts.drop);
		}
		});
	},
	gridResize : function(opts) {
		return this.each(function(){
			var $t = this, gID = $.jgrid.jqID($t.p.id);
			if(!$t.grid || !$.fn.resizable) { return; }
			opts = $.extend({}, opts || {});
			if(opts.alsoResize ) {
				opts._alsoResize_ = opts.alsoResize;
				delete opts.alsoResize;
			} else {
				opts._alsoResize_ = false;
			}
			if(opts.stop && $.isFunction(opts.stop)) {
				opts._stop_ = opts.stop;
				delete opts.stop;
			} else {
				opts._stop_ = false;
			}
			opts.stop = function (ev, ui) {
				$($t).jqGrid('setGridParam',{height:$("#gview_"+gID+" .ui-jqgrid-bdiv").height()});
				$($t).jqGrid('setGridWidth',ui.size.width,opts.shrinkToFit);
				if(opts._stop_) { opts._stop_.call($t,ev,ui); }
			};
			if(opts._alsoResize_) {
				var optstest = "{\'#gview_"+gID+" .ui-jqgrid-bdiv\':true,'" +opts._alsoResize_+"':true}";
				opts.alsoResize = eval('('+optstest+')'); // the only way that I found to do this
			} else {
				opts.alsoResize = $(".ui-jqgrid-bdiv","#gview_"+gID);
			}
			delete opts._alsoResize_;
			$("#gbox_"+gID).resizable(opts);
		});
	}
});
})(jQuery);
/*
 Transform a table to a jqGrid.
 Peter Romianowski <peter.romianowski@optivo.de> 
 If the first column of the table contains checkboxes or
 radiobuttons then the jqGrid is made selectable.
*/
// Addition - selector can be a class or id
function tableToGrid(selector, options) {
jQuery(selector).each(function() {
	if(this.grid) {return;} //Adedd from Tony Tomov
	// This is a small "hack" to make the width of the jqGrid 100%
	jQuery(this).width("99%");
	var w = jQuery(this).width();

	// Text whether we have single or multi select
	var inputCheckbox = jQuery('tr td:first-child input[type=checkbox]:first', jQuery(this));
	var inputRadio = jQuery('tr td:first-child input[type=radio]:first', jQuery(this));
	var selectMultiple = inputCheckbox.length > 0;
	var selectSingle = !selectMultiple && inputRadio.length > 0;
	var selectable = selectMultiple || selectSingle;
	//var inputName = inputCheckbox.attr("name") || inputRadio.attr("name");

	// Build up the columnModel and the data
	var colModel = [];
	var colNames = [];
	jQuery('th', jQuery(this)).each(function() {
		if (colModel.length === 0 && selectable) {
			colModel.push({
				name: '__selection__',
				index: '__selection__',
				width: 0,
				hidden: true
			});
			colNames.push('__selection__');
		} else {
			colModel.push({
				name: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'),
				index: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'),
				width: jQuery(this).width() || 150
			});
			colNames.push(jQuery(this).html());
		}
	});
	var data = [];
	var rowIds = [];
	var rowChecked = [];
	jQuery('tbody > tr', jQuery(this)).each(function() {
		var row = {};
		var rowPos = 0;
		jQuery('td', jQuery(this)).each(function() {
			if (rowPos === 0 && selectable) {
				var input = jQuery('input', jQuery(this));
				var rowId = input.attr("value");
				rowIds.push(rowId || data.length);
				if (input.is(":checked")) {
					rowChecked.push(rowId);
				}
				row[colModel[rowPos].name] = input.attr("value");
			} else {
				row[colModel[rowPos].name] = jQuery(this).html();
			}
			rowPos++;
		});
		if(rowPos >0) { data.push(row); }
	});

	// Clear the original HTML table
	jQuery(this).empty();

	// Mark it as jqGrid
	jQuery(this).addClass("scroll");

	jQuery(this).jqGrid(jQuery.extend({
		datatype: "local",
		width: w,
		colNames: colNames,
		colModel: colModel,
		multiselect: selectMultiple
		//inputName: inputName,
		//inputValueCol: imputName != null ? "__selection__" : null
	}, options || {}));

	// Add data
	var a;
	for (a = 0; a < data.length; a++) {
		var id = null;
		if (rowIds.length > 0) {
			id = rowIds[a];
			if (id && id.replace) {
				// We have to do this since the value of a checkbox
				// or radio button can be anything 
				id = encodeURIComponent(id).replace(/[.\-%]/g, "_");
			}
		}
		if (id === null) {
			id = a + 1;
		}
		jQuery(this).jqGrid("addRowData",id, data[a]);
	}

	// Set the selection
	for (a = 0; a < rowChecked.length; a++) {
		jQuery(this).jqGrid("setSelection",rowChecked[a]);
	}
});
};



/*
	自己的grid代码
*/
 /**
 * 创建一个grid控件
 * @function
 * @return {Object} ui控件
 */
var rp_ge = {};
$.extend($.fn.jqGrid,{
	    //覆盖getGridParam，添加对radio的判断处理
		getGridParam : function(pName) {
			var $t = this[0];
			if (!$t || !$t.grid) {return;}
			if (!pName) { return $t.p; }
			else {
				if(typeof($t.p[pName]) != "undefined"){
					if(this.singleselect && "selarrrow"==pName){
						return [$t.p["selrow"]];
					}
					return $t.p[pName];
				}else{
					return null;
				}
			}
		 },
	    //增加对showOnLoad（是否初始化时显示查找框）处理
		searchGrid : function (p) {
			p = $.extend({
				recreateFilter: false,
				drag: true,
				sField:'searchField',
				sValue:'searchString',
				sOper: 'searchOper',
				sFilter: 'filters',
				loadDefaults: true, // this options activates loading of default filters from grid's postData for Multipe Search only.
				beforeShowSearch: null,
				afterShowSearch : null,
				onInitializeSearch: null,
				afterRedraw : null,
				afterChange: null,
				closeAfterSearch : false,
				closeAfterReset: false,
				closeOnEscape : false,
				searchOnEnter : false,
				multipleSearch : false,
				multipleGroup : false,
				//cloneSearchRowOnAdd: true,
				top : 0,
				left: 0,
				jqModal : true,
				modal: false,
				resize : true,
				width: 450,
				height: 'auto',
				dataheight: 'auto',
				showQuery: false,
				errorcheck : true,
				// translation
				// if you want to change or remove the order change it in sopt
				// ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc'],
				sopt: null,
				stringResult: undefined,
				onClose : null,
				onSearch : null,
				onReset : null,
				toTop : true,
				overlay : 30,
				columns : [],
				tmplNames : null,
				tmplFilters : null,
				// translations - later in lang file
				tmplLabel : ' Template: ',
				showOnLoad: false,
				layer: null
			}, $.jgrid.search, p || {});
			return this.each(function() {
				var $t = this;
				if(!$t.grid) {return;}
				var fid = "fbox_"+$t.p.id,
				showFrm = true,
				IDs = {themodal:'searchmod'+fid,modalhead:'searchhd'+fid,modalcontent:'searchcnt'+fid, scrollelm : fid},
				defaultFilters  = $t.p.postData[p.sFilter];
				if(typeof(defaultFilters) === "string") {
					defaultFilters = $.jgrid.parse( defaultFilters );
				}
				if(p.recreateFilter === true) {
					$("#"+$.jgrid.jqID(IDs.themodal)).remove();
				}
				function showFilter(_filter) {
					showFrm = $($t).triggerHandler("jqGridFilterBeforeShow", [_filter]);
					if(typeof(showFrm) === "undefined") {
						showFrm = true;
					}
					if(showFrm && $.isFunction(p.beforeShowSearch)) {
						showFrm = p.beforeShowSearch.call($t,_filter);
					}
					if(showFrm) {
						$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(fid),jqm:p.jqModal, modal:p.modal, overlay: p.overlay, toTop: p.toTop});
						$($t).triggerHandler("jqGridFilterAfterShow", [_filter]);
						if($.isFunction(p.afterShowSearch)) {
							p.afterShowSearch.call($t, _filter);
						}
					}
				}
				if ( $("#"+$.jgrid.jqID(IDs.themodal)).html() !== null ) {
					showFilter($("#fbox_"+$.jgrid.jqID(+$t.p.id)));
				} else {
					var fil = $("<div><div id='"+fid+"' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_"+$.jgrid.jqID($t.p.id)),
					align = "left", butleft =""; 
					if($t.p.direction == "rtl") {
						align = "right";
						butleft = " style='text-align:left'";
						fil.attr("dir","rtl");
					}
					var columns = $.extend([],$t.p.colModel),
					bS  ="<a href='javascript:void(0)' id='"+fid+"_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>"+p.Find+"</a>",
					bC  ="<a href='javascript:void(0)' id='"+fid+"_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>"+p.Reset+"</a>",
					bQ = "", tmpl="", colnm, found = false, bt, cmi=-1;
					if(p.showQuery) {
						bQ ="<a href='javascript:void(0)' id='"+fid+"_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>";
					}
					if(!p.columns.length) {
						$.each(columns, function(i,n){
							if(!n.label) {
								n.label = $t.p.colNames[i];
							}
							// find first searchable column and set it if no default filter
							if(!found) {
								var searchable = (typeof n.search === 'undefined') ?  true: n.search ,
								hidden = (n.hidden === true),
								ignoreHiding = (n.searchoptions && n.searchoptions.searchhidden === true);
								if ((ignoreHiding && searchable) || (searchable && !hidden)) {
									found = true;
									colnm = n.index || n.name;
									cmi =i;
								}
							}
						});
					} else {
						columns = p.columns;
					}
					// old behaviour
					if( (!defaultFilters && colnm) || p.multipleSearch === false  ) {
						var cmop = "eq";
						if(cmi >=0 && columns[cmi].searchoptions && columns[cmi].searchoptions.sopt) {
							cmop = columns[cmi].searchoptions.sopt[0];
						} else if(p.sopt && p.sopt.length) {
							cmop = p.sopt[0];
						}
						defaultFilters = {"groupOp": "AND",rules:[{"field":colnm,"op":cmop,"data":""}]};
					}
					found = false;
					if(p.tmplNames && p.tmplNames.length) {
						found = true;
						tmpl = p.tmplLabel;
						tmpl += "<select class='ui-template'>";
						tmpl += "<option value='default'>Default</option>";
						$.each(p.tmplNames, function(i,n){
							tmpl += "<option value='"+i+"'>"+n+"</option>";
						});
						tmpl += "</select>";
					}
	
					bt = "<table class='EditTable' style='border:0px none;margin-top:5px' id='"+fid+"_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:"+align+"'>"+bC+tmpl+"</td><td class='EditButton' "+butleft+">"+bQ+bS+"</td></tr></tbody></table>";
					fid = $.jgrid.jqID( fid);
					$("#"+fid).jqFilter({
						columns : columns,
						filter: p.loadDefaults ? defaultFilters : null,
						showQuery: p.showQuery,
						errorcheck : p.errorcheck,
						sopt: p.sopt,
						groupButton : p.multipleGroup,
						ruleButtons : p.multipleSearch,
						afterRedraw : p.afterRedraw,
						_gridsopt : $.jgrid.search.odata,
						ajaxSelectOptions: $t.p.ajaxSelectOptions,
						groupOps: p.groupOps,
						onChange : function() {
							if(this.p.showQuery) {
								$('.query',this).html(this.toUserFriendlyString());
							}
							if ($.isFunction(p.afterChange)) {
								p.afterChange.call($t, $("#"+fid), p);
							}
						},
						direction : $t.p.direction
					});
					fil.append( bt );
					if(found && p.tmplFilters && p.tmplFilters.length) {
						$(".ui-template", fil).bind('change', function(){
							var curtempl = $(this).val();
							if(curtempl=="default") {
								$("#"+fid).jqFilter('addFilter', defaultFilters);
							} else {
								$("#"+fid).jqFilter('addFilter', p.tmplFilters[parseInt(curtempl,10)]);
							}
							return false;
						});
					}
					if(p.multipleGroup === true) {p.multipleSearch = true;}
					$($t).triggerHandler("jqGridFilterInitialize", [$("#"+fid)]);
					if($.isFunction(p.onInitializeSearch) ) {
						p.onInitializeSearch.call($t, $("#"+fid));
					}
					p.gbox = "#gbox_"+fid;
					if (p.layer) {
						$.jgrid.createModal(IDs ,fil,p,"#gview_"+$.jgrid.jqID($t.p.id),$("#gbox_"+$.jgrid.jqID($t.p.id))[0], "#"+$.jgrid.jqID(p.layer), {position: "relative"});
					} else {
						$.jgrid.createModal(IDs ,fil,p,"#gview_"+$.jgrid.jqID($t.p.id),$("#gbox_"+$.jgrid.jqID($t.p.id))[0]);
					}
					if (p.searchOnEnter || p.closeOnEscape) {
						$("#"+$.jgrid.jqID(IDs.themodal)).keydown(function (e) {
							var $target = $(e.target);
							if (p.searchOnEnter && e.which === 13 && // 13 === $.ui.keyCode.ENTER
									!$target.hasClass('add-group') && !$target.hasClass('add-rule') &&
									!$target.hasClass('delete-group') && !$target.hasClass('delete-rule') &&
									(!$target.hasClass("fm-button") || !$target.is("[id$=_query]"))) {
								$("#"+fid+"_search").focus().click();
								return false;
							}
							if (p.closeOnEscape && e.which === 27) { // 27 === $.ui.keyCode.ESCAPE
								$("#"+$.jgrid.jqID(IDs.modalhead)).find(".ui-jqdialog-titlebar-close").focus().click();
								return false;
							}
						});
					}
					if(bQ) {
						$("#"+fid+"_query").bind('click', function(){
							$(".queryresult", fil).toggle();
							return false;
						});
					}
					if (p.stringResult===undefined) {
						// to provide backward compatibility, inferring stringResult value from multipleSearch
						p.stringResult = p.multipleSearch;
					}
					$("#"+fid+"_search").bind('click', function(){
						var fl = $("#"+fid),
						sdata={}, res ,
						filters = fl.jqFilter('filterData');
						if(p.errorcheck) {
							fl[0].hideError();
							if(!p.showQuery) {fl.jqFilter('toSQLString');}
							if(fl[0].p.error) {
								fl[0].showError();
								return false;
							}
						}
	
						if(p.stringResult) {
							try {
								// xmlJsonClass or JSON.stringify
								res = xmlJsonClass.toJson(filters, '', '', false);
							} catch (e) {
								try {
									res = JSON.stringify(filters);
								} catch (e2) { }
							}
							if(typeof(res)==="string") {
								sdata[p.sFilter] = res;
								$.each([p.sField,p.sValue, p.sOper], function() {sdata[this] = "";});
							}
						} else {
							if(p.multipleSearch) {
								sdata[p.sFilter] = filters;
								$.each([p.sField,p.sValue, p.sOper], function() {sdata[this] = "";});
							} else {
								sdata[p.sField] = filters.rules[0].field;
								sdata[p.sValue] = filters.rules[0].data;
								sdata[p.sOper] = filters.rules[0].op;
								sdata[p.sFilter] = "";
							}
						}
						$t.p.search = true;
						$.extend($t.p.postData,sdata);
						$($t).triggerHandler("jqGridFilterSearch");
						if($.isFunction(p.onSearch) ) {
							p.onSearch.call($t);
						}
						$($t).trigger("reloadGrid",[{page:1}]);
						if(p.closeAfterSearch) {
							$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID($t.p.id),jqm:p.jqModal,onClose: p.onClose});
						}
						return false;
					});
					$("#"+fid+"_reset").bind('click', function(){
						var sdata={},
						fl = $("#"+fid);
						$t.p.search = false;
						if(p.multipleSearch===false) {
							sdata[p.sField] = sdata[p.sValue] = sdata[p.sOper] = "";
						} else {
							sdata[p.sFilter] = "";
						}
						fl[0].resetFilter();
						if(found) {
							$(".ui-template", fil).val("default");
						}
						$.extend($t.p.postData,sdata);
						$($t).triggerHandler("jqGridFilterReset");
						if($.isFunction(p.onReset) ) {
							p.onReset.call($t);
						}
						$($t).trigger("reloadGrid",[{page:1}]);
						return false;
					});
					//增加对showOnLoad处理
					if(p.showOnLoad)showFilter($("#"+fid));
					$(".fm-button:not(.ui-state-disabled)",fil).hover(
						function(){$(this).addClass('ui-state-hover');},
						function(){$(this).removeClass('ui-state-hover');}
					);
				}
			});
		},
		//增加自定义按钮，处理默认按钮样式
		navButtonAdd : function (elem, p) {
	        p = $.extend({
	            caption : "newButton",
	            title: '',
	            buttonicon : 'ui-icon-newwin',
	            onClickButton: null,
	            position : "last",
	            cursor : 'pointer'
	        }, p ||{});
	        return this.each(function() {
	            if( !this.grid)  {return;}
	            if( typeof elem === "string" && elem.indexOf("#") !== 0) {elem = "#"+$.jgrid.jqID(elem);}
	            var findnav = $(".navtable",elem)[0], $t = this;
	            if (findnav) {
	                if( p.id && $("#"+$.jgrid.jqID(p.id), findnav).html() !== null )  {return;}
	                var tbd = $("<td></td>");
	                if(p.buttonicon.toString().toUpperCase() == "NONE") {
	                    $(tbd).addClass('ui-pg-button ui-corner-all').append("<div class='ui-pg-div'>"+p.caption+"</div>");
	                } else	{
	                    $(tbd).addClass('ui-pg-button ui-corner-all').append("<div class='ui-pg-div'><span class='ui-icon "+p.buttonicon+"'></span>"+p.caption+"</div>");
	                }
	                if(p.id) {$(tbd).attr("id",p.id);}
	                if(p.position=='first'){
	                    if(findnav.rows[0].cells.length ===0 ) {
	                        $("tr",findnav).append(tbd);
	                    } else {
	                        $("tr td:eq(0)",findnav).before(tbd);
	                    }
	                } else {
	                    $("tr",findnav).append(tbd);
	                }
	                $(tbd,findnav)
	                .attr("title",p.title  || "")
	                .click(function(e){
	                    if (!$(this).hasClass('ui-state-disabled')) {
	                        if ($.isFunction(p.onClickButton) ) {p.onClickButton.call($t,e);}
	                    }
	                    return false;
	                })
	                .hover(
	                    function () {
	                        if (!$(this).hasClass('ui-state-disabled')) {
	                            $(this).addClass('ui-state-hover');
	                        }
	                    },
	                    function () {$(this).removeClass("ui-state-hover");}
	                );
	                $(".ui-pg-div",tbd).button();//按钮渲染成button
	            }
	        });
	    },
		//多表头，添加保存所有表头信息属性处理
		setGroupHeaders : function ( o ) {
			o = $.extend({
				useColSpanStyle :  false,
				groupHeaders: []
			},o  || {});
			return this.each(function(){
				this.p.groupHeader = o;
				this.p.totalGroupHeader.push(o);//保存所有多表头信息
				var ts = this,
				i, cmi, skip = 0, $tr, $colHeader, th, $th, thStyle,
				iCol,
				cghi,
				//startColumnName,
				numberOfColumns,
				titleText,
				cVisibleColumns,
				colModel = ts.p.colModel,
				cml = colModel.length,
				ths = ts.grid.headers,
				$htable = $("table.ui-jqgrid-htable", ts.grid.hDiv),
				$trLabels = $htable.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header"),
				$thead = $htable.children("thead"),
				$theadInTable,
				$firstHeaderRow = $htable.find(".jqg-first-row-header");
				if($firstHeaderRow.html() === null) {
					$firstHeaderRow = $('<tr>', {role: "row", "aria-hidden": "true"}).addClass("jqg-first-row-header").css("height", "auto");
				} else {
					$firstHeaderRow.empty();
				}
				var $firstRow,
				inColumnHeader = function (text, columnHeaders) {
					var i = 0, length = columnHeaders.length;
					for (; i < length; i++) {
						if (columnHeaders[i].startColumnName === text) {
							return i;
						}
					}
					return -1;
				};
	
				$(ts).prepend($thead);
				$tr = $('<tr>', {role: "rowheader"}).addClass("ui-jqgrid-labels jqg-third-row-header");
				for (i = 0; i < cml; i++) {
					th = ths[i].el;
					$th = $(th);
					cmi = colModel[i];
					// build the next cell for the first header row
					thStyle = { height: '0px', width: ths[i].width + 'px', display: (cmi.hidden ? 'none' : '')};
					//多表头标题栏第一行决定标题列宽度，绑上指定id用于自适应模式在setGridWidth中给其设置高度
					$("<th>", {role: 'gridcell',id:ts.grid.headers[i].el.id}).css(thStyle).addClass("ui-first-th-"+ts.p.direction).appendTo($firstHeaderRow);
	
					th.style.width = ""; // remove unneeded style
					iCol = inColumnHeader(cmi.name, o.groupHeaders);
					if (iCol >= 0) {
						cghi = o.groupHeaders[iCol];
						numberOfColumns = cghi.numberOfColumns;
						titleText = cghi.titleText;
	
						// caclulate the number of visible columns from the next numberOfColumns columns
						for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) {
							if (!colModel[i + iCol].hidden) {
								cVisibleColumns++;
							}
						}
	
						// The next numberOfColumns headers will be moved in the next row
						// in the current row will be placed the new column header with the titleText.
						// The text will be over the cVisibleColumns columns
						$colHeader = $('<th>').attr({role: "columnheader"})
							.addClass("ui-state-default ui-th-column-header ui-th-"+ts.p.direction)
							.css({'height':'22px', 'border-top': '0px none'})
							.html(titleText);
						if(cVisibleColumns > 0) {
							$colHeader.attr("colspan", String(cVisibleColumns));
						}
						if (ts.p.headertitles) {
							$colHeader.attr("title", $colHeader.text());
						}
						// hide if not a visible cols
						if( cVisibleColumns === 0) {
							$colHeader.hide();
						}
	
						$th.before($colHeader); // insert new column header before the current
						$tr.append(th);         // move the current header in the next row
	
						// set the coumter of headers which will be moved in the next row
						skip = numberOfColumns - 1;
					} else {
						if (skip === 0) {
							if (o.useColSpanStyle) {
								// expand the header height to two rows
								$th.attr("rowspan", "2");
							} else {
								$('<th>', {role: "columnheader"})
									.addClass("ui-state-default ui-th-column-header ui-th-"+ts.p.direction)
									.css({"display": cmi.hidden ? 'none' : '', 'border-top': '0px none'})
									.insertBefore($th);
								$tr.append(th);
							}
						} else {
							// move the header to the next row
							//$th.css({"padding-top": "2px", height: "19px"});
							$tr.append(th);
							skip--;
						}
					}
				}
				$theadInTable = $(ts).children("thead");
				$theadInTable.prepend($firstHeaderRow);
				$tr.insertAfter($trLabels);
				$htable.append($theadInTable);
	
				if (o.useColSpanStyle) {
					// Increase the height of resizing span of visible headers
					$htable.find("span.ui-jqgrid-resize").each(function () {
						var $parent = $(this).parent();
						if ($parent.is(":visible")) {
							this.style.cssText = 'height: ' + $parent.height() + 'px !important; cursor: col-resize;';
						}
					});
	
					// Set position of the sortable div (the main lable)
					// with the column header text to the middle of the cell.
					// One should not do this for hidden headers.
					$htable.find("div.ui-jqgrid-sortable").each(function () {
						var $ts = $(this), $parent = $ts.parent();
						if ($parent.is(":visible") && $parent.is(":has(span.ui-jqgrid-resize)")) {
							$ts.css('top', ($parent.height() - $ts.outerHeight()) / 2 + 'px');
						}
					});
				}
	
				$firstRow = $theadInTable.find("tr.jqg-first-row-header");
				$(ts).bind('jqGridResizeStop.setGroupHeaders', function (e, nw, idx) {
					$firstRow.find('th').eq(idx).width(nw);
				});
			});				
		},
		//导出excel
		excelExport: function(queryObj){
	            var params={};
	            params.queryData = queryObj;
	            params.orderFields=this.getGridParam("sortname");
	            params.order=this.getGridParam("sortorder");
	            
	            if(this.exportParams.columns===undefined){
	            	params.columns=this.getGridParam("colModel");
	            }
	            
	            if(this.exportParams.groupHeaders===undefined){
	            	params.groupHeaders=this.getGridParam("totalGroupHeader");
	            }
	
	            $.extend(true,params,this.exportParams);
	            var form=$("<form>");
	            form.attr("action",params.url);
	            form.attr("method","post");
	            form.append( biz.utils.createHidden("orderFields",params.orderFields));
	            form.append( biz.utils.createHidden("order",params.order));
	            params.orderFields=undefined;
	            params.order=undefined;
	            if(queryObj){
	                for(var q in queryObj){
	                    form.append( biz.utils.createHidden(q,queryObj[q]));
	                }
	            }
	            form.append( biz.utils.createHidden("exportParams",JSON.stringify(params)));
	            $("body").append(form);
	            form.submit();
	            form.detach();
	    },
		//当数据分组设置合并单元格时，分组列始终显示
		groupingSetup : function () {
			return this.each(function (){
				var $t = this,
				grp = $t.p.groupingView;
				if(grp !== null && ( (typeof grp === 'object') || $.isFunction(grp) ) ) {
					if(!grp.groupField.length) {
						$t.p.grouping = false;
					} else {
						if ( typeof(grp.visibiltyOnNextGrouping) === 'undefined') {
							grp.visibiltyOnNextGrouping = [];
						}
	
						grp.lastvalues=[];
						grp.groups =[];
						grp.counters =[];
						for(var i=0;i<grp.groupField.length;i++) {
							if(!grp.groupOrder[i]) {
								grp.groupOrder[i] = 'asc';
							}
							if(!grp.groupText[i]) {
								grp.groupText[i] = '{0}';
							}
							if( typeof(grp.groupColumnShow[i]) !== 'boolean' || grp.mergeCell) {
								grp.groupColumnShow[i] = true;
							}
							if( typeof(grp.groupSummary[i]) !== 'boolean') {
								grp.groupSummary[i] = false;
							}
							if(grp.groupColumnShow[i] === true) {
								grp.visibiltyOnNextGrouping[i] = true;
								$($t).jqGrid('showCol',grp.groupField[i]);
							} else {
								grp.visibiltyOnNextGrouping[i] = $("#"+$.jgrid.jqID($t.p.id+"_"+grp.groupField[i])).is(":visible");
								$($t).jqGrid('hideCol',grp.groupField[i]);
							}
						}
						grp.summary =[];
						var cm = $t.p.colModel;
						for(var j=0, cml = cm.length; j < cml; j++) {
							if(cm[j].summaryType) {
								grp.summary.push({nm:cm[j].name,st:cm[j].summaryType, v: '', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round'});
							}
						}
					}
				} else {
					$t.p.grouping = false;
				}
			});
		},
	    //数据分组增加合并单元格处理模式
		groupingRender : function (grdata, colspans ) {
			return this.each(function(){
				var $t = this,
				grp = $t.p.groupingView,
				str = "", icon = "", hid, clid, pmrtl = grp.groupCollapse ? grp.plusicon : grp.minusicon, gv, cp=[], ii, len =grp.groupField.length;
				pmrtl += " tree-wrap-"+$t.p.direction; 
				ii = 0;
				$.each($t.p.colModel, function (i,n){
					for(var ii=0;ii<len;ii++) {
						if(grp.groupField[ii] === n.name ) {
							cp[ii] = i;
							break;
						}
					}
				});
				var toEnd = 0;
				function findGroupIdx( ind , offset, grp) {
					if(offset===0) {
						return grp[ind];
					} else {
						var id = grp[ind].idx;
						if(id===0) { return grp[ind]; }
						for(var i=ind;i >= 0; i--) {
							if(grp[i].idx === id-offset) {
								return grp[i];
							}
						}
					}
				}
				var sumreverse = grp.groupSummary;
				sumreverse.reverse();
				$.each(grp.groups,function(i,n){
					toEnd++;
					clid = $t.p.id+"ghead_"+n.idx;
					hid = clid+"_"+i;
					icon = "<span style='cursor:pointer;' class='ui-icon "+pmrtl+"' onclick=\"jQuery('#"+$.jgrid.jqID($t.p.id)+"').jqGrid('groupingToggle','"+hid+"');return false;\"></span>";
					try {
						gv = $t.formatter(hid, n.value, cp[n.idx], n.value );
					} catch (egv) {
						gv = n.value;
					}
					if( !grp.mergeCell)   //对设置合并单元格模式进行处理
					str += "<tr id=\""+hid+"\" role=\"row\" class= \"ui-widget-content jqgroup ui-row-"+$t.p.direction+" "+clid+"\"><td style=\"padding-left:"+(n.idx * 12) + "px;"+"\" colspan=\""+colspans+"\">"+icon+$.jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary)+"</td></tr>";
					var leaf = len-1 === n.idx; 
					if( leaf ) {
						var gg = grp.groups[i+1];
						var end = gg !== undefined ?  grp.groups[i+1].startRow : grdata.length;
						for(var kk=n.startRow;kk<end;kk++) {
							str += grdata[kk].join('');
						}
						var jj;
						if (gg !== undefined) {
							for (jj = 0; jj < grp.groupField.length; jj++) {
								if (gg.dataIndex === grp.groupField[jj]) {
									break;
								}
							}
							toEnd = grp.groupField.length - jj;
						}
						for (var ik = 0; ik < toEnd; ik++) {
							if(!sumreverse[ik]) { continue; }
							var hhdr = "";
							if(grp.groupCollapse && !grp.showSummaryOnHide) {
								hhdr = " style=\"display:none;\"";
							}
							str += "<tr"+hhdr+" role=\"row\" class=\"ui-widget-content jqfoot ui-row-"+$t.p.direction+"\">";
							var fdata = findGroupIdx(i, ik, grp.groups),
							cm = $t.p.colModel,
							vv, grlen = fdata.cnt;
							for(var k=0; k<colspans;k++) {
								var tmpdata = "<td "+$t.formatCol(k,1,'')+">&#160;</td>",
								tplfld = "{0}";
								$.each(fdata.summary,function(){
									if(this.nm === cm[k].name) {
										if(cm[k].summaryTpl)  {
											tplfld = cm[k].summaryTpl;
										}
										if(this.st.toLowerCase() === 'avg') {
											if(this.v && grlen > 0) {
												this.v = (this.v/grlen);
											}
										}
										try {
											vv = $t.formatter('', this.v, k, this);
										} catch (ef) {
											vv = this.v;
										}
										tmpdata= "<td "+$t.formatCol(k,1,'')+">"+$.jgrid.format(tplfld,vv)+ "</td>";
										return false;
									}
								});
								str += tmpdata;
							}
							str += "</tr>";
						}
						toEnd = jj;
					}
				});
				$("#"+$.jgrid.jqID($t.p.id)+" tbody:first").append(str);
				// free up memory
				str = null;
				$.each(grp.groups,function(i,n){
					//对设置合并单元格模式进行处理
					 if( grp.mergeCell) {
						 /*
						 *获取分组列当前组的单元格：通过条件大于（gt）起始单元格同时小于（lt）结束单元格获得；
						 *strtRow为起始序号，cnt为此组总单元格树；设置数据汇总每分组末尾增加一行，获取ceel时需考虑在内
						 */
						var cell = $("#"+$.jgrid.jqID($t.p.id)+" td[aria-describedby=\""+$t.p.id+'_'+n.dataIndex+"\"]:lt("
								  + parseInt(grp.groups[i].summary.length>0 ?(grp.groups[i].startRow+grp.groups[i].cnt+i):(grp.groups[i].startRow+grp.groups[i].cnt)) +")"
								  + ((grp.groups[i].startRow == 0)?"":(":gt(" + String(parseInt(grp.groups[i].summary.length>0 ?(grp.groups[i].startRow+i-1):(grp.groups[i].startRow-1)))+")")) );
						var k =true;
						$.each(cell,function(j,m){
							//分组列第一个单元格设置合并，相同组其他单元格隐藏
							if(($(m).text() == grp.groups[i].value) && (n.cnt>1))  {
							   if(k) {
								   $(m).attr("rowspan",n.cnt) ;
								   k = false;
							   }else{
								   $(m).hide();
							   }
							}
						})
					}
				})
			});
		},
		//合并单元格
	    mergeCells:function(opt){
	        var $t = this[0],
	            cellfuc = $.isFunction(opt.valuefunc) ? true : false;
	        opt = $.extend({rowid:"",column:"",rowspan:1,colspan:1,valuefunc:null},opt) ;
	        if(opt.rowid===""||$("#"+opt.rowid,this).size()==0){ return;}
	        if(opt.rowspan==1&&opt.colspan==1){ return;}
	        var celltext=cellfuc?opt.valuefunc.call(this,opt.rowid,opt.column) : $($t).jqGrid("getRowData",opt.rowid)[opt.column];
	        var tr = $( "tr[id="+opt.rowid+"]",$t);
	        var td = $( "tr[id="+opt.rowid+"]"+" td[aria-describedby=\""+$t.p.id+'_'+opt.column+"\"]",$t);
	        td.attr("rowspan",opt.rowspan).attr("colspan",opt.colspan);
	        td.addClass("grid-td-merged");
	        td.html(celltext);
	        for(var i=1;i<opt.colspan;i++){
	            td=td.next();
	            td.hide();
	           // td.val(celltext);
	        }
	        for(var i=1;i<opt.rowspan;i++){
	            tr=tr.next();
	            var td=tr.find("td[aria-describedby=\""+$t.p.id+'_'+opt.column+"\"]").hide();
	            td.val(celltext);
	            for(var j=1;j<opt.colspan;j++){
	                 td=td.next();
	                 td.hide();
	               //  td.val(celltext);
	            }
	        }
	    },
        //保存当前处于编辑状态的单元格
        saveEditCell:function(){
            return this.each(function() {
                var $t = this;
                if (!$t.grid || $t.p.cellEdit !== true) {return;}
                if ($t.p.savedRow.length>0) {
                    $($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
                }
            })
        },
        //获取新增数据
        getAdded:function(){
             var  insertrow=[],jsonText;
            this.each(function(){
               var  $t = this,
                    editrowobj ,
                    delids =  $t.p._delrowid,
                    newidrule = $t.p.addParams.rowID;
               //获取之前保存编辑状态的单元格
               if ($t.p.savedRow.length>0) {
                   $($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
               }
               //获取编辑的数据
               editrowobj =  jQuery($t).jqGrid('getChangedCells','all');
               for(var i=0;i<$t.p.colModel.length;i++){
                    if($t.p.colModel[i].name == "id") {
                        isid  =   true ;
                        break;
                    }
               };
               for(var i=0;i<editrowobj.length;i++){
                  if(editrowobj[i].id.search(newidrule) !== -1){
                       //新增数据主键值恢复为空 ，不传到后台
                       // var ids = $.inArray("id", editrowobj[i]);
                       // editrowobj[i].splice( ids ,1 );
                       insertrow.push(editrowobj[i])  ;
                   }
               };
            })
             //序列化json对象
             jsonText = JSON.stringify(insertrow) ;
             return  jsonText;
        },
        //获取编辑数据
        getEdited:function(){
             var   editrow=[],jsonText,isid=false;
            this.each(function(){
            
               var  $t = this,
                    editrowobj ,
                    delids =  $t.p._delrowid,
                    newidrule = $t.p.addParams.rowID;
               //获取之前保存编辑状态的单元格
               if ($t.p.savedRow.length>0) {
                   $($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
               }
               //获取编辑的数据
               editrowobj =  jQuery($t).jqGrid('getChangedCells','all');
               for(var i=0;i<$t.p.colModel.length;i++){
                    if($t.p.colModel[i].name == "id") {
                        isid  =   true ;
                        break;
                    }
               };
               for(var i=0;i<editrowobj.length;i++){
                  if(editrowobj[i].id.search(newidrule) == -1){
                       editrow.push(editrowobj[i])  ;
                   }
                    //如果列模型没定义id 去掉id属性
                   if(!isid){
                       editrowobj[i].id = undefined;
                   }
               };
            })
             //序列化json对象
             jsonText = JSON.stringify(editrow) ;
             return  jsonText ;
        },
        //获取删除数据
        getDeled:function(){
             var   deleteRows=[],jsonText,delids;
            this.each(function(){
               var  $t = this,
                    newidrule = $t.p.addParams.rowID;
                    delids =  $t.p._delrowid;
               //获取之前保存编辑状态的单元格
                if ($t.p.savedRow.length>0) {
                    $($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
                }
                //如果删除数据为新增数据，则不提交到服务器端
                for(var j=0;j<delids.length;j++){
                   var c = delids[j].search(newidrule);
                   if(delids[j].search(newidrule) !== -1){
                       delids.splice( j ,1 );
                       --j;
                   };
                };
            })
             //序列化json对象
             jsonText = JSON.stringify(delids) ;
             return  jsonText ;
        },
        // 获取grid中编辑、新增、删除的json数据
		// -- by zhanghp 20120804 增加参数validated bool类型，默认值 true
		// 如果设置为false，不进行数据验证就进行提交数据获取操作
        getJsontosubmit:function(custompara,validated){
                var  insertrow=[] , editrow=[],editrowobj, delrow=[],$t= this[0],jsonText,isid=false,
                     targetjson = {addRows:"",updateRows:"",deleteRows:""},
                     delids =  $t.p._delrowid,
                     newidrule = $t.p.addParams.rowID;
                //设置之前保存编辑状态的单元格
                if ($t.p.savedRow.length>0) {
                    $($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
                }
                //获取编辑的数据
                editrowobj =  jQuery($t).jqGrid('getChangedCells','all');
                for(var i=0;i<$t.p.colModel.length;i++){
                    if($t.p.colModel[i].name == "id") {
                        isid  =   true ;
                        break;
                    }
                };
                for(var i=0;i<editrowobj.length;i++){
                   if($("#"+editrowobj[i].id,this.id).hasClass("added")){
                       //新增数据主键值恢复为空 ，不传到后台
                       // var ids = $.inArray("id", editrowobj[i]);
                       // editrowobj[i].splice( ids ,1 );
                       insertrow.push(editrowobj[i])  ;
                   } else{
                       editrow.push(editrowobj[i])  ;
                   };
                   //如果列模型没定义id 去掉id属性
                   if(!isid){
                       editrowobj[i].id = undefined;
                   }
                };

                //如果删除数据为新增数据，则不提交到服务器端
                for(var j=0;j<delids.length;j++){
                   var c = delids[j].search(newidrule);
                   if(delids[j].search(newidrule) !== -1){
                       delids.splice( j ,1 );
                       --j;
                   };
                };
                targetjson.addRows =  insertrow;
                targetjson.updateRows =  editrow;
                targetjson.deleteRows =  delids;
                
                // --by zhanghp 2012/08/07 start
				// 增加验证
				if ('undefined' == typeof validated || true == validated) {
					var isValid = this.checkGridData(targetjson);
					if (!isValid[0][0]){
						// showWarn(isValid[0][1],3000);
						new biz.alert({type:"alert",message:isValid[0][1],title:I18N.warn}) ;
						new biz.alert({type:"hide",times:3000}) ;
						return null;
					}
				}
				// --by zhanghp 2010/08/07 end
                
                if (typeof custompara != 'undefined') {
                     targetjson.custompara = custompara;
                };

                //序列化json对象
                jsonText = JSON.stringify(targetjson) ;
                return  jsonText;
        } ,
		/**
		 * 验证Grid组件提交的数据，一般来源于getJsonToSubmit方法
		 * 
		 * @param {string |
		 *            object} data 是被验证的数据，可以是Json格式字符串或者Js对象
		 * @return {object[]}
		 *         验证通过，返回验证信息，如果验证通过返回[[true,""]]失败返回[[false,"验证失败消息"],....]
		 * @author zhanghp 2012-08-07
		 */
		checkGridData : function(data) {
			// 如果传进来的是String，转换为Js对象
			var oData = data;
			if ("string" == typeof(data)) {
				oData = JSON.parse(data);
			}
			var $t = this[0];
			var result = [];
			for (var i = 0; i < oData.addRows.length; i++) {
				for (var j = 0; j < $t.p.colModel.length; j++) {
					var cv = $.jgrid.checkValues(
						oData.addRows[i][$t.p.colModel[j].name], j, $t,$t.p.colModel[j].editrules,$t.p.colNames[j],false);
					if (!cv[0])
						result.push(cv);
				}

			}
			for (var i = 0; i < oData.updateRows.length; i++) {
				for (var j = 0; j < $t.p.colModel.length; j++) {
					var cv = $.jgrid.checkValues(
						oData.updateRows[i][$t.p.colModel[j].name], j, $t,$t.p.colModel[j].editrules,$t.p.colNames[j],false);
					if (!cv[0])
						result.push(cv);
				}

			}
			if (0 == result.length)
				return [[true, ""]];
			return result;
		} ,
		// --by zhanghp 2012/08/07 end
        //获取编辑过得单元格值
        getChangedCells : function (mthd) {
		var ret=[];
		if (!mthd) {mthd='all';}
		this.each(function(){
			var $t= this,nm,et,uf,value,reg;
			if (!$t.grid) {return;}
			$($t.rows).each(function(j){
				var res = {};
				if ($(this).hasClass("edited")) {
					$('td',this).each( function(i) {
						nm = $t.p.colModel[i].name;
						et = $t.p.colModel[i].edittype;//编辑类型
                        uf = $t.p.colModel[i].unformat;//是否设置反格式化函数
                        if($(this).attr("title")){
                        	//如果textarea没编辑，需要取title才能获取换行符	
                            value =  $(this).html().length > $(this).attr("title").length ? $.jgrid.htmlDecode($(this).html()) : $.jgrid.htmlDecode($(this).attr("title"));
                        }else{
                            value =  $.jgrid.htmlDecode($(this).html());
                        }
						if(biz.isIE8){
							reg=new RegExp("<br>","gi");
						}else if(biz.isIE9 || biz.isFF){
							reg=new RegExp("\n","gi");
						}	
						if ( nm !== 'cb' && nm !== 'subgrid') {
							if (mthd=='dirty') {
								if ($(this).hasClass('dirty-cell')) {
									try {
										//如果编辑类型为textarea、没有设置反格式化函数
	                                    if(et=="textarea" &&  typeof(uf)=="undefined" ){	
	                                    	//如数据中存在<br>,全部转换为\r\n
	                                        res[nm] = value.replace(reg,"\r\n").replace(/<br>/gi,"\r\n");
	                                    } else{
	                                    	res[nm] = $.unformat.call($t,this,{rowId:$t.rows[j].id, colModel:$t.p.colModel[i]},i);
	                                    }
									} catch (e){
										res[nm] = $.jgrid.htmlDecode($(this).html());
									}
								}
							} else {
								try {
									//如果编辑类型为textarea、没有设置反格式化函数
                                    if(et=="textarea" &&  typeof(uf)=="undefined" ){
                                    	//如数据中存在<br>,全部转换为\r\n
                                        res[nm] = value.replace(reg,"\r\n").replace(/<br>/gi,"\r\n");
                                    } else{
                                    	res[nm] = $.unformat.call($t,this,{rowId:$t.rows[j].id,colModel:$t.p.colModel[i]},i);
                                    }
								} catch (e) {
									res[nm] = $.jgrid.htmlDecode($(this).html());
								}
							}
						}
					});
					res.id = this.id;
					ret.push(res);
				}
			});
		});
		return ret;
	},
        //调整工具栏布局
        navGridposition :function(opt){
            return this.each(function() {
                var  $t= this;//,opt=this.p;
                if((opt.navbar == opt.pager) && opt.toppager && opt.navtype == "top"){
                    var topPagerDiv = $(opt.toppager)[0];
                    $(opt.target+"_toppager_"+opt.pagerpos).remove();
                    $(opt.target+"_toppager_"+opt.recordpos).remove();
                    if(opt.pagerpos!="left" && opt.recordpos!="left"){
                      $(opt.pager+"_left").remove();
                    };
                    $(opt.pager+"_"+opt.pagerpos).attr({ align: "left" });
                }else if(opt.navtype == "bottom"){
                    $(opt.pager+"_"+opt.pagerpos +" .ui-pg-table").css({"float":"right"});
                    if(opt.pagerwidth !==""){
                        $(opt.pager+"_"+opt.pagerpos).width(opt.pagerwidth);
                    }
                    if(opt.recordwidth !==""){
                        $(opt.pager+"_"+opt.recordpos).width(opt.recordwidth);
                          //$(opts.pager+"_"+opts.recordpos +" .ui-paging-info").css({"text-align":"center"});
                    }
                }else if(opt.navtype == "none"){
                    //添加样式
                    $(opt.pager).addClass("ui-jqgrid-pager-nonav");
                    $(opt.pager+"_"+opt.pagerpos).attr({ align: "right" });
                    $(opt.pager+"_"+opt.recordpos +" .ui-paging-info").css({ "text-align":"center" });
                    if(opt.recordwidth !==""){
                        $(opt.pager+"_"+opt.recordpos).width(opt.recordwidth);
                    }
                }else if(opt.navtype == "topRight"){
                    $(opt.pager).remove();
                    $(opt.target+"_toppager_"+opt.recordpos +" .ui-paging-info").css({"text-align":"left"});
                }
                //分页栏为simple（上一页、下一页）时相关处理
                if(opt.pagerType == "simple"){
                    $("#first_"+$(opt.pager).attr("id")).remove();
                    $("#last_"+$(opt.pager).attr("id")).remove();
                    $("#prev_"+$(opt.pager).attr("id")).append($.jgrid.nav.prev);
                    $("#next_"+$(opt.pager).attr("id")).append($.jgrid.nav.next);
                    $("#prev_"+$(opt.pager).attr("id")).html($("<div class='ui-pg-div'></div>").append($("#prev_"+$(opt.pager).attr("id")).html()).button());
                    $("#next_"+$(opt.pager).attr("id")).html($("<div class='ui-pg-div'></div>").append($("#next_"+$(opt.pager).attr("id")).html()).button());
                    if(opt.toppager){
                        $("#first_t_"+$(opt.id).attr("id")+"_toppager").remove();
                        $("#last_t_"+$(opt.id).attr("id")+"_toppager").remove();
                        $("#prev_t_"+$(opt.id).attr("id")+"_toppager").append($.jgrid.nav.prev);
                        $("#next_t_"+$(opt.id).attr("id")+"_toppager").append($.jgrid.nav.next);
                        $("#prev_t_"+$(opt.id).attr("id")+"_toppager").html($("<div class='ui-pg-div'></div>").append($("#prev_t_"+$(opt.id).attr("id")+"_toppager").html()).button());
                        $("#next_t_"+$(opt.id).attr("id")+"_toppager").html($("<div class='ui-pg-div'></div>").append($("#next_t_"+$(opt.id).attr("id")+"_toppager").html()).button());
                    }
                    $(".ui-pager-control > .ui-pg-table > tbody > tr > td").attr("style","width: auto;");
                }
            })
        } ,
        //增加一行,不需用户维护新增id
        addLocalRow: function(opt){
           var istrue;
           this.each(function() {
                var newid = this.p.addParams.rowID + this.p.addParams.serial;
                var option = $.extend({data:{},operate:"first"},opt),
                    air = $.isFunction(this.p.afterAddRow) ? true : false,
                    id = option.id?option.id:newid,$t=this;
                //增加之前保存编辑状态的单元格
                if (this.p.savedRow.length>0) {
                    $(this).jqGrid("saveCell",this.p.savedRow[0].id,this.p.savedRow[0].ic);
                }
                istrue = $(this).jqGrid('addRowData',id,option.data ,option.operate,option.srcrowid);
                if(option.data.length>0){
    				for(var i=0;i<option.data.length;i++){
    					$("#"+option.data[i][id],this).addClass("edited added");    //新增行添加编辑样式*/
    				}
    			}else{
    				$("#"+id,this).addClass("edited added");    //新增行添加编辑样式*/
    			}
                for(var i in option.data){ //新增行单元格添加新增样式*/
                	var editCellElem = $( "tr[id="+id+"]"+" td[aria-describedby=\""+$t.p.id+'_'+i+"\"]",$t).addClass("dirty-cell");
                    if(!$t.p.editCellFlag){ editCellElem.css({background: "none"}); }
                }
                // afterAddRow事件在addRowData 完成后触发
                if(air) { this.p.afterAddRow.call(this,id,option.data); }
                if(!option.id)this.p.addParams.serial++ ;
           })
            return istrue;
        },
         //设置一行,更新行、单元格样式
        setLocalRow: function(opt){
           var istrue;
           this.each(function() {
                var option = $.extend({data:{}},opt),
                    $t=this;
                //设置之前保存编辑状态的单元格
                if (this.p.savedRow.length>0) {
                    $(this).jqGrid("saveCell",this.p.savedRow[0].id,this.p.savedRow[0].ic);
                }
                if(option.id){
                    istrue = $($t).jqGrid('setRowData',option.id,option.data);
                    $("#"+option.id,$t).addClass("edited");    //新增行添加编辑样式*/
                    for(var i in option.data){ //新增行单元格添加新增样式*/
                    	var editCellElem = $( "tr[id="+option.id+"]"+" td[aria-describedby=\""+$t.p.id+'_'+i+"\"]",$t).addClass("dirty-cell");
                        if(!$t.p.editCellFlag){ editCellElem.css({background: "none"}); }
                    }
                }else{
                   istrue = false;
                }
           })
            return istrue;
        },
        //删除一行,不需用户维护id
        delLocalRow: function(ids){
          return this.each(function(){
              var curdelrowid=[];
              //删除之前保存编辑状态的单元格
              if (this.p.savedRow.length>0) {
                  $(this).jqGrid("saveCell",this.p.savedRow[0].id,this.p.savedRow[0].ic);
              }
              //如果多选不可用ids为字符串
              if(!this.p.multiselect){
                  curdelrowid.push(ids);
                   //拷贝记录删除id
                   this.p._delrowid = curdelrowid.concat(this.p._delrowid);
                   $(this).jqGrid("collapseSubGridRow",ids); 
                   $(this).jqGrid('delRowData',ids);

              }else{
                   curdelrowid = ids.concat();
                  //拷贝记录删除id
                  this.p._delrowid = curdelrowid.concat(this.p._delrowid);
                  for(var i=0;i<curdelrowid.length;i++){
                	 $(this).jqGrid("collapseSubGridRow",curdelrowid[i]); 
                 	 $(this).jqGrid('delRowData',curdelrowid[i]);
                  }

              }
           })
        },
        //修改增加、删除、编辑数据默认方式
        navGrid : function (elem, o, pEdit,pAdd,pDel,pSearch, pView) {
            o = $.extend({
                edit: true,
                editicon: "ui-icon-pencil",
                add: true,
                addicon:"ui-icon-plus",
                del: true,
                delicon:"ui-icon-trash",
                search: false,
                searchicon:"ui-icon-search",
                refresh: true,
                refreshicon:"ui-icon-refresh",
                refreshstate: 'firstpage',
                view: true,
                viewicon : "ui-icon-document",
                position : "left",
                closeOnEscape : true,
                beforeRefresh : null,
                afterRefresh : null,
                cloneToTop : true,
                alertwidth : 200,
                alertheight : 'auto',
                alerttop: null,
                alertleft: null,
                alertzIndex : null,
                floatp:"left"
            }, $.jgrid.nav, o ||{});
            return this.each(function() {
                if(this.nav) {return;}
                var alertIDs = {themodal:'alertmod',modalhead:'alerthd',modalcontent:'alertcnt'},
                $t = this, twd, tdw;
                if(!$t.grid || typeof elem != 'string') {return;}
                if ($("#"+alertIDs.themodal).html() === null) {
                    if(!o.alerttop && !o.alertleft) {
                        if (typeof window.innerWidth != 'undefined') {
                            o.alertleft = window.innerWidth;
                            o.alerttop = window.innerHeight;
                        } else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth !== 0) {
                            o.alertleft = document.documentElement.clientWidth;
                            o.alerttop = document.documentElement.clientHeight;
                        } else {
                            o.alertleft=1024;
                            o.alerttop=768;
                        }
                        o.alertleft = o.alertleft/2 - parseInt(o.alertwidth,10)/2;
                        o.alerttop = o.alerttop/2-25;
                    }
                    $.jgrid.createModal(alertIDs,"<div>"+o.alerttext+"</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>",{gbox:"#gbox_"+$.jgrid.jqID($t.p.id),jqModal:true,drag:true,resize:true,caption:o.alertcap,top:o.alerttop,left:o.alertleft,width:o.alertwidth,height: o.alertheight,closeOnEscape:o.closeOnEscape, zIndex: o.alertzIndex},"","",true);
                }
                var clone = 1;
                if(o.cloneToTop && $t.p.toppager) {clone = 2;}
                for(var i = 0; i<clone; i++) {
                    var tbd,
                    navtbl = $("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:"+ o.floatp +"';table-layout:auto;'><tbody><tr></tr></tbody></table>"),
                   // sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>",
                    sep="",
                    pgid, elemids;
                    if(i===0) {
                        pgid = elem;
                        elemids = $t.p.id;
                        if(pgid == $t.p.toppager) {
                            elemids += "_top";
                            clone = 1;
                        }
                    } else {
                        pgid = $t.p.toppager;
                        elemids = $t.p.id+"_top";
                    }
                    if($t.p.direction == "rtl") {$(navtbl).attr("dir","rtl").css("float","right");}
                    if (o.add) {
                        pAdd = pAdd || {};
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.addicon+"'></span>"+o.addtext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.addtitle || "",id : pAdd.id || "add_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                if ($.isFunction( o.addfunc )) {
                                    o.addfunc.call($t);
                                } else {
                                    $($t).jqGrid("editGridRow","new",pAdd); // 修改为默认增加空行
                                   // $($t).jqGrid("addRow");
                                }
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        tbd = null;
                    }
                    if (o.edit) {
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        pEdit = pEdit || {};
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.editicon+"'></span>"+o.edittext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.edittitle || "",id: pEdit.id || "edit_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                var sr = $t.p.selrow;
                                if (sr) {
                                	//选中多个值的情况
                                    if($t.p.selarrrow.length > 1){
                                    	jAlert(I18N.msg_single_edit_record, o.alertcap);
                                	}
                                	else{
	                                    if($.isFunction( o.editfunc ) ) {
	                                        o.editfunc.call($t, sr);
	                                    } else {
	                                        $($t).jqGrid("editGridRow",sr,pEdit);
	                                    }
                                	}
                                } else {
                                    jAlert(o.alerttext, o.alertcap);
                                   // $.jgrid.viewModal("#"+alertIDs.themodal,{gbox:"#gbox_"+$.jgrid.jqID($t.p.id),jqm:true});
                                   // $("#jqg_alrt").focus();
                                }
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        tbd = null;
                    }
                    if (o.view) {
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        pView = pView || {};
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.viewicon+"'></span>"+o.viewtext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.viewtitle || "",id: pView.id || "view_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                var sr = $t.p.selrow;
                                if (sr) {
                                	//选中多个值的情况
                                    if($t.p.selarrrow.length > 1){
                                    	jAlert(I18N.msg_single_view_record, o.alertcap);
                                	}
                                	else{
	                                    if($.isFunction( o.viewfunc ) ) {
	                                        o.viewfunc.call($t, sr);
	                                    } else {
	                                        $($t).jqGrid("viewGridRow",sr,pView);
	                                    }
                                	}
                                } else {
                                    jAlert(o.alerttext, o.alertcap);
                                    //$.jgrid.viewModal("#"+alertIDs.themodal,{gbox:"#gbox_"+$.jgrid.jqID($t.p.id),jqm:true});
                                    //$("#jqg_alrt").focus();
                                }
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        tbd = null;
                    }
                    if (o.del) {
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        pDel = pDel || {};
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.delicon+"'></span>"+o.deltext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.deltitle || "",id: pDel.id || "del_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                var dr;
                                if($t.p.multiselect) {
                                    dr = $t.p.selarrrow;
                                    if(dr.length===0) {dr = null;}
                                } else {
                                    dr = $t.p.selrow;
                                }
                                if(dr){
                                    if($.isFunction( o.delfunc )){
                                        o.delfunc.call($t, dr);
                                    }else{
                                        $($t).jqGrid("delGridRow",dr,pDel);//修改为delRow删除行，记录删除id
                                        //$($t).jqGrid("delLocalRow" ,dr);
                                    }
                                } else  {
                                     jAlert(o.alerttext, o.alertcap);
                                   // $.jgrid.viewModal("#"+alertIDs.themodal,{gbox:"#gbox_"+$.jgrid.jqID($t.p.id),jqm:true});$("#jqg_alrt").focus();
                                }
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        tbd = null;
                    }
                    if(o.add || o.edit || o.del || o.view) {$("tr",navtbl).append(sep);}
                    if (o.search) {
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        pSearch = pSearch || {};
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.searchicon+"'></span>"+o.searchtext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.searchtitle  || "",id:pSearch.id || "search_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                if($.isFunction( o.searchfunc )) {
                                    o.searchfunc.call($t, pSearch);
                                } else {
                                    $($t).jqGrid("searchGrid",pSearch);
                                }
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        if (pSearch.showOnLoad && pSearch.showOnLoad === true) {
                            $(tbd,navtbl).click();
                        }
                        tbd = null;
                    }
                    if (o.refresh) {
                        tbd = $("<td class='ui-pg-button ui-corner-all'></td>");
                        $(tbd).append("<div class='ui-pg-div'><span class='ui-icon "+o.refreshicon+"'></span>"+o.refreshtext+"</div>");
                        $("tr",navtbl).append(tbd);
                        $(tbd,navtbl)
                        .attr({"title":o.refreshtitle  || "",id: "refresh_"+elemids})
                        .click(function(){
                            if (!$(this).hasClass('ui-state-disabled')) {
                                if($.isFunction(o.beforeRefresh)) {o.beforeRefresh();}
                                $t.p.search = false;
                                try {
                                    var gID = $t.p.id;
                                    $t.p.postData.filters ="";
                                    $("#fbox_"+$.jgrid.jqID(gID)).jqFilter('resetFilter');
                                    if($.isFunction($t.clearToolbar)) {$t.clearToolbar(false);}
                                } catch (e) {}
                                switch (o.refreshstate) {
                                    case 'firstpage':
                                        $($t).trigger("reloadGrid", [{page:1}]);
                                        break;
                                    case 'current':
                                        $($t).trigger("reloadGrid", [{current:true}]);
                                        break;
                                }
                                if($.isFunction(o.afterRefresh)) {o.afterRefresh();}
                                 //删除行信息刷新
                                $t.p._delrowid = [];
                            }
                            return false;
                        }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass("ui-state-hover");
                                }
                            },
                            function () {$(this).removeClass("ui-state-hover");}
                        );
                        tbd = null;
                    }
                    tdw = $(".ui-jqgrid").css("font-size") || "11px";
                    $('body').append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:"+tdw+";visibility:hidden;' ></div>");
                    twd = $(navtbl).clone().appendTo("#testpg2").width();
                    $("#testpg2").remove();
                    $(pgid+"_"+o.position,pgid).append(navtbl);
                    //$(".ui-pg-div").button();
                    /*
                    if($t.p._nvtd) {
                        if(twd > $t.p._nvtd[0] ) {
                            $(pgid+"_"+o.position,pgid).width(twd);
                            $t.p._nvtd[0] = twd;
                        }
                        $t.p._nvtd[1] = twd;
                    } */
                    tdw =null;twd=null;navtbl =null;
                    this.nav = true;
                }
                //导航栏按钮
                $(".ui-pg-div").button();
            });
	    },
        //兼容百分比设置宽度 ，自适应大小
        setGridWidth : function(nwidth, shrink) {
            return this.each(function(){
                if (!this.grid ) {return;}
                var $t = this, cw,extwidth,
                initwidth = 0, brd=$.jgrid.cellWidth()? 0: $t.p.cellLayout, lvc, vc=0, hs=false, scw=$t.p.scrollOffset, aw, gw=0,
                cl = 0,cr;
                if(typeof shrink != 'boolean') {
                    shrink=$t.p.shrinkToFit;
                }
                
                if(nwidth != "auto" && nwidth != "100%" && shrink===true){
                    $(window).unbind("resize.gridwidth."+$.jgrid.jqID($t.p.id));
                }

                if( typeof nwidth == 'number' ){
                    nwidth = parseInt(nwidth,10);
                    $t.grid.width = $t.p.width = nwidth;extwidth = nwidth+"px";
                } else {
                    extwidth = nwidth;
                }

                $("#gbox_"+$.jgrid.jqID($t.p.id)).css("width",extwidth);
                if(isNaN(nwidth)){extwidth = "100%" ;nwidth =  $("#gbox_"+$.jgrid.jqID($t.p.id)).width();}
                $("#gview_"+$.jgrid.jqID($t.p.id)).css("width",extwidth);
                $($t.grid.bDiv).css("width",extwidth);
                $($t.grid.hDiv).css("width",extwidth);
                if($t.p.pager ) {$($t.p.pager).css("width",extwidth);}
                if($t.p.toppager ) {$($t.p.toppager).css("width",extwidth);}
                if($t.p.toolbar[0] === true){
                    $($t.grid.uDiv).css("width",extwidth);
                    if($t.p.toolbar[1]=="both") {$($t.grid.ubDiv).css("width",extwidth);}
                }
                if($t.p.footerrow) { $($t.grid.sDiv).css("width",extwidth); }
                if(shrink ===false && $t.p.forceFit === true) {$t.p.forceFit=false;}
                if(shrink===true) {
                    $.each($t.p.colModel, function() {
                        if(this.hidden===false){
                            cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
                            initwidth += cw+brd;
                            if(this.fixed) {
                                gw += cw+brd;
                            } else {
                                vc++;
                            }
                            cl++;
                        }
                    });
                    if(vc  === 0) { return; }
                    $t.p.tblwidth = initwidth;
                    aw = nwidth-brd*vc-gw;
                    if(!isNaN($t.p.height)) {
                        if($($t.grid.bDiv)[0].clientHeight < $($t.grid.bDiv)[0].scrollHeight || $t.rows.length === 1){
                            hs = true;
                            aw -= scw;
                        }
                    }
                    initwidth =0;
                    var cle = $t.grid.cols.length >0;
                    $.each($t.p.colModel, function(i) {
                        if(this.hidden === false && !this.fixed){
                            cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
                            /*
                            * brd 单元格内边距+邊框 vc 可拖动列数  aw可以自由拖动大小列总宽度
                            */
                            cw = Math.round(aw*cw/($t.p.tblwidth-brd*vc-gw));
                            //cw = Math.floor(aw*cw/($t.p.tblwidth-brd*vc-gw));
                            if (cw < 0) { return; }
                            this.width =cw;
                            initwidth += cw;
                            $t.grid.headers[i].width=cw;
                            $t.grid.headers[i].el.style.width=cw+"px";
                            //修复多表头自适应组合使用对不齐问题
                            if($t.p.totalGroupHeader.length > 0){$("#"+$t.grid.headers[i].el.id).css({width:cw+"px"});}
                            if($t.p.footerrow) { $t.grid.footers[i].style.width = cw+"px"; }
                            if(cle) { $t.grid.cols[i].style.width = cw+"px"; }
                            lvc = i;
                        }
                    });

                    if (!lvc) { return; }

                    cr =0;
                    if (hs) {
                        if(nwidth-gw-(initwidth+brd*vc) !== scw){
                            cr = nwidth-gw-(initwidth+brd*vc)-scw;
                        }
                    } else if( Math.abs(nwidth-gw-(initwidth+brd*vc)) !== 1) {
                        cr = nwidth-gw-(initwidth+brd*vc);
                    }
                    $t.p.colModel[lvc].width += cr;
                    $t.p.tblwidth = initwidth+cr+brd*vc+gw;
                    if($t.p.tblwidth > nwidth) {
                        var delta = $t.p.tblwidth - parseInt(nwidth,10);
                        $t.p.tblwidth = nwidth;
                        cw = $t.p.colModel[lvc].width = $t.p.colModel[lvc].width-delta;
                    } else {
                        cw= $t.p.colModel[lvc].width;
                    }
                    $t.grid.headers[lvc].width = cw;
                    $t.grid.headers[lvc].el.style.width=cw+"px";
                    if(cle) { $t.grid.cols[lvc].style.width = cw+"px"; }
                    if($t.p.footerrow) {
                        $t.grid.footers[lvc].style.width = cw+"px";
                    }
                }
                if($t.p.tblwidth) {
                    $('table:first',$t.grid.bDiv).css("width",$t.p.tblwidth+"px");
                    $('table:first',$t.grid.hDiv).css("width",$t.p.tblwidth+"px");
                    $t.grid.hDiv.scrollLeft = $t.grid.bDiv.scrollLeft;
                    if($t.p.footerrow) {
                        $('table:first',$t.grid.sDiv).css("width",$t.p.tblwidth+"px");
                    }
                }
     	       //fix bug：portal 中集成biz应用，grid出现滚动条
     	       // $($t).removeAttr("style"); 这样修改，在单元格编辑下会出现错位
            });
	    },
        //兼容百分比设置高度 ，自适应大小
	    setGridHeight : function (nh) {
            return this.each(function (){
                var $t = this;
                if(!$t.grid) {return;}
                var bDiv = $($t.grid.bDiv);
                bDiv.css({height: nh+(isNaN(nh)?"":"px")});
                /*
                var c = nh.charCodeAt( nh.length-1 );
                bDiv.css({height:(c < 0x30 || c > 0x39) ? nh : nh + "px"});  */
                if($t.p.frozenColumns === true){
                    //follow the original set height to use 16, better scrollbar width detection
                    $('#'+$.jgrid.jqID($t.p.id)+"_frozen").parent().height(bDiv.height() - 16);
                }
                $t.p.height = nh;
                if ($t.p.scroll) { $t.grid.populateVisible(); }
            });
	    },
        //修改编辑单元格方式
        editCell : function (iRow,iCol, ed){
		  return this.each(function (){
			var $t = this, nm, tmp,cc, cm;
			if (!$t.grid || $t.p.cellEdit !== true) {return;}
			iCol = parseInt(iCol,10);
			// select the row that can be used for other methods
			$t.p.selrow = $t.rows[iRow].id;
			if (!$t.p.knv) {$($t).jqGrid("GridNav");}
			// check to see if we have already edited cell
			if ($t.p.savedRow.length>0) {
				// prevent second click on that field and enable selects
				if (ed===true ) {
					if(iRow == $t.p.iRow && iCol == $t.p.iCol){
						return;
					}
				}
				// save the cell
				$($t).jqGrid("saveCell",$t.p.savedRow[0].id,$t.p.savedRow[0].ic);
			} else {
				window.setTimeout(function () { $("#"+$.jgrid.jqID($t.p.knv)).attr("tabindex","-1").focus();},0);
			}
			cm = $t.p.colModel[iCol];
			nm = cm.name;
			//编辑类型为下拉树，为支持单击父节点时加载子节点数据场景，单元格编辑时需去掉默认设置的格式化
			if(cm.eidttype == "comboboxtree"){
				cm.formatter = undefined;
			}
			if (nm=='subgrid' || nm=='cb' || nm=='rn') {return;}
			cc = $("td:eq("+iCol+")",$t.rows[iRow]);
			if (cm.editable===true && ed===true && !cc.hasClass("not-editable-cell")) {
				if(parseInt($t.p.iCol,10)>=0  && parseInt($t.p.iRow,10)>=0) {
					//$("td:eq("+$t.p.iCol+")",$t.rows[$t.p.iRow]).removeClass("edit-cell ui-state-highlight");
                    $("td:eq("+$t.p.iCol+")",$t.rows[$t.p.iRow]).removeClass("edit-cell");
					$($t.rows[$t.p.iRow]).removeClass("selected-row ui-state-hover");
				}
				//$(cc).addClass("edit-cell ui-state-highlight");
                $(cc).addClass("edit-cell");
				// $($t.rows[iRow]).addClass(" ui-state-hover");
				try {
					tmp =  $.unformat.call($t,cc,{rowId: $t.rows[iRow].id, colModel:cm},iCol);
				} catch (_) {
					tmp = ( cm.edittype && cm.edittype == 'textarea' ) ? $(cc).text() : $(cc).html();
				}
				if(biz.isIE8 && cm.edittype == 'textarea') {
					//如果此单元格编辑过，把<br>替换为\r\n
				    if($(cc).hasClass("dirty-cell")){
						var reg=new RegExp("<br>","gi");
                        v= $(cc).html().replace(reg,"\r\n");	
					}else{
						//ie8编辑类型为textarea时回车换行需要在title属性获取
						tmp = $(cc).attr("title");
					}
				}
				if($t.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp); }
				if (!cm.edittype) {cm.edittype = "text";}
				$t.p.savedRow.push({id:iRow,ic:iCol,name:nm,v:tmp});
				if(tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length===1 && tmp.charCodeAt(0)===160) ) {tmp='';}
				if($.isFunction($t.p.formatCell)) {
					var tmp2 = $t.p.formatCell.call($t, $t.rows[iRow].id,nm,tmp,iRow,iCol);
					if(tmp2 !== undefined ) {tmp = tmp2;}
				}
				var opt = $.extend({}, cm.editoptions || {} ,{id:iRow+"_"+nm,name:nm});
				//添加$(cc).attr("value")作为参数，编辑类型为radio、checkbox、select、comboboxlist、comboboxtree时用
				var elc = $.jgrid.createEl(cm.edittype,opt,tmp,true,$.extend({},$.jgrid.ajaxOptions,$t.p.ajaxSelectOptions || {}),$(cc).attr("value"));
				$($t).triggerHandler("jqGridBeforeEditCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
				if ($.isFunction($t.p.beforeEditCell)) {
					$t.p.beforeEditCell.call($t, $t.rows[iRow].id,nm,tmp,iRow,iCol);
				}
				$(cc).html("").append(elc).attr("tabindex","0");
				//comboboxlist、comboboxtree组件需要在elc统计节点生成span标签，需要在elc完成append操作再初始化
				if(cm.edittype == "comboboxlist"){
					var setting = $.extend(opt,{targetElem:elc,selected:tmp});
					new biz.comboboxlist(setting);
                }else if(cm.edittype == "comboboxtree"){
                    var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                    new biz.comboboxtree(setting);
                }
				window.setTimeout(function () { $(elc).focus();},0);
				$("span",cc).attr("tabindex",0);				
				$("span",cc).bind("keydown",function(e) {
					if (e.keyCode === 9)  {
						//隐藏已经弹出的div
						var inputId  = $("input",cc).attr("id");
						$("#"+inputId+"_menuContent").css("display","none");
						if(!$t.grid.hDiv.loading ) {
							if (e.shiftKey) {$($t).jqGrid("prevCell",iRow,iCol);} //Shift TAb
							else {$($t).jqGrid("nextCell",iRow,iCol);} //Tab
						} else {
							return false;
						}
					}
					e.stopPropagation();
				});
				$("input, select, textarea",cc).bind("keydown",function(e) {
					if (e.keyCode === 27) {
						if($("input.hasDatepicker",cc).length >0) {
							if( $(".ui-datepicker").is(":hidden") )  { $($t).jqGrid("restoreCell",iRow,iCol); }
							else { $("input.hasDatepicker",cc).datepicker('hide'); }
						} else {
							$($t).jqGrid("restoreCell",iRow,iCol);
						}
					} //ESC
					if (e.keyCode === 13 && this.type !== "textarea") {//解决textarea不能换行问题
						$($t).jqGrid("saveCell",iRow,iCol);
						// Prevent default action
						return false;
					} //Enter
					if (e.keyCode === 9)  {
						if(!$t.grid.hDiv.loading ) {
							if (e.shiftKey) {$($t).jqGrid("prevCell",iRow,iCol);} //Shift TAb
							else {$($t).jqGrid("nextCell",iRow,iCol);} //Tab
						} else {
							return false;
						}
					}
					e.stopPropagation();
				});
				$($t).triggerHandler("jqGridAfterEditCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
				if ($.isFunction($t.p.afterEditCell)) {
					$t.p.afterEditCell.call($t, $t.rows[iRow].id,nm,tmp,iRow,iCol);
				}
			} else {
				if (parseInt($t.p.iCol,10)>=0  && parseInt($t.p.iRow,10)>=0) {
					$("td:eq("+$t.p.iCol+")",$t.rows[$t.p.iRow]).removeClass("edit-cell ui-state-highlight");
                   // $("td:eq("+$t.p.iCol+")",$t.rows[$t.p.iRow]).removeClass("edit-cell");
					$($t.rows[$t.p.iRow]).removeClass("ui-state-hover");
				}
				//cc.addClass("edit-cell ui-state-highlight");
                cc.addClass("edit-cell");
				$($t.rows[iRow]).addClass(" ui-state-hover");
				tmp = cc.html().replace(/\&#160\;/ig,'');
				$($t).triggerHandler("jqGridSelectCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
				if ($.isFunction($t.p.onSelectCell)) {
					$t.p.onSelectCell.call($t, $t.rows[iRow].id,nm,tmp,iRow,iCol);
				}
			}
			$t.p.iCol = iCol; $t.p.iRow = iRow;
			//编辑类型为下拉树，为支持单击父节点时加载子节点数据场景,单元格编辑完成后设置formatter为dictionary
			if(cm.eidttype == "comboboxtree"){
				cm.formatter = "dictionary";
			}
		  });
	    },
        //添加select、radio、checkbox、comboboxlist、comboboxtree、datepicke的保持单元格时处理
     	saveCell : function (iRow, iCol){
		  return this.each(function(){
			var $t= this, fr;
			if (!$t.grid || $t.p.cellEdit !== true) {return;}
			if ( $t.p.savedRow.length >= 1) {fr = 0;} else {fr=null;}
			if(fr !== null) {
				var cc = $("td:eq("+iCol+")",$t.rows[iRow]),v,v2,
				cm = $t.p.colModel[iCol], nm = cm.name, nmjq = $.jgrid.jqID(nm) ;
				switch (cm.edittype) {
					case "select":
						if(!cm.editoptions.multiple) {
							v = $("#"+iRow+"_"+nmjq+">option:selected",$t.rows[iRow]).val();
							v2 = $("#"+iRow+"_"+nmjq+">option:selected",$t.rows[iRow]).text();
						} else {
							var sel = $("#"+iRow+"_"+nmjq,$t.rows[iRow]), selectedText = [];
							v = $(sel).val();
							if(v) { v.join(",");} else { v=""; }
							$("option:selected",sel).each(
								function(i,selected){
									selectedText[i] = $(selected).text();
								}
							);
							v2 = selectedText.join(",");
						}
						if(cm.formatter) { v2 = v; }
						break;
					case "checkbox":
						if($("#"+iRow+"_"+nmjq+" input").is(":checked")) {
                            var str = "",nam = "",checkElement = " input[type=checkbox]:checked";
                            $("#"+iRow+"_"+nmjq+ checkElement).each(function(i){
                                 str+= (((i==0)?"":",") + $(this).val());
                                 nam+= (((i==0)?"":",") + $(this).next().text());
                            }) ;
                            v = str;
                            v2 = nam;
						}else {
							v = "";
							v2 = "";
						}
						if(cm.formatter) { v2 = v; }
						break;
                    case "radio":
						if($("#"+iRow+"_"+nmjq+" input").is(":checked")) {
                            var str = "",nam = "",checkElement = " input[type=radio]:checked";
                            $("#"+iRow+"_"+nmjq+ checkElement).each(function(i){
                                 str+= (((i==0)?"":",") + $(this).val());
                                 nam+= (((i==0)?"":",") + $(this).next().text());
                            }) ;
                            v = str;
                            v2 = nam;
						}else {
							v = "";
							v2 = "";
						}
						if(cm.formatter) { v2 = v; }
						break;
                    case "comboboxlist":
	                   	 v = $("#"+iRow+"_"+nmjq).val();
	                   	 v2 = $("#"+iRow+"_"+nmjq +"_span").text();
	                   	 if(""==v&&I18N.dropdownlist_defaultValue==v2){
	                   		 v2 = "" 
	                   	 }
	                   	 if(cm.formatter) { v2 = v; }
	                   	 break;
                   case "comboboxtree":
	                   	 v = $("#"+iRow+"_"+nmjq).val();
	                   	 v2 = $("#"+iRow+"_"+nmjq +"_span").text();
	                   	 if(""==v&&I18N.dropdownlist_defaultValue==v2){
	                   		 v2 = "" 
	                   	 }
	                   	 //if(cm.formatter) { v2 = v; }
	                   	 break;
					case "password":
					case "text":
					case "number":
                    case "datepicker": //datepicker与text等类型一样，返回具体值即可
					case "button" :
					case "autocomplete":
						v = $("#"+iRow+"_"+nmjq,$t.rows[iRow]).val();
						v2=v;
						break;
					case "textarea":
                        var temp = $("#"+iRow+"_"+nmjq,$t.rows[iRow])[0];
                        v = document.getElementById(iRow+"_"+nmjq).value;
						if(biz.isIE8 || biz.isIE7 || biz.isIE6){
							var reg=new RegExp("\r\n","g");
                            v= v.replace(reg,"<br>");
						}
                        v2=v;
                        break;
					case 'custom' :
						try {
							if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
								v = cm.editoptions.custom_value.call($t, $(".customelement",cc),'get');
								if (v===undefined) { throw "e2";} else { v2=v; }
							} else { throw "e1"; }
						} catch (e) {
							if (e=="e1") { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.nodefined,jQuery.jgrid.edit.bClose); }
							if (e=="e2") { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.novalue,jQuery.jgrid.edit.bClose); }
							else {$.jgrid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose); }
						}
						break;
				}
				// The common approach is if nothing changed do not do anything
				//if (v2 != $t.p.savedRow[fr].v ){
				  if (v2 != $t.p.savedRow[fr].v || v2==""){//增加当内容为空时总进行校验
					if ($.isFunction($t.p.beforeSaveCell)) {
						var vv = $t.p.beforeSaveCell.call($t, $t.rows[iRow].id,nm, v, iRow,iCol);
						if (vv) {v = vv; v2=vv;}
					}
					var cv = $.jgrid.checkValues(v,iCol,$t);
					if(cv[0] === true) {
						var addpost = {};
						if ($.isFunction($t.p.beforeSubmitCell)) {
							addpost = $t.p.beforeSubmitCell.call($t, $t.rows[iRow].id,nm, v, iRow,iCol);
							if (!addpost) {addpost={};}
						}
						if( $("input.hasDatepicker",cc).length >0) { $("input.hasDatepicker",cc).datepicker('hide'); }
						if ($t.p.cellsubmit == 'remote') {
							if ($t.p.cellurl) {
								var postdata = {};
								if($t.p.autoencode) { v = $.jgrid.htmlEncode(v); }
								postdata[nm] = v;
								var idname,oper, opers;
								opers = $t.p.prmNames;
								idname = opers.id;
								oper = opers.oper;
								postdata[idname] = $t.rows[iRow].id;
								postdata[oper] = opers.editoper;
								postdata = $.extend(addpost,postdata);
								$("#lui_"+$t.p.id).show();
								$t.grid.hDiv.loading = true;
								$.ajax( $.extend( {
									url: $t.p.cellurl,
									data :$.isFunction($t.p.serializeCellData) ? $t.p.serializeCellData.call($t, postdata) : postdata,
									type: "POST",
									complete: function (result, stat) {
										$("#lui_"+$t.p.id).hide();
										$t.grid.hDiv.loading = false;
										if (stat == 'success') {
											if ($.isFunction($t.p.afterSubmitCell)) {
												var ret = $t.p.afterSubmitCell.call($t, result,postdata.id,nm,v,iRow,iCol);
												if(ret[0] === true) {
													$(cc).empty();
													//特殊编辑类型把value值保存在td属性里
													if(cm.edittype == "select" || cm.edittype == "radio"|| cm.edittype == "checkbox" || 
															   cm.edittype == "comboboxlist"|| cm.edittype == "comboboxtree"){  
								                                $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, {value:v}, true);
						                            }else {
													    $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, false, true);
													}
													$(cc).addClass("dirty-cell");
							                        if(!$t.p.editCellFlag){ $(cc).css({background: "none"}); }
													$($t.rows[iRow]).addClass("edited");
													if ($.isFunction($t.p.afterSaveCell)) {
														$t.p.afterSaveCell.call($t, $t.rows[iRow].id,nm, v, iRow,iCol);
													}
													$t.p.savedRow.splice(0,1);
												} else {
													$.jgrid.info_dialog($.jgrid.errors.errcap,ret[1],$.jgrid.edit.bClose);
													$($t).jqGrid("restoreCell",iRow,iCol);
												}
											} else {
												$(cc).empty();
												//特殊编辑类型把value值保存在td属性里
												if(cm.edittype == "select" || cm.edittype == "radio"|| cm.edittype == "checkbox" || 
														   cm.edittype == "comboboxlist"|| cm.edittype == "comboboxtree"){  
							                                $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, {value:v}, true);
					                            }else {
												    $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, false, true);
												}
												$(cc).addClass("dirty-cell");
												if(!$t.p.editCellFlag){ $(cc).css({background: "none"}); }
												$($t.rows[iRow]).addClass("edited");
												if ($.isFunction($t.p.afterSaveCell)) {
													$t.p.afterSaveCell.call($t, $t.rows[iRow].id,nm, v, iRow,iCol);
												}
												$t.p.savedRow.splice(0,1);
											}
										}
									},
									error:function(res,stat) {
										$("#lui_"+$t.p.id).hide();
										$t.grid.hDiv.loading = false;
										if ($.isFunction($t.p.errorCell)) {
											$t.p.errorCell.call($t, res,stat);
											$($t).jqGrid("restoreCell",iRow,iCol);
										} else {
											$.jgrid.info_dialog($.jgrid.errors.errcap,res.status+" : "+res.statusText+"<br/>"+stat,$.jgrid.edit.bClose);
											$($t).jqGrid("restoreCell",iRow,iCol);
										}
									}
								}, $.jgrid.ajaxOptions, $t.p.ajaxCellOptions || {}));
							} else {
								try {
									$.jgrid.info_dialog($.jgrid.errors.errcap,$.jgrid.errors.nourl,$.jgrid.edit.bClose);
									$($t).jqGrid("restoreCell",iRow,iCol);
								} catch (e) {}
							}
						}
						if ($t.p.cellsubmit == 'clientArray') {
							$(cc).empty();
							if(cm.edittype == "select" || cm.edittype == "radio"|| cm.edittype == "checkbox" || 
							   cm.edittype == "comboboxlist"|| cm.edittype == "comboboxtree"){  //特殊编辑类型把value值保存在td属性里
                                $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, {value:v}, true);
                            }else {
							    $($t).jqGrid("setCell",$t.rows[iRow].id,iCol, v2, false, false, true);
							}
							$(cc).addClass("dirty-cell");
							if(!$t.p.editCellFlag){ $(cc).css({background: "none"}); }
							$($t.rows[iRow]).addClass("edited");
							if ($.isFunction($t.p.afterSaveCell)) {
								$t.p.afterSaveCell.call($t, $t.rows[iRow].id,nm, v, iRow,iCol);
							}
							$t.p.savedRow.splice(0,1);
						}
					} else {
						try {
							//提示信息统一通过tooltip组件弹出
							$(cc).attr({title:cv[1]});
		                    $(cc).tooltip({container: 'body',placement:$(cc).next("td").length > 0 ? 'right' :'left'});
		                    $(cc).tooltip('show');
		                    window.setTimeout(function(){$(cc).tooltip('destroy');},$t.p.tooltipTime);
							$($t).jqGrid("restoreCell",iRow,iCol);
						} catch (e) {}
					}
				} else {
					$($t).jqGrid("restoreCell",iRow,iCol);
				}
			}
			if ($.browser.opera) {
				$("#"+$t.p.knv).attr("tabindex","-1").focus();
			} else {
				window.setTimeout(function () { $("#"+$t.p.knv).attr("tabindex","-1").focus();},0);
			}
		  });
	    },
        // subgrid中详细编辑数据处理
        editDetailRow : function(rowid, p){
            p = $.extend({
                width: 300,
                height: 'auto',
                dataheight: 'auto',
                url: null,
                mtype : "post",
                clearAfterAdd :true,
                closeAfterEdit : false,
                reloadAfterSubmit : true,
                onInitializeForm: null,
                beforeInitData: null,
                beforeSubmit: null,
                afterSubmit: null,
                onclickSubmit: null,
                afterComplete: null,
                onclickPgButtons : null,
                afterclickPgButtons: null,
                editData : {},
                recreateForm : false,
                jqModal : true,
                closeOnEscape : false,
                addedrow : "first",
                topinfo : '',
                bottominfo: '',
                saveicon : [],
                closeicon : [],
                savekey: [false,13],
                navkeys: [false,38,40],
                checkOnSubmit : false,
                checkOnUpdate : false,
                submitType: "remote",
                _savedData : {},
                processing : false,
                onClose : null,
                ajaxEditOptions : {},
                serializeEditData : null,
                viewPagerButtons : true
            }, $.jgrid.edit, p || {});
            var rp_ge = p;
            return this.each(function(){
                var $t = this;
                if (!$t.grid || !rowid) { return; }
                //var gID = $t.p.id,
                var gID = rp_ge.subgrid_id,
                frmgr = "FrmGrid_"+gID,frmtb = "TblGrid_"+gID,
                IDs = {themodal:'editmod'+gID,modalhead:'edithd'+rp_ge.subgrid_id,modalcontent:'editcnt'+rp_ge.subgrid_id, scrollelm : frmgr},
                onBeforeInit = $.isFunction(rp_ge.beforeInitData) ? rp_ge.beforeInitData : false,
                onInitializeForm = $.isFunction(rp_ge.onInitializeForm) ? rp_ge.onInitializeForm : false,
                copydata = null,
                showFrm = true,
                maxCols = 1, maxRows=0,postdata, extpost, newData, diff;
                if (rowid === "new") {
                    rowid = "_empty";
                    p.caption=rp_ge.addCaption;
                } else {
                    p.caption=rp_ge.editCaption;
                }
                //获取form中的数据存放到postdata，如为下拉框存放到extpost
                function getFormData(){
                    $(".FormElement", "#"+frmtb).each(function(i) {
                        var celm = $(".customelement", this);
                        if (celm.length) {
                            var  elem = celm[0], nm = $(elem).attr('name');
                            $.each($t.p.colModel, function(i,n){
                                if(this.name === nm && this.editoptions && $.isFunction(this.editoptions.custom_value)) {
                                    try {
                                        postdata[nm] = this.editoptions.custom_value($("#"+$.jgrid.jqID(nm),"#"+frmtb),'get');
                                        if (postdata[nm] === undefined) { throw "e1"; }
                                    } catch (e) {
                                        if (e==="e1") { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.novalue,jQuery.jgrid.edit.bClose);}
                                        else { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose); }
                                    }
                                    return true;
                                }
                            });
                        } else {
                        	var that = this,editType =  !!$(this).get(0).type ? $(this).get(0).type : $("input",this).get(0).type;
                            switch (editType) {
                                case "checkbox":
                                    if($("input",that).is(":checked")) {
                                        var str = "",nam = "",checkElement = " input[type=checkbox]:checked";
                                        $(checkElement ,that).each(function(i){
                                            str+= (((i==0)?"":",") + $(this).val());
                                            nam+= (((i==0)?"":",") + $(this).next().text());
                                        }) ;
                                        postdata[$(that).attr("name")] = str;
                                    }else {
                                        postdata[$(that).attr("name")] = "";
                                    }
                                    break;
                                case "radio":
                                    if($("input",that).is(":checked")) {
                                        var str = "",nam = "",checkElement = " input[type=radio]:checked";
                                        $(checkElement ,that).each(function(i){
                                            str+= (((i==0)?"":",") + $(this).val());
                                            nam+= (((i==0)?"":",") + $(this).next().text());
                                        }) ;
                                        postdata[$(that).attr("name")] = str;
                                    }else {
                                        postdata[$(that).attr("name")] = "";
                                    }
                                    break;
	                            case "select-one":
	                                postdata[this.name]= $("option:selected",this).val();
	                                extpost[this.name]= $("option:selected",this).text();
	                            break;
	                            case "select-multiple":
	                                postdata[this.name]= $(this).val();
	                                if(postdata[this.name]) { postdata[this.name] = postdata[this.name].join(","); }
	                                else { postdata[this.name] =""; }
	                                var selectedText = [];
	                                $("option:selected",this).each(
	                                    function(i,selected){
	                                        selectedText[i] = $(selected).text();
	                                    }
	                                );
	                                extpost[this.name]= selectedText.join(",");
	                            break;
	                            case "password":
	                            case "text":
	                            case "textarea":
	                            case "button":
	                                postdata[this.name] = $(this).val();
	
	                            break;
                            }
	                        if($t.p.autoencode) { postdata[this.name] = $.jgrid.htmlEncode(postdata[this.name]); }
	                    }
                    });
                    return true;
                }
                //创建form数据
                function createData(rowid,obj,tb,maxcols){
                    var nm, hc,trdata, cnt=0,tmp, dc,elc, retpos=[], ind=false,
                    tdtmpl = "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>", tmpl="", i; //*2
                    for (i =1; i<=maxcols;i++) {
                        tmpl += tdtmpl;
                    }
                    if(rowid != '_empty') {
                        ind = $(obj).jqGrid("getInd",rowid);
                    }
                    $(obj.p.colModel).each( function(i) {
                        nm = this.name;
                        // hidden fields are included in the form
                        if(this.editrules && this.editrules.edithidden === true) {
                            hc = false;
                        } else {
                            hc = this.hidden === true ? true : false;
                        }
                        dc = hc ? "style='display:none'" : "";
                        if ( nm !== 'cb' && nm !== 'subgrid' && this.editable===true && nm !== 'rn') {
                            if(ind === false) {
                                tmp = "";
                            } else {
                                if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                    tmp = $("td:eq("+i+")",obj.rows[ind]).text();
                                } else {
                                    try {
                                        tmp =  $.unformat($("td:eq("+i+")",obj.rows[ind]),{rowId:rowid, colModel:this},i);
                                    } catch (_) {
                                        tmp = $("td:eq("+i+")",obj.rows[ind]).text();
                                    }
                                }
                            }
                            var opt = $.extend({}, this.editoptions || {} ,{id:nm,name:nm}),
                            frmopt = $.extend({}, {elmprefix:'',elmsuffix:'',rowabove:false,rowcontent:''}, this.formoptions || {}),
                            rp = parseInt(frmopt.rowpos,10) || cnt+1,
                            cp = parseInt((parseInt(frmopt.colpos,10) || 1)*2,10);
                            if(rowid == "_empty" && opt.defaultValue ) {
                                tmp = $.isFunction(opt.defaultValue) ? opt.defaultValue() : opt.defaultValue;
                            }
                            if(!this.edittype) { this.edittype = "text"; }
                            if($t.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp); }
                            elc = $.jgrid.createEl(this.edittype,opt,tmp,false,$.extend({},$.jgrid.ajaxOptions,obj.p.ajaxSelectOptions || {}));
                           // if(tmp === "" && this.edittype == "checkbox") {tmp = $(elc).attr("offval");}
                          //  if(tmp === "" && this.edittype == "select") {tmp = $("option:eq(0)",elc).text();}
                            if(rp_ge.checkOnSubmit || rp_ge.checkOnUpdate || rp_ge.submitType ==  "clientArray") { rp_ge._savedData[nm] = tmp; }
                            $(elc).addClass("FormElement");
                            if(this.edittype == 'text' || this.edittype == 'textarea'|| this.edittype == 'datepicker'
                                || this.edittype == 'comboboxlist' || this.edittype == 'comboboxtree') {
                               // $(elc).addClass("ui-widget-content");
                            }
                            trdata = $(tb).find("tr[rowpos="+rp+"]");
                            if(frmopt.rowabove) {
                                var newdata = $("<tr><td class='contentinfo' colspan='"+(maxcols*2)+"'>"+frmopt.rowcontent+"</td></tr>");
                                $(tb).append(newdata);
                                newdata[0].rp = rp;
                            }
                            if ( trdata.length===0 ) {
                                trdata = $("<tr "+dc+" rowpos='"+rp+"'></tr>").addClass("FormData").attr("id","tr_"+nm);
                                $(trdata).append(tmpl);
                                $(tb).append(trdata);
                                trdata[0].rp = rp;
                            }
                            //单元格后面添加“：”
                            $("td:eq("+(cp-2)+")",trdata[0]).html( (typeof frmopt.label === 'undefined' ? obj.p.colNames[i]: frmopt.label)+" :");
                            $("td:eq("+(cp-1)+")",trdata[0]).append(frmopt.elmprefix).append(elc).append(frmopt.elmsuffix);
                            //comboboxlist、comboboxtree组件需要在elc统计节点生成span标签，需要在elc完成append操作再初始化
                            if(this.edittype == "comboboxlist"){
                                var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                                new biz.comboboxlist(setting);
                            }else if(this.edittype == "comboboxtree"){
                                var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                                new biz.comboboxtree(setting);
                            }
                            retpos[cnt] = i;
                            cnt++;
                        }
                    });
                    if( cnt > 0) {
                        var idrow = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='"+ (maxcols*2-1)+"' class='DataTD'><input class='FormElement' id='id_g' type='text' name='"+obj.p.id+"_id' value='"+rowid+"'/></td></tr>");
                        idrow[0].rp = cnt+999;
                        $(tb).append(idrow);
                        if(rp_ge.checkOnSubmit || rp_ge.checkOnUpdate ) { rp_ge._savedData[obj.p.id+"_id"] = rowid; }
                    }
                    return retpos;
                }
                function fillData(rowid,obj,fmid){
                    var nm,cnt=0,tmp, fld,opt,vl,vlc;
                    if(rp_ge.checkOnSubmit || rp_ge.checkOnUpdate) {rp_ge._savedData = {};rp_ge._savedData[obj.p.id+"_id"]=rowid;}
                    var cm = obj.p.colModel;
                    if(rowid == '_empty') {
                        $(cm).each(function(i){
                            nm = this.name;
                            opt = $.extend({}, this.editoptions || {} );
                            fld = $("#"+$.jgrid.jqID(nm),"#"+fmid);
                            if(fld && fld[0] !== null) {
                                vl = "";
                                if(opt.defaultValue ) {
                                    vl = $.isFunction(opt.defaultValue) ? opt.defaultValue() : opt.defaultValue;
                                    if(fld[0].type=='checkbox') {
                                        vlc = vl.toLowerCase();
                                        if(vlc.search(/(false|0|no|off|undefined)/i)<0 && vlc!=="") {
                                            fld[0].checked = true;
                                            fld[0].defaultChecked = true;
                                            fld[0].value = vl;
                                        } else {
                                            fld.attr({checked:"",defaultChecked:""});
                                        }
                                    } else {fld.val(vl); }
                                } else {
                                    if( fld[0].type=='checkbox' ) {
                                        fld[0].checked = false;
                                        fld[0].defaultChecked = false;
                                        vl = $(fld).attr("offval");
                                    } else if (fld[0].type && fld[0].type.substr(0,6)=='select') {
                                        fld[0].selectedIndex = 0;
                                    } else {
                                        fld.val(vl);
                                    }
                                }
                                if(rp_ge.checkOnSubmit===true || rp_ge.checkOnUpdate) { rp_ge._savedData[nm] = vl; }
                            }
                        });
                        $("#id_g","#"+fmid).val(rowid);
                        return;
                    }
                    var tre = $(obj).jqGrid("getInd",rowid,true);
                    if(!tre) { return; }
                    $('td',tre).each( function(i) {
                        nm = cm[i].name;
                        // hidden fields are included in the form
                        if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn' && cm[i].editable===true) {
                            if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                tmp = $(this).text();
                            } else {
                                try {
                                    tmp =  $.unformat($(this),{rowId:rowid, colModel:cm[i]},i);
                                } catch (_) {
                                    tmp = $(this).text();
                                }
                            }
                            if($t.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp); }
                            if(rp_ge.checkOnSubmit===true || rp_ge.checkOnUpdate) { rp_ge._savedData[nm] = tmp; }
                            nm = $.jgrid.jqID(nm);
                            switch (cm[i].edittype) {
                                case "password":
                                case "text":
                                case "button" :
                                case "image":
                                case "comboboxlist":
                                case "comboboxtree":
                                case "datepicker" :
                                case "autocomplete" :
                                    $("#"+nm,"#"+fmid).val(tmp);
                                    break;
                                case "textarea":
                                    if(tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
                                    $("#"+nm,"#"+fmid).val(tmp);
                                    break;
                                case "select":
                                    var opv = tmp.split(",");
                                    opv = $.map(opv,function(n){return $.trim(n);});
                                    $("#"+nm+" option","#"+fmid).each(function(j){
                                        if (!cm[i].editoptions.multiple && (opv[0] == $.trim($(this).text()) || opv[0] == $.trim($(this).val())) ){
                                            this.selected= true;
                                        } else if (cm[i].editoptions.multiple){
                                            if(  $.inArray($.trim($(this).text()), opv ) > -1 || $.inArray($.trim($(this).val()), opv ) > -1  ){
                                                this.selected = true;
                                            }else{
                                                this.selected = false;
                                            }
                                        } else {
                                            this.selected = false;
                                        }
                                    });
                                    break;
                                case "checkbox":
                                    tmp = tmp+"";
                                    if(cm[i].editoptions && cm[i].editoptions.value) {
                                        var cb = cm[i].editoptions.value.split(":");
                                        if(cb[0] == tmp) {
                                            $("#"+nm,"#"+fmid).attr("checked",true);
                                            $("#"+nm,"#"+fmid).attr("defaultChecked",true); //ie
                                        } else {
                                            $("#"+nm,"#"+fmid).attr("checked",false);
                                            $("#"+nm,"#"+fmid).attr("defaultChecked",""); //ie
                                        }
                                    } else {
                                        tmp = tmp.toLowerCase();
                                        if(tmp.search(/(false|0|no|off|undefined)/i)<0 && tmp!=="") {
                                            $("#"+nm,"#"+fmid).attr("checked",true);
                                            $("#"+nm,"#"+fmid).attr("defaultChecked",true); //ie
                                        } else {
                                            $("#"+nm,"#"+fmid).attr("checked",false);
                                            $("#"+nm,"#"+fmid).attr("defaultChecked",""); //ie
                                        }
                                    }
                                    break;
                                case 'custom' :
                                    try {
                                        if(cm[i].editoptions && $.isFunction(cm[i].editoptions.custom_value)) {
                                            cm[i].editoptions.custom_value($("#"+nm,"#"+fmid),'set',tmp);
                                        } else { throw "e1"; }
                                    } catch (e) {
                                        if (e=="e1") { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.nodefined,jQuery.jgrid.edit.bClose);}
                                        else { $.jgrid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose); }
                                    }
                                    break;
                            }
                            cnt++;
                        }
                    });
                    if(cnt>0) { $("#id_g","#"+frmtb).val(rowid); }
                }
                //提交数据处理
                function postIt() {
                    var copydata, ret=[true,"",""], onCS = {}, opers = $t.p.prmNames, idname, oper, key, selr;
                    if($.isFunction(rp_ge.beforeCheckValues)) {
                        var retvals = rp_ge.beforeCheckValues(postdata,$("#"+frmgr),postdata[$t.p.id+"_id"] == "_empty" ? opers.addoper : opers.editoper);
                        if(retvals && typeof(retvals) === 'object') { postdata = retvals; }
                    }
                    for( key in postdata ){
                        if(postdata.hasOwnProperty(key)) {
                            ret = $.jgrid.checkValues(postdata[key],key,$t);
                            if(ret[0] === false) { break; }
                        }
                    }
                    if(ret[0]) {
                        if( $.isFunction( rp_ge.onclickSubmit)) { onCS = rp_ge.onclickSubmit(rp_ge,postdata) || {}; }
                        if( $.isFunction(rp_ge.beforeSubmit))  { ret = rp_ge.beforeSubmit(postdata,$("#"+frmgr)); }
                    }

                    if(ret[0] && !rp_ge.processing) {
                        rp_ge.processing = true;
                        $("#"+sb, "#"+frmtb+"_2").addClass('ui-state-active');
                        oper = opers.oper;
                        idname = opers.id;
                        // we add to pos data array the action - the name is oper
                        postdata[oper] = ($.trim(postdata[$t.p.id+"_id"]) == "_empty") ? opers.addoper : opers.editoper;
                        //如果是保持本地数据不给idname赋值
                        if(rp_ge.submitType !== "clientArray" ){
                            if(postdata[oper] != opers.addoper ) {
                                postdata[idname] = postdata[$t.p.id+"_id"];
                            } else {
                                // check to see if we have allredy this field in the form and if yes lieve it
                                if( postdata[idname] === undefined ) { postdata[idname] = postdata[$t.p.id+"_id"]; }
                            }
                        }
                        delete postdata[$t.p.id+"_id"];
                        postdata = $.extend(postdata,rp_ge.editData,onCS);
                        if($t.p.treeGrid === true)  {
                            if(postdata[oper] == opers.addoper) {
                            selr = $($t).jqGrid("getGridParam", 'selrow');
                                var tr_par_id = $t.p.treeGridModel == 'adjacency' ? $t.p.treeReader.parent_id_field : 'parent_id';
                                postdata[tr_par_id] = selr;
                            }
                            for(i in $t.p.treeReader){
                                var itm = $t.p.treeReader[i];
                                if(postdata.hasOwnProperty(itm)) {
                                    if(postdata[oper] == opers.addoper && i === 'parent_id_field') { continue; }
                                    delete postdata[itm];
                        }
                        }
                        }
                        //postdata = $.extend(postdata,extpost);

                       //增加保持数据到本地方式
                       if(rp_ge.submitType == "clientArray" ){
                           var isChange = false;
                           /*
                           ni = $t.p.rownumbers===true ? 1 :0,
				           gi = $t.p.multiselect ===true ? 1 :0,
				           si = $t.p.subGrid===true ? 1 :0;
                           //idname为主键name
                           if($t.p.keyIndex !== false) {
							   idname = $t.p.colModel[$t.p.keyIndex+gi+si+ni].name;
						   } */
                           for(var i in rp_ge._savedData){
                               //如果数据有改变,给指定单元格设置样式
                               if(rp_ge._savedData[i] !== postdata[i]){
                                   var editCellElem = $("#"+$t.p.id+" tr[id='"+rowid +"'] td[aria-describedby='"+$t.p.id+"_"+i +"']").addClass("dirty-cell");
                                   if(!$t.p.editCellFlag){ editCellElem.css({background: "none"}); }
                                   isChange = true;
                               }
                           }
                           if(isChange){
                               $($t).jqGrid("setRowData",rowid,postdata);
                               // $(cc).addClass("dirty-cell");
                               //设置为已编辑状态
						       $($t.rows[rowid]).addClass("edited");
                           }
                           //折叠详细编辑内容行
                           $($t).jqGrid("collapseSubGridRow",rowid);

                       }else{
                            var ajaxUrl = rp_ge.url ? rp_ge.url : $($t).jqGrid('getGridParam','editurl')
                            var ajaxOptions = $.extend({
                            url: ajaxUrl,
                            type: rp_ge.mtype,
                            data: $.isFunction(rp_ge.serializeEditData) ? rp_ge.serializeEditData(postdata) :  postdata,
                            complete:function(data,Status){
                                if(Status != "success") {
                                    ret[0] = false;
                                    if ($.isFunction(rp_ge.errorTextFormat)) {
                                        ret[1] = rp_ge.errorTextFormat(data);
                                    } else {
                                        ret[1] ="\""+ajaxUrl+"\""+ I18N.error+". "+ Status + " Status: '" + data.statusText + "'. Error code: " + data.status;
                                    }
                                } else {
                                    // data is posted successful
                                    // execute aftersubmit with the returned data from server
                                    if( $.isFunction(rp_ge.afterSubmit) ) {
                                        ret = rp_ge.afterSubmit(data,postdata);
                                    }
                                }
                                if(ret[0] === false) {
                                    $("#FormError>td","#"+frmtb).html(ret[1]);
                                    $("#FormError","#"+frmtb).show();
                                } else {
                                    // remove some values if formattaer select or checkbox
                                    $.each($t.p.colModel, function(i,n){
                                        if(extpost[this.name] && this.formatter && this.formatter=='select') {
                                            try {delete extpost[this.name];} catch (e) {}
                                        }
                                    });
                                    postdata = $.extend(postdata,extpost);
                                    if($t.p.autoencode) {
                                        $.each(postdata,function(n,v){
                                            postdata[n] = $.jgrid.htmlDecode(v);
                                        });
                                    }
                                    rp_ge.reloadAfterSubmit = rp_ge.reloadAfterSubmit && $t.p.datatype != "local";
                                    // the action is add
                                    if(postdata[oper] == opers.addoper ) {
                                        //id processing
                                        // user not set the id ret[2]
                                        if(!ret[2]) { ret[2] = $.jgrid.randId(); }
                                        postdata[idname] = ret[2];
                                        if(rp_ge.closeAfterAdd) {
                                            if(rp_ge.reloadAfterSubmit) { $($t).trigger("reloadGrid"); }
                                            else {
                                                if($t.p.treeGrid === true){
                                                    $($t).jqGrid("addChildNode",ret[2],selr,postdata );
                                                } else {
                                                $($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
                                                $($t).jqGrid("setSelection",ret[2]);
                                            }
                                            }

                                        } else if (rp_ge.clearAfterAdd) {
                                            if(rp_ge.reloadAfterSubmit) { $($t).trigger("reloadGrid"); }
                                            else {
                                                if($t.p.treeGrid === true){
                                                    $($t).jqGrid("addChildNode",ret[2],selr,postdata );
                                                } else {
                                                    $($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
                                                }
                                            }
                                            fillData("_empty",$t,frmgr);
                                        } else {
                                            if(rp_ge.reloadAfterSubmit) { $($t).trigger("reloadGrid"); }
                                            else {
                                                if($t.p.treeGrid === true){
                                                    $($t).jqGrid("addChildNode",ret[2],selr,postdata );
                                                } else {
                                                    $($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
                                        }
                                            }
                                        }
                                    } else {
                                        // the action is update
                                        if(rp_ge.reloadAfterSubmit) {
                                            $($t).trigger("reloadGrid");
                                            if( !rp_ge.closeAfterEdit ) { setTimeout(function(){$($t).jqGrid("setSelection",postdata[idname]);},1000); }
                                        } else {
                                            if($t.p.treeGrid === true) {
                                                $($t).jqGrid("setTreeRow",postdata[idname],postdata);
                                            } else {
                                                $($t).jqGrid("setRowData",postdata[idname],postdata);
                                            }
                                        }

                                    }
                                    if($.isFunction(rp_ge.afterComplete)) {
                                        copydata = data;
                                        setTimeout(function(){rp_ge.afterComplete(copydata,postdata,$("#"+frmgr));copydata=null;},500);
                                    }
                                if(rp_ge.checkOnSubmit || rp_ge.checkOnUpdate) {
                                    $("#"+frmgr).data("disabled",false);
                                    if(rp_ge._savedData[$t.p.id+"_id"] !="_empty"){
                                        for(var key in rp_ge._savedData) {
                                            if(postdata[key]) {
                                                rp_ge._savedData[key] = postdata[key];
                                            }
                                        }
                                    }
                                }
                                   //如果成功提交，折叠详细编辑内容行
                                   $($t).jqGrid("collapseSubGridRow",rowid);
                                }
                                rp_ge.processing=false;
                                $("#"+sb, "#"+frmtb+"_2").removeClass('ui-state-active');
                                try{$(':input:visible',"#"+frmgr)[0].focus();} catch (e){}

                            }
                        }, $.jgrid.ajaxOptions, rp_ge.ajaxEditOptions );

                            if (!ajaxOptions.url && !rp_ge.useDataProxy) {
                            if ($.isFunction($t.p.dataProxy)) {
                                rp_ge.useDataProxy = true;
                            } else {
                                ret[0]=false; ret[1] += " "+$.jgrid.errors.nourl;
                            }
                        }
                            if (ret[0]) {
                                if (rp_ge.useDataProxy) { $t.p.dataProxy.call($t, ajaxOptions, "set_"+$t.p.id); }
                                else { $.ajax(ajaxOptions); }
                            }
                       }
                    }
                    if(ret[0] === false) {
                    	 var checkCellElm = $("#"+key);
                         checkCellElm.attr({title:ret[1]});
                         checkCellElm.tooltip({container: 'body',placement: 'right' });
                         checkCellElm.tooltip('show');
                         window.setTimeout(function(){checkCellElm.tooltip('destroy');},$t.p.tooltipTime);
                    }
                }
                function compareData(nObj, oObj ) {
                    var ret = false,key;
                    for (key in nObj) {
                        if(nObj[key] != oObj[key]) {
                            ret = true;
                            break;
                        }
                    }
                    return ret;
                }
                function setNulls() {
                    $.each($t.p.colModel, function(i,n){
                        if(n.editoptions && n.editoptions.NullIfEmpty === true) {
                            if(postdata.hasOwnProperty(n.name) && postdata[n.name] == "") {
                                postdata[n.name] = 'null';
                            }
                        }
                    });
                }
                function checkUpdates () {
                    var stat = true;
                    $("#FormError","#"+frmtb).hide();
                    if(rp_ge.checkOnUpdate) {
                        postdata = {}; extpost={};
                        getFormData();
                        newData = $.extend({},postdata,extpost);
                        diff = compareData(newData,rp_ge._savedData);
                        if(diff) {
                            $("#"+frmgr).data("disabled",true);
                            $(".confirm","#"+IDs.themodal).show();
                            stat = false;
                        } else {
                            setNulls();
                        }
                    }
                    return stat;
                }
                function restoreInline()
                {
                    if (rowid !== "_empty" && typeof($t.p.savedRow) !== "undefined" && $t.p.savedRow.length > 0 && $.isFunction($.fn.jqGrid.restoreRow)) {
                        for (var i=0;i<$t.p.savedRow.length;i++) {
                            if ($t.p.savedRow[i].id == rowid) {
                                $($t).jqGrid('restoreRow',rowid);
                                break;
                            }
                        }
                    }
                }
                function updateNav(cr,totr){
                    if (cr===0) { $("#pData","#"+frmtb+"_2").addClass('ui-state-disabled'); } else { $("#pData","#"+frmtb+"_2").removeClass('ui-state-disabled'); }
                    if (cr==totr) { $("#nData","#"+frmtb+"_2").addClass('ui-state-disabled'); } else { $("#nData","#"+frmtb+"_2").removeClass('ui-state-disabled'); }
                }
                function getCurrPos() {
                    var rowsInGrid = $($t).jqGrid("getDataIDs"),
                    selrow = $("#id_g","#"+frmtb).val(),
                    pos = $.inArray(selrow,rowsInGrid);
                    return [pos,rowsInGrid];
                }

               //处理开始
               var dh = isNaN(p.dataheight) ? p.dataheight : p.dataheight+"px",
               frm = $("<form name='FormPost' id='"+frmgr+"' class='FormGrid' onSubmit='return false;' style='width:100%;overflow:auto;position:relative;height:"+dh+";'></form>").data("disabled",false),
               tbl = $("<table id='"+frmtb+"' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>");
               if(onBeforeInit) {
                    showFrm = onBeforeInit($("#"+frmgr));
                    if(typeof(showFrm) == "undefined") {
                       showFrm = true;
                    }
               }
               if(showFrm === false) { return; }
               restoreInline();
               $($t.p.colModel).each( function(i) {
                   var fmto = this.formoptions;
                   maxCols = Math.max(maxCols, fmto ? fmto.colpos || 0 : 0 );
                   maxRows = Math.max(maxRows, fmto ? fmto.rowpos || 0 : 0 );
               });
               $(frm).append(tbl);
               var flr = $("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='"+(maxCols*2)+"'></td></tr>");
               flr[0].rp = 0;
               $(tbl).append(flr);
               //topinfo
               flr = $("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='"+(maxCols*2)+"'>"+rp_ge.topinfo+"</td></tr>");
               flr[0].rp = 0;
               $(tbl).append(flr);
                    // set the id.
                    // use carefull only to change here colproperties.
                    // create data
               var rtlb = $t.p.direction == "rtl" ? true :false,
               bp = rtlb ? "nData" : "pData",
               bn = rtlb ? "pData" : "nData",
               sb = "sData_" + rp_ge.subgrid_id ,
               cd = "cData_" + rp_ge.subgrid_id ;
               createData(rowid,$t,tbl,maxCols);
                    // buttons at footer
               var bP = "<a href='javascript:void(0)' id='"+bp+"' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></div>",
               bN = "<a href='javascript:void(0)' id='"+bn+"' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></div>",
               bS  ="<a href='javascript:void(0)' id='" +sb +"' class='ui-state-default ui-corner-all'></a>",
				bC  ="<a href='javascript:void(0)' id='" +cd+"' class='ui-state-default ui-corner-all'></a>";
               //bS  ="<a href='javascript:void(0)' id='" +sb +"' class='fm-button '>"+p.save+"</a>",
              //bC  ="<a href='javascript:void(0)' id='" +cd+"' class='fm-button '>"+p.bCancel+"</a>";
               var bt = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='"+frmtb+"_2'><tbody><tr id='Act_Buttons'><td class='EditButton'>"+bS+bC+"</td></tr>";
               bt += "<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>"+rp_ge.bottominfo+"</td></tr>";
               bt += "</tbody></table>";
               if(maxRows >  0) {
                   var sd=[];
                   $.each($(tbl)[0].rows,function(i,r){
                          sd[i] = r;
                   });
                   sd.sort(function(a,b){
                       if(a.rp > b.rp) {return 1;}
                       if(a.rp < b.rp) {return -1;}
                       return 0;
                   });
                   $.each(sd, function(index, row) {
                       $('tbody',tbl).append(row);
                   });
               }
               p.gbox = "#gbox_"+gID;
               var cle = false;
               if(p.closeOnEscape===true){
                    p.closeOnEscape = false;
                    cle = true;
               }
               var tms = $("<span></span>").append(frm).append(bt);
                //如果已经创建相关元素，不做处理
                //if($("#"+rp_ge.subgrid_id+" #"+frmgr)==null){
                    $.jgrid.createSubModal(IDs,tms,p,"#gview_"+$t.p.id,$("#gbox_"+$t.p.id)[0],"#"+rp_ge.subgrid_id);
               //}
               if(rtlb) {
                    $("#pData, #nData","#"+frmtb+"_2").css("float","right");
                    $(".EditButton","#"+frmtb+"_2").css("text-align","left");
               }
               if(rp_ge.topinfo) { $(".tinfo","#"+frmtb+"_2").show(); }
               if(rp_ge.bottominfo) { $(".binfo","#"+frmtb+"_2").show(); }
               tms = null; bt=null;
               p.saveicon = $.extend([true,"left","ui-icon-disk"],p.saveicon);
               p.closeicon = $.extend([true,"left","ui-icon-close"],p.closeicon);
               // beforeinitdata after creation of the form
               if(p.saveicon[0]===true) {
                   $("#"+sb,"#"+frmtb+"_2").button({icons: {primary: p.saveicon[2]},label:p.bSubmit});
               }
               if(p.closeicon[0]===true) {
                    $("#"+cd,"#"+frmtb+"_2").button({icons: {primary:p.closeicon[2]},label:p.bCancel});
               }
               if(rp_ge.checkOnSubmit || rp_ge.checkOnUpdate) {
                    bS  ="<a href='javascript:void(0)' id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bYes+"</a>";
                    bN  ="<a href='javascript:void(0)' id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bNo+"</a>";
                    bC  ="<a href='javascript:void(0)' id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bExit+"</a>";
                    var ii, zI = p.zIndex  || 999; zI ++;
                    if ($.browser.msie && $.browser.version ==6) {
                        ii = '<iframe style="display:block;position:absolute;z-index:-1;filter:Alpha(Opacity=\'0\');" src="javascript:false;"></iframe>';
                    } else { ii="";}
                    $("<div class='ui-widget-overlay jqgrid-overlay confirm' style='z-index:"+zI+";display:none;'>&#160;"+ii+"</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:"+(zI+1)+"'>"+p.saveData+"<br/><br/>"+bS+bN+bC+"</div>").insertAfter("#"+frmgr);

               }
               // here initform - only once
               if(onInitializeForm) { onInitializeForm($("#"+frmgr)); }
               if(rowid=="_empty" || !rp_ge.viewPagerButtons) { $("#pData,#nData","#"+frmtb+"_2").hide(); } else { $("#pData,#nData","#"+frmtb+"_2").show(); }
               $(".fm-button","#"+IDs.modalcontent).hover(
                   function(){$(this).addClass('ui-state-hover');},
                   function(){$(this).removeClass('ui-state-hover');}
               );
               $("#"+sb, "#"+frmtb+"_2").click(function(e){
                    postdata = {}; extpost={};
                    $("#FormError","#"+frmtb).hide();
                    // all depend on ret array
                    //ret[0] - succes
                    //ret[1] - msg if not succes
                    //ret[2] - the id  that will be set if reload after submit false
                    getFormData();
                    setNulls();
                    if(postdata[$t.p.id+"_id"] == "_empty")	{ postIt(); }
                    //else if(p.checkOnSubmit===true || rp_ge.submitType=="clientArray") {
                    else if(p.checkOnSubmit===true) {
                        newData = $.extend({},postdata,extpost);
                        diff = compareData(newData,rp_ge._savedData);
                        if(diff) {
                            $("#"+frmgr).data("disabled",true);
                            $(".confirm","#"+IDs.themodal).show();
                        } else {
                            postIt();
                        }
                    } else {
                        postIt();
                    }
                    return false;
               });
               $("#"+cd, "#"+frmtb+"_2").click(function(e){
                    if(!checkUpdates()) { return false; }
                    //折叠详细编辑内容行
                    $($t).jqGrid("collapseSubGridRow",rowid);
                   // $.jgrid.hideModal("#"+IDs.themodal,{gb:"#gbox_"+gID,jqm:p.jqModal,onClose: rp_ge.onClose});
                    return false;
               });
               $("#nData", "#"+frmtb+"_2").click(function(e){
                    if(!checkUpdates()) { return false; }
                    $("#FormError","#"+frmtb).hide();
                    var npos = getCurrPos();
                    npos[0] = parseInt(npos[0],10);
                    if(npos[0] != -1 && npos[1][npos[0]+1]) {
                        if($.isFunction(p.onclickPgButtons)) {
                            p.onclickPgButtons('next',$("#"+frmgr),npos[1][npos[0]]);
                        }
                        fillData(npos[1][npos[0]+1],$t,frmgr);
                        $($t).jqGrid("setSelection",npos[1][npos[0]+1]);
                        if($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons('next',$("#"+frmgr),npos[1][npos[0]+1]);
                        }
                        updateNav(npos[0]+1,npos[1].length-1);
                    }
                    return false;
               });
               $("#pData", "#"+frmtb+"_2").click(function(e){
                   if(!checkUpdates()) { return false; }
                   $("#FormError","#"+frmtb).hide();
                   var ppos = getCurrPos();
                   if(ppos[0] != -1 && ppos[1][ppos[0]-1]) {
                        if($.isFunction(p.onclickPgButtons)) {
                            p.onclickPgButtons('prev',$("#"+frmgr),ppos[1][ppos[0]]);
                        }
                        fillData(ppos[1][ppos[0]-1],$t,frmgr);
                        $($t).jqGrid("setSelection",ppos[1][ppos[0]-1]);
                        if($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons('prev',$("#"+frmgr),ppos[1][ppos[0]-1]);
                        }
                        updateNav(ppos[0]-1,ppos[1].length-1);
                   }
                   return false;
               });
                //处理结束
                var posInit =getCurrPos();
                updateNav(posInit[0],posInit[1].length-1);

            });
	    },
        //添加内嵌到subgrid中详细编辑处理
        editSubRow:function($rowid,opt){
            var nhc=0,pID = this[0].p.id,_id = $rowid,$t=this[0],$opt= $.extend({"subgrid_id":$t.p.id+"_"+$rowid},opt),
                ni = $t.p.rownumbers===true ? 1 :0,
                gi = $t.p.multiselect ===true ? 1 :0,
                atd = (ni+gi) >=1 ? "<td colspan='"+(ni+gi)+"'>&#160;</td>":"";
            $.each($t.p.colModel,function(){
                if(this.hidden === true || this.name === 'rn' || this.name === 'cb') {
				nhc++;
                }
	        });
           //保证不重复添加
           if( $("tr[id='"+$rowid +"'] + tr[class*='ui-subgrid']",$t).length==0){
	            var selRow = $("tr[id='"+$rowid +"']",$t).after( "<tr role='row' class='ui-subgrid'>"+atd
	                        +"<td class='ui-widget-content subgrid-cell'><span class='ui-icon "+$t.p.subGridOptions.openicon+"'></span></td><td colspan='"
	                        +parseInt($t.p.colNames.length-1-nhc,10)+"' class='ui-widget-content subgrid-data'><div id="+pID+"_"
	                        +_id+" class='tablediv'></div></td></tr>");
	            var rowElment = $("tr[id='"+$rowid +"'] td[class*='ui-sgcollapsed']",this);
	            rowElment.removeClass("sgcollapsed").addClass("sgexpanded");
	            $("span[class*='ui-icon']",rowElment).removeClass($t.p.subGridOptions.plusicon).addClass($t.p.subGridOptions.minusicon);
	            $($t).jqGrid("editDetailRow",$rowid,$opt);
           }else if( $("tr[id='"+$rowid +"'] + tr[class*='ui-subgrid'] form",$t).length == 0){
                $($t).jqGrid("editDetailRow",$rowid,$opt);
           }
        },
        //设置行数据
        setRowData : function(rowid, data, cssp) {
            var nm, success=true, title;
            this.each(function(){
                if(!this.grid) {return false;}
                var t = this, vl, ind, cp = typeof cssp,isSetPro = false, lcdata={};
                ind = t.rows.namedItem(rowid);
                if(!ind) { return false; }
                if( data ) {
                    try {
                        $(this.p.colModel).each(function(i){
                            var cm = t.p.colModel[i];
    						nm = this.name;
                            if(cm.edittype == "select" || cm.edittype == "radio"|| cm.edittype == "checkbox" ||
                                cm.edittype == "comboboxlist"|| cm.edittype == "comboboxtree"){isSetPro = true;}
                            if( data[nm] !== undefined) {
                                lcdata[nm] = this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date' ? $.unformat.date.call(t,data[nm],this) : data[nm];
                                vl = t.formatter( rowid, data[nm], i, data, 'edit');
                                title = this.title ? {"title":$.jgrid.stripHtml(vl)} : {};
                                if(isSetPro) $.extend(title,{value:data[nm]});
                                if(t.p.treeGrid===true && nm == t.p.ExpandColumn) {
                                    $("td:eq("+i+") > span:first",ind).html(vl).attr(title);
                                } else {
                                	if(data['cb']){
                                		$("td:eq("+i+")",ind).html(data[nm]);
                                	}else{
                                		$("td:eq("+i+")",ind).html(vl).attr(title);
                                	}
                                }
                            }
                        });
                        if(t.p.datatype == 'local') {
                            var id = $.jgrid.stripPref(t.p.idPrefix, rowid),
                                pos = t.p._index[id];
                            if(t.p.treeGrid) {
                                for(var key in t.p.treeReader ){
                                    if(lcdata.hasOwnProperty(t.p.treeReader[key])) {
                                        delete lcdata[t.p.treeReader[key]];
                                    }
                                }
                            }
                            if(typeof(pos) != 'undefined') {
                                t.p.data[pos] = $.extend(true, t.p.data[pos], lcdata);
                            }
                            lcdata = null;
                        }
                    } catch (e) {
                        success = false;
                    }
                }
                if(success) {
                    if(cp === 'string') {$(ind).addClass(cssp);} else if(cp === 'object') {$(ind).css(cssp);}
                    $(t).triggerHandler("jqGridAfterGridComplete");
                }
            });
            return success;
        },
        //编辑行数据
    	editRow : function(rowid,keys,oneditfunc,successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
            // Compatible mode old versions
            var o={}, args = $.makeArray(arguments).slice(1);

            if( $.type(args[0]) === "object" ) {
                o = args[0];
            } else {
                if (typeof keys !== "undefined") { o.keys = keys; }
                if ($.isFunction(oneditfunc)) { o.oneditfunc = oneditfunc; }
                if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
                if (typeof url !== "undefined") { o.url = url; }
                if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
                if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
                if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
                if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
                // last two not as param, but as object (sorry)
                //if (typeof restoreAfterError !== "undefined") { o.restoreAfterError = restoreAfterError; }
                //if (typeof mtype !== "undefined") { o.mtype = mtype || "POST"; }
            }
            o = $.extend(true, {
                keys : false,
                oneditfunc: null,
                successfunc: null,
                url: null,
                extraparam: {},
                aftersavefunc: null,
                errorfunc: null,
                afterrestorefunc: null,
                restoreAfterError: true,
                mtype: "POST"
            }, $.jgrid.inlineEdit, o );

            // End compatible
            return this.each(function(){
                var $t = this, nm, tmp, editable, cnt=0, focus=null, svr={}, ind,cm;
                if (!$t.grid ) { return; }
                ind = $($t).jqGrid("getInd",rowid,true);
                if( ind === false ) {return;}
                editable = $(ind).attr("editable") || "0";
                if (editable == "0" && !$(ind).hasClass("not-editable-row")) {
                    cm = $t.p.colModel;
                    $('td[role="gridcell"]',ind).each( function(i) {
                        nm = cm[i].name;
                        var treeg = $t.p.treeGrid===true && nm == $t.p.ExpandColumn;
                        if(treeg) { tmp = $("span:first",this).html();}
                        else {
                            try {
                                tmp = $.unformat.call($t,this,{rowId:rowid, colModel:cm[i]},i);
                            } catch (_) {
                                tmp =  ( cm[i].edittype && cm[i].edittype == 'textarea' ) ? $(this).text() : $(this).html();
                            }
                        }
                        if ( nm != 'cb' && nm != 'subgrid' && nm != 'rn') {
                            if($t.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp); }
                            svr[nm]=tmp;
                            if(cm[i].editable===true) {
                                if(focus===null) { focus = i; }
                                if (treeg) { $("span:first",this).html(""); }
                                else { $(this).html(""); }
                                var opt = $.extend({},cm[i].editoptions || {},{id:rowid+"_"+nm,name:nm});
                                if(!cm[i].edittype) { cm[i].edittype = "text"; }
                                if(tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
                                var elc = $.jgrid.createEl.call($t,cm[i].edittype,opt,tmp,true,$.extend({},$.jgrid.ajaxOptions,$t.p.ajaxSelectOptions || {}));
                                $(elc).addClass("editable");
                                if(treeg) { $("span:first",this).append(elc); }
                                else { $(this).append(elc); }
                                //comboboxlist、comboboxtree组件需要在elc统计节点生成span标签，需要在elc完成append操作再初始化
                                if(cm[i].edittype == "comboboxlist"){
                                    var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                                    new biz.comboboxlist(setting);
                                }else if(cm[i].edittype == "comboboxtree"){
                                    var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                                    new biz.comboboxtree(setting);
                                }
                                //Again IE
                                if(cm[i].edittype == "select" && typeof(cm[i].editoptions)!=="undefined" && cm[i].editoptions.multiple===true  && typeof(cm[i].editoptions.dataUrl)==="undefined" && $.browser.msie) {
                                    $(elc).width($(elc).width());
                                }
                                cnt++;
                            }
                        }
                    });
                    if(cnt > 0) {
                        svr.id = rowid; $t.p.savedRow.push(svr);
                        $(ind).attr("editable","1");
                        $("td:eq("+focus+") input",ind).focus();
                        if(o.keys===true) {
                            //添加事件命名空间，便于用户解绑定事件并自定义处理保存行数据
                            $(ind).bind("keydown.editRow",function(e) {
                                if (e.keyCode === 27) {
                                    $($t).jqGrid("restoreRow",rowid, o.afterrestorefunc);
                                    if($t.p._inlinenav) {
                                        try {
                                            $($t).jqGrid('showAddEditButtons');
                                        } catch (eer1) {}
                                    }
                                    return false;
                                }
                                if (e.keyCode === 13) {
                                    var ta = e.target;
                                    if(ta.tagName == 'TEXTAREA') { return true; }
                                    if( $($t).jqGrid("saveRow", rowid, o ) ) {
                                        if($t.p._inlinenav) {
                                            try {
                                                $($t).jqGrid('showAddEditButtons');
                                            } catch (eer2) {}
                                        }
                                    }
                                    return false;
                                }
                            });
                        }
                        $($t).triggerHandler("jqGridInlineEditRow", [rowid, o]);
                        if( $.isFunction(o.oneditfunc)) { o.oneditfunc.call($t, rowid); }
                    }
                }
            });
        },
        //保持行数据 
        saveRow : function(rowid, successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
    		// Compatible mode old versions
    		var args = $.makeArray(arguments).slice(1), o = {};
    		
    		if( $.type(args[0]) === "object" ) {
    			o = args[0];
    		} else {
    			if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
    			if (typeof url !== "undefined") { o.url = url; }
    			if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
    			if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
    			if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
    			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
    		}
    		o = $.extend(true, {
    			successfunc: null,
    			url: null,
    			extraparam: {},
    			aftersavefunc: null,
    			errorfunc: null,
    			afterrestorefunc: null,
    			restoreAfterError: true,
    			mtype: "POST"
    		}, $.jgrid.inlineEdit, o );
    		// End compatible
    		
    		var success = false;
    		var $t = this[0], nm, tmp={}, tmp2={}, tmp3= {}, editable, fr, cv, ind;
    		if (!$t.grid ) { return success; }
    		ind = $($t).jqGrid("getInd",rowid,true);
    		if(ind === false) {return success;}
    		if (o.extraparam!=null && "add" == o.extraparam.oper){
   			    $(ind).addClass("added");
   		    }
    		editable = $(ind).attr("editable");
    		o.url = o.url ? o.url : $t.p.editurl;
    		if (editable==="1") {
    			var cm;
    			$('td[role="gridcell"]',ind).each(function(i) {
    				cm = $t.p.colModel[i];
    				nm = cm.name;
    				if ( nm != 'cb' && nm != 'subgrid' && cm.editable===true && nm != 'rn' && !$(this).hasClass('not-editable-cell')) {
    					switch (cm.edittype) {
    						case 'select':
    							if(!cm.editoptions.multiple) {
    								tmp[nm] = $("select option:selected",this).val();
    								tmp2[nm] = $("select option:selected", this).text();
    							} else {
    								var sel = $("select",this), selectedText = [];
    								tmp[nm] = $(sel).val();
    								if(tmp[nm]) { tmp[nm]= tmp[nm].join(","); } else { tmp[nm] =""; }
    								$("select option:selected",this).each(
    									function(i,selected){
    										selectedText[i] = $(selected).text();
    									}
    								);
    								tmp2[nm] = selectedText.join(",");
    							}
    							if(cm.formatter && cm.formatter == 'select') { tmp2={}; }
    							break;
    						case "checkbox":
    							if($("input",this).is(":checked")) {
    								var str = "",nam = "",checkElement = " input[type=checkbox]:checked";
    								$(checkElement,this).each(function(i){
    									str+= (((i==0)?"":",") + $(this).val());
    									nam+= (((i==0)?"":",") + $(this).next().text());
    								}) ;
    								tmp[nm] = str;
    								tmp2[nm] = nam;
    							}else {
    								tmp[nm] = "";
    								tmp2[nm] = "";
    							}
    						   // if(cm.formatter) { v2 = v; }
    							break;
    						case "radio":
    							if($("input" , this).is(":checked")) {
    								var str = "",nam = "",checkElement = " input[type=radio]:checked";
    								$(checkElement , this).each(function(i){
    									str+= (((i==0)?"":",") + $(this).val());
    									nam+= (((i==0)?"":",") + $(this).next().text());
    								}) ;
    								tmp[nm] = str;
    								tmp2[nm] = nam;
    							}else {
    								tmp[nm] = "";
    								tmp2[nm] = "";
    							}
    						   // if(cm.formatter) { v2 = v; }
    							break;
    						case "comboboxlist":
    							tmp[nm] = $("input",this).val();
    							tmp2[nm] = $("input",this).next().text();
    							if(""==tmp[nm]&&I18N.dropdownlist_defaultValue==tmp2[nm]){
    								tmp2[nm] = ""
    							}
    						   // if(cm.formatter) { tmp2[nm] = tmp[nm]; }
    							break;
    						case "comboboxtree":
    							tmp[nm] = $("input",this).val();
    							tmp2[nm] = $("input",this).next().text();
    							if(""==tmp[nm]&&I18N.dropdownlist_defaultValue==tmp2[nm]){
    								tmp2[nm] = ""
    							}
    							//if(cm.formatter) { v2 = v; }
    							break;
    						case "password":
    						case "text":
    						case "number":
    						case "datepicker": //datepicker与text等类型一样，返回具体值即可
    						case "button" :
    						case "autocomplete":
    							tmp[nm] = $("input",this).val();
    							tmp2[nm]=tmp[nm];
    							break;
    						case "textarea":
    							var temp = $("textarea",this)[0];
    							tmp[nm] = temp.value;
    							if(biz.isIE8 || biz.isIE7 || biz.isIE6){
    								var reg=new RegExp("\r\n","g");
    								tmp[nm]= tmp[nm].replace(reg,"<br>");
    							}
    							tmp2[nm]=tmp[nm];
    							break;
    						case 'custom' :
    							try {
    								if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
    									tmp[nm] = cm.editoptions.custom_value.call($t, $(".customelement",this),'get');
    									if (tmp[nm] === undefined) { throw "e2"; }
    								} else { throw "e1"; }
    							} catch (e) {
    								if (e=="e1") { $.jgrid.info_dialog($.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.nodefined,$.jgrid.edit.bClose); }
    								if (e=="e2") { $.jgrid.info_dialog($.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.novalue,$.jgrid.edit.bClose); }
    								else { $.jgrid.info_dialog($.jgrid.errors.errcap,e.message,$.jgrid.edit.bClose); }
    							}
    							break;
    					}
    					cv = $.jgrid.checkValues(tmp[nm],i,$t);
    					if(cv[0] === false) {
    						cv[1] = tmp[nm] + " " + cv[1];
    						return false;
    					}
    					if($t.p.autoencode) { tmp[nm] = $.jgrid.htmlEncode(tmp[nm]); }
    					if(o.url !== 'clientArray' && cm.editoptions && cm.editoptions.NullIfEmpty === true) {
    						if(tmp[nm] === "") {
    							tmp3[nm] = 'null';
    						}
    					}
    				}
    			});
    			if (cv[0] === false){
    				try {
    					var checkCellElm = $("#"+rowid+"_"+nm).parent();
                        checkCellElm.attr({title:cv[1]});
                        checkCellElm.tooltip({container: 'body',placement:checkCellElm.next("td").length > 0 ? 'right' :'left'});
                        checkCellElm.tooltip('show');
                        window.setTimeout(function(){checkCellElm.tooltip('destroy');},$t.p.tooltipTime);
    				} catch (e) {
    					alert(cv[1]);
    				}
    				return success;
    			}
    			var idname, opers, oper;
    			opers = $t.p.prmNames;
    			oper = opers.oper;
    			idname = opers.id;
    			if(tmp) {
    				tmp[oper] = opers.editoper;
    				tmp[idname] = rowid;
    				if(typeof($t.p.inlineData) == 'undefined') { $t.p.inlineData ={}; }
    				tmp = $.extend({},tmp,$t.p.inlineData,o.extraparam);
    			}
    			if (o.url == 'clientArray') {
    				// tmp = $.extend({},tmp, tmp2);
    				if($t.p.autoencode) {
    					$.each(tmp,function(n,v){
    						tmp[n] = $.jgrid.htmlDecode(v);
    					});
    				}
    				var resp = $($t).jqGrid("setRowData",rowid,tmp);
    				$(ind).attr("editable","0");
    				//給編輯過的單元格添加標示
    				for(var i in tmp){
    					if( $t.p.savedRow[0][i]!=undefined && tmp[i]!=$t.p.savedRow[0][i]){
    						 var temp = $(" tr[id="+rowid+"]",$t).addClass("edited"),
    							 editCellElem = $("td[aria-describedby=\""+$t.p.id+'_'+i+"\"]",temp).addClass("dirty-cell");
    						 if(!$t.p.editCellFlag){ editCellElem.css({background: "none"}); }
    					}
    				}
    				for( var k=0;k<$t.p.savedRow.length;k++) {
    					if( $t.p.savedRow[k].id == rowid) {fr = k; break;}
    				}
    				if(fr >= 0) { $t.p.savedRow.splice(fr,1); }
    				$($t).triggerHandler("jqGridInlineAfterSaveRow", [rowid, resp, tmp, o]);
    				if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,resp); }
    				success = true;
    				$(ind).unbind("keydown");
    			} else {
    				$("#lui_"+$.jgrid.jqID($t.p.id)).show();
    				tmp3 = $.extend({},tmp,tmp3);
    				//把下拉框值传过去
    				//$.extend(tmp3,tmp2);
    				tmp3[idname] = $.jgrid.stripPref($t.p.idPrefix, tmp3[idname]);
    				$.ajax($.extend({
    					url:o.url,
    					data: $.isFunction($t.p.serializeRowData) ? $t.p.serializeRowData.call($t, tmp3) : tmp3,
    					type: o.mtype,
    					async : false, //?!?
    					complete: function(res,stat){
    						$("#lui_"+$.jgrid.jqID($t.p.id)).hide();
    						if (stat === "success"){
    							var ret = true, sucret;
    							sucret = $($t).triggerHandler("jqGridInlineSuccessSaveRow", [res, rowid, o]);
    							if (!$.isArray(sucret)) {sucret = [true, tmp];}
    							if (sucret[0] && $.isFunction(o.successfunc)) {sucret = o.successfunc.call($t, res);}
    							if($.isArray(sucret)) {
    								// expect array - status, data, rowid
    								ret = sucret[0];
    								tmp = sucret[1] ? sucret[1] : tmp;
    							} else {
    								ret = sucret;
    							}
    							if (ret===true) {
    								if($t.p.autoencode) {
    									$.each(tmp,function(n,v){
    										tmp[n] = $.jgrid.htmlDecode(v);
    									});
    								}
    								tmp = $.extend({},tmp, tmp2);
    								$($t).jqGrid("setRowData",rowid,tmp);
    								$(ind).attr("editable","0");
    								for( var k=0;k<$t.p.savedRow.length;k++) {
    									if( $t.p.savedRow[k].id == rowid) {fr = k; break;}
    								}
    								if(fr >= 0) { $t.p.savedRow.splice(fr,1); }
    								$($t).triggerHandler("jqGridInlineAfterSaveRow", [rowid, res, tmp, o]);
    								if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,res); }
    								success = true;
    								$(ind).unbind("keydown");
    							} else {
    								$($t).triggerHandler("jqGridInlineErrorSaveRow", [rowid, res, stat, null, o]);
    								if($.isFunction(o.errorfunc) ) {
    									o.errorfunc.call($t, rowid, res, stat, null);
    								}
    								if(o.restoreAfterError === true) {
    									$($t).jqGrid("restoreRow",rowid, o.afterrestorefunc);
    								}
    							}
    						}
    					},
    					error:function(res,stat,err){
    						$("#lui_"+$.jgrid.jqID($t.p.id)).hide();
    						$($t).triggerHandler("jqGridInlineErrorSaveRow", [rowid, res, stat, err, o]);
    						if($.isFunction(o.errorfunc) ) {
    							o.errorfunc.call($t, rowid, res, stat, err);
    						} else {
    							try {
    								jAlert("\""+o.url+"\""+ I18N.error+". "+ res.responseText, $.jgrid.errors.errcap);
    							} catch(e) {
    								alert(res.responseText);
    							}
    						}
    						if(o.restoreAfterError === true) {
    							$($t).jqGrid("restoreRow",rowid, o.afterrestorefunc);
    						}
    					}
    				}, $.jgrid.ajaxOptions, $t.p.ajaxRowOptions || {}));
    			}
    		}
    		return success;
        },
        // 行编辑导航栏 修改新增行id序号
        inlineNav : function (elem, o) {
		o = $.extend({
			edit: true,
			editicon: "ui-icon-pencil",
			add: true,
			addicon:"ui-icon-plus",
			save: true,
			saveicon:"ui-icon-disk",
			cancel: true,
			cancelicon:"ui-icon-cancel",
			addParams : {useFormatter : false,rowID : "new_row"},
			editParams : {},
			restoreAfterSelect : true
		}, $.jgrid.nav, o ||{});
		return this.each(function(){
			if (!this.grid ) { return; }
			var $t = this, onSelect, gID = elem.id,$refreshBtn = $("#"+gID+" .navtable td[id^='refresh']");
			$t.p._inlinenav = true;
			function showAddEditButtons(){
                $("#"+gID+"_ilsave").addClass('ui-state-disabled');
                $("#"+gID+"_ilcancel").addClass('ui-state-disabled');
                $("#"+gID+"_iladd").removeClass('ui-state-disabled');
                $("#"+gID+"_iledit").removeClass('ui-state-disabled');
                $("#del_"+$t.p.id+"_top").removeClass('ui-state-disabled');
            }
			// detect the formatactions column
			if(o.addParams.useFormatter === true) {
				var cm = $t.p.colModel,i;
				for (i = 0; i<cm.length; i++) {
					if(cm[i].formatter && cm[i].formatter === "actions" ) {
						if(cm[i].formatoptions) {
							var defaults =  {
								keys:false,
								onEdit : null,
								onSuccess: null,
								afterSave:null,
								onError: null,
								afterRestore: null,
								extraparam: {},
								url: null
							},
							ap = $.extend( defaults, cm[i].formatoptions );
							o.addParams.addRowParams = {
								"keys" : ap.keys,
								"oneditfunc" : ap.onEdit,
								"successfunc" : ap.onSuccess,
								"url" : ap.url,
								"extraparam" : ap.extraparam,
								"aftersavefunc" : ap.afterSavef,
								"errorfunc": ap.onError,
								"afterrestorefunc" : ap.afterRestore
							};
						}
						break;
					}
				}
			}
			if(o.add) {
				$($t).jqGrid('navButtonAdd', elem,{
					caption : o.addtext,
					title : o.addtitle,
					buttonicon : o.addicon,
					id : gID+"_iladd",
					onClickButton : function () {
                        //新增行序号
                        o.addParams.rowID = $t.p.addParams.rowID + $t.p.addParams.serial;
						$($t).jqGrid('addRow', o.addParams);
                        //序号维护
                        $t.p.addParams.serial++;
						if(!o.addParams.useFormatter) {
							$("#"+gID+"_ilsave").removeClass('ui-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('ui-state-disabled');
							$("#del_"+$t.p.id+"_top").addClass('ui-state-disabled');
							$("#"+gID+"_iladd").addClass('ui-state-disabled');
							$("#"+gID+"_iledit").addClass('ui-state-disabled');
						}
					}
				});
			}
			if(o.edit) {
				$($t).jqGrid('navButtonAdd', elem,{
					caption : o.edittext,
					title : o.edittitle,
					buttonicon : o.editicon,
					id : gID+"_iledit",
					onClickButton : function () {
						var sr = $($t).jqGrid('getGridParam','selrow');
						if(sr) {
							$($t).jqGrid('editRow', sr, o.editParams);
							$("#"+gID+"_ilsave").removeClass('ui-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('ui-state-disabled');
							$("#del_"+$t.p.id+"_top").addClass('ui-state-disabled');
							$("#"+gID+"_iladd").addClass('ui-state-disabled');
							$("#"+gID+"_iledit").addClass('ui-state-disabled');
						} else {
                            jAlert(o.alerttext, o.alertcap);
							//$.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();
						}
					}
				});
			}
			if(o.save) {
				$($t).jqGrid('navButtonAdd', elem,{
					caption : o.savetext || '保存',
					title : o.savetitle || '保存编辑数据',
					buttonicon : o.saveicon,
					id : gID+"_ilsave",
					onClickButton : function () {
						var sr = $t.p.savedRow[0].id;
						if(sr) {
							var opers = $t.p.prmNames,
							oper = opers.oper;
							if(!o.editParams.extraparam) {
								o.editParams.extraparam = {};
							}
							//if($("#"+$.jgrid.jqID(sr), "#"+gID ).hasClass("jqgrid-new-row")) {
							if($("#"+$.jgrid.jqID(sr), "#"+gID.substring(0,gID.length-9) ).hasClass("jqgrid-new-row")) {
								o.editParams.extraparam[oper] = opers.addoper;
							} else {
								o.editParams.extraparam[oper] = opers.editoper;
							}

							if( $($t).jqGrid('saveRow', sr, o.editParams) ) {
                                if(o.editParams.url === "clientArray"){
                                    showAddEditButtons();
                                }else{
                                	$($t).trigger("reloadGrid");
                                	showAddEditButtons();
                                }
							}else{
                                //showAddEditButtons();保存失败时不修改按钮
                            }
                           // $($t).jqGrid('saveRow', sr, o.editParams);
                           // $($t).jqGrid('showAddEditButtons');
						} else {
                            jAlert(o.alerttext, o.alertcap);
							//$.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();
						}
					}
				});
				$("#"+gID+"_ilsave").addClass('ui-state-disabled');
			}
			if(o.cancel) {
				$($t).jqGrid('navButtonAdd', elem,{
					caption : o.canceltext || '取消',
					title : o.canceltitle || '取消数据编辑',
					buttonicon : o.cancelicon,
					id : gID+"_ilcancel",
					onClickButton : function () {
						var sr = $t.p.savedRow[0].id;
						if(sr) {
							$($t).jqGrid('restoreRow', sr, o.editParams);
							showAddEditButtons();
						} else {
                            jAlert(o.alerttext, o.alertcap);
							//$.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();
						}
					}
				});
				$("#"+gID+"_ilcancel").addClass('ui-state-disabled');
			}
			//存在刷新按钮时，点击刷新按钮保存和取消按钮禁用，新增和编辑按钮可用
			if($refreshBtn.length > 0){
                $refreshBtn.each(function(){
                    $(this).click(function(){
                        $("#"+gID+"_ilsave").addClass('ui-state-disabled');
                        $("#"+gID+"_ilcancel").addClass('ui-state-disabled');
                        $("#"+gID+"_iladd").removeClass('ui-state-disabled');
                        $("#"+gID+"_iledit").removeClass('ui-state-disabled');
                    });
                });
            }
			if(o.restoreAfterSelect === true) {
				if($.isFunction($t.p.beforeSelectRow)) {
					onSelect = $t.p.beforeSelectRow;
				} else {
					onSelect =  false;
				}
				$t.p.beforeSelectRow = function(id, stat) {
					var ret = true;
					if($t.p.savedRow.length > 0 && $t.p._inlinenav===true && ( id !== $t.p.selrow && $t.p.selrow !==null) ) {
						if($t.p.selrow == o.addParams.rowID ) {
							$($t).jqGrid('delRowData', $t.p.selrow);
						} else {
							$($t).jqGrid('restoreRow', $t.p.selrow, o.editParams);
						}
						showAddEditButtons();
					}
					if(onSelect) {
						ret = onSelect.call($t, id, stat);
					}
					return ret;
				};
			}
			//导航栏按钮
            //$(".ui-pg-div").button();
		});
	},
        //弹出框编辑 添加datepicker处理
        editGridRow : function(rowid, p){
		p = $.extend({
			top : 0,
			left: 0,
			width: 600,
			height: 'auto',
			dataheight: 'auto',
			modal: false,
			overlay : 30,
			drag: true,
			resize: true,
			url: null,
			mtype : "post",
			clearAfterAdd :true,
			closeAfterEdit : false,
			reloadAfterSubmit : true,
			onInitializeForm: null,
			beforeInitData: null,
			beforeShowForm: null,
			afterShowForm: null,
			beforeSubmit: null,
			afterSubmit: null,
			onclickSubmit: null,
			afterComplete: null,
			onclickPgButtons : null,
			afterclickPgButtons: null,
			editData : {},
			recreateForm : false,
			jqModal : true,
			closeOnEscape : false,
			addedrow : "first",
			topinfo : '',
			bottominfo: '',
			saveicon : [],
			closeicon : [],
			savekey: [false,13],
			navkeys: [false,38,40],
			checkOnSubmit : false,
			checkOnUpdate : false,
			_savedData : {},
			processing : false,
			onClose : null,
			ajaxEditOptions : {},
			serializeEditData : null,
			viewPagerButtons : true
		}, $.jgrid.edit, p || {});
        rp_ge[$(this)[0].p.id] = p;
		return this.each(function(){
			var $t = this;
			if (!$t.grid || !rowid) {return;}
			var gID = $t.p.id,
			frmgr = "FrmGrid_"+gID, frmtborg = "TblGrid_"+gID, frmtb = "#"+$.jgrid.jqID(frmtborg),
			IDs = {themodal:'editmod'+gID,modalhead:'edithd'+gID,modalcontent:'editcnt'+gID, scrollelm : frmgr},
			onBeforeShow = $.isFunction(rp_ge[$t.p.id].beforeShowForm) ? rp_ge[$t.p.id].beforeShowForm : false,
			onAfterShow = $.isFunction(rp_ge[$t.p.id].afterShowForm) ? rp_ge[$t.p.id].afterShowForm : false,
			onBeforeInit = $.isFunction(rp_ge[$t.p.id].beforeInitData) ? rp_ge[$t.p.id].beforeInitData : false,
			onInitializeForm = $.isFunction(rp_ge[$t.p.id].onInitializeForm) ? rp_ge[$t.p.id].onInitializeForm : false,
			showFrm = true,
			maxCols = 1, maxRows=0,	postdata, extpost, newData, diff, frmoper;
			frmgr = $.jgrid.jqID(frmgr);
			if (rowid === "new") {
				rowid = "_empty";
				frmoper = "add";
				p.caption=rp_ge[$t.p.id].addCaption;
			} else {
				p.caption=rp_ge[$t.p.id].editCaption;
				frmoper = "edit";
			}
			if(p.recreateForm===true && $("#"+$.jgrid.jqID(IDs.themodal)).html() !== null) {
				$("#"+$.jgrid.jqID(IDs.themodal)).remove();
			}
			var closeovrl = true;
			if(p.checkOnUpdate && p.jqModal && !p.modal) {
				closeovrl = false;
			}
			function getFormData(){
				$(frmtb+" > tbody > tr > td > .FormElement").each(function() {
					var celm = $(".customelement", this);
					if (celm.length) {
						var  elem = celm[0], nm = $(elem).attr('name');
						$.each($t.p.colModel, function(){
							if(this.name === nm && this.editoptions && $.isFunction(this.editoptions.custom_value)) {
								try {
									postdata[nm] = this.editoptions.custom_value.call($t, $("#"+$.jgrid.jqID(nm),frmtb),'get');
									if (postdata[nm] === undefined) {throw "e1";}
								} catch (e) {
									if (e==="e1") {$.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.novalue,jQuery.jgrid.edit.bClose);}
									else {$.jgrid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose);}
								}
								return true;
							}
						});
					} else {
					switch ($(this).get(0).type || $( "input",this).get(0).type) {
						case "checkbox":
							if($("input",this).is(":checked")) {
                                var str = "",checkElement = "input[type=checkbox]:checked";
                                $(checkElement,this).each(function(i){
                                     str+= (((i==0)?"":",") + $(this).val());
                                }) ;
                                postdata[$(this).attr("name")]= str;
							}else {
								postdata[$(this).attr("name")]= "";
							}
						break;
						case "radio":
							if($("input",this).is(":checked")) {
                                var str = "",checkElement = "input[type=radio]:checked";
                                $(checkElement,this).each(function(i){
                                     str= $(this).val();
                                }) ;
                                postdata[$(this).attr("name")]= str;
							}else {
								postdata[$(this).attr("name")]= "";
							}
						break;
						case "select-one":
							postdata[this.name]= $("option:selected",this).val();
							extpost[this.name]= $("option:selected",this).text();
						break;
						case "select-multiple":
							postdata[this.name]= $(this).val();
							if(postdata[this.name]) {postdata[this.name] = postdata[this.name].join(",");}
							else {postdata[this.name] ="";}
							var selectedText = [];
							$("option:selected",this).each(
								function(i,selected){
									selectedText[i] = $(selected).text();
								}
							);
							extpost[this.name]= selectedText.join(",");
						break;
						case "password":
						case "text":
						case "textarea":
                        case "comboboxlist":
                        case "comboboxtree":
                        case "datepicker":
						case "button":
							postdata[this.name] = $(this).val();

						break;
					}
					if($t.p.autoencode) {postdata[this.name] = $.jgrid.htmlEncode(postdata[this.name]);}
					}
				});
				return true;
			}
			function createData(rowid,obj,tb,maxcols){
				var nm, hc,trdata, cnt=0,tmp, dc,elc, retpos=[], ind=false,
				tdtmpl = "<td class='CaptionTD'></td><td class='DataTD'></td>", tmpl="", i; //*2
				for (i =1; i<=maxcols;i++) {
					tmpl += tdtmpl;
				}
				if(rowid != '_empty') {
					ind = $(obj).jqGrid("getInd",rowid);
				}
				$(obj.p.colModel).each( function(i) {
					nm = this.name;
					// hidden fields are included in the form
					if(this.editrules && this.editrules.edithidden === true) {
						hc = false;
					} else {
						hc = this.hidden === true ? true : false;
					}
					dc = hc ? "style='display:none'" : "";
					if ( nm !== 'cb' && nm !== 'subgrid' && this.editable===true && nm !== 'rn') {
						if(ind === false) {
							tmp = "";
						} else {
							if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
								tmp = $("td:eq("+i+")",obj.rows[ind]).text();
							} else {
								try {
									tmp =  $.unformat.call(obj, $("td:eq("+i+")",obj.rows[ind]),{rowId:rowid, colModel:this},i);
								} catch (_) {
									tmp =  (this.edittype && this.edittype == "textarea") ? $("td:eq("+i+")",obj.rows[ind]).text() : $("td:eq("+i+")",obj.rows[ind]).html();
								}
								if(!tmp || tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
							}
						}
						var opt = $.extend({}, this.editoptions || {} ,{id:nm,name:nm}),
						frmopt = $.extend({}, {elmprefix:'',elmsuffix:'',rowabove:false,rowcontent:''}, this.formoptions || {}),
						rp = parseInt(frmopt.rowpos,10) || cnt+1,
						cp = parseInt((parseInt(frmopt.colpos,10) || 1)*2,10);
						if(rowid == "_empty" && opt.defaultValue ) {
							tmp = $.isFunction(opt.defaultValue) ? opt.defaultValue() : opt.defaultValue;
						}
						if(!this.edittype) {this.edittype = "text";}
						if($t.p.autoencode) {tmp = $.jgrid.htmlDecode(tmp);}
						elc = $.jgrid.createEl(this.edittype,opt,tmp,false,$.extend({},$.jgrid.ajaxOptions,obj.p.ajaxSelectOptions || {}));
						//if(tmp === "" && this.edittype == "checkbox") {tmp = $(elc).attr("offval");}
						//if(tmp === "" && this.edittype == "select") {tmp = $("option:eq(0)",elc).text();}
						if(rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {rp_ge[$t.p.id]._savedData[nm] = tmp;}
						$(elc).addClass("FormElement");
						if(this.edittype == 'text' || this.edittype == 'textarea' || this.edittype == 'datepicker'
                                || this.edittype == 'comboboxlist' || this.edittype == 'comboboxtree') {
							//$(elc).addClass("ui-widget-content");
						}
						trdata = $(tb).find("tr[rowpos="+rp+"]");
						if(frmopt.rowabove) {
							var newdata = $("<tr><td class='contentinfo' colspan='"+(maxcols*2)+"'>"+frmopt.rowcontent+"</td></tr>");
							$(tb).append(newdata);
							newdata[0].rp = rp;
						}
						if ( trdata.length===0 ) {
							trdata = $("<tr "+(this.hidedlg ? dc :"")+" rowpos='"+rp+"'></tr>").addClass("FormData").attr("id","tr_"+nm);
							$(trdata).append(tmpl);
							$(tb).append(trdata);
							trdata[0].rp = rp;
						}
                        //单元格后面添加“：”
						$("td:eq("+(cp-2)+")",trdata[0]).html( (typeof frmopt.label === 'undefined' ? obj.p.colNames[i]: frmopt.label)+" :");
						$("td:eq("+(cp-1)+")",trdata[0]).append(frmopt.elmprefix).append(elc).append(frmopt.elmsuffix);
						retpos[cnt] = i;
						cnt++;
						//comboboxlist、comboboxtree组件需要在elc统计节点生成span标签，需要在elc完成append操作再初始化
                        if(this.edittype == "comboboxlist"){
                        	var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                            new biz.comboboxlist(setting);
                        }else if(this.edittype == "comboboxtree"){
                            var setting = $.extend(opt,{targetElem:elc,selected:tmp});
                            new biz.comboboxtree(setting);
                        }
					}
				});
				if( cnt > 0) {
					var idrow = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='"+ (maxcols*2-1)+"' class='DataTD'><input class='FormElement' id='id_g' type='text' name='"+obj.p.id+"_id' value='"+rowid+"'/></td></tr>");
					idrow[0].rp = cnt+999;
					$(tb).append(idrow);
					if(rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {rp_ge[$t.p.id]._savedData[obj.p.id+"_id"] = rowid;}
				}
				return retpos;
			}
			function fillData(rowid,obj,fmid){
				var nm,cnt=0,tmp, fld,opt,vl,vlc;
				if(rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {rp_ge[$t.p.id]._savedData = {};rp_ge[$t.p.id]._savedData[obj.p.id+"_id"]=rowid;}
				var cm = obj.p.colModel;
				if(rowid == '_empty') {
					$(cm).each(function(){
						nm = this.name;
						opt = $.extend({}, this.editoptions || {} );
						fld = $("#"+$.jgrid.jqID(nm),"#"+fmid);
						switch(this.edittype){
							case "select":
								var selectObj = biz.utils.getUiObj(this.name);
								selectObj.setValue("");	
							break;
							case "checkbox":
								var checkboxObj = biz.utils.getUiObj(this.name);
								checkboxObj.uncheckAll();
							break;
							case "radio":
								var radioObj = biz.utils.getUiObj(this.name);
								radioObj.uncheck(radioObj.radio("getCheckValue"));		
							break;
							case "comboboxlist":
	                        	var comboboxlistObj = biz.utils.getUiObj(this.name);
	                        	comboboxlistObj.setValue("");
	                    	break;
	                        case "comboboxtree":
	                        	var comboboxtreeObj = biz.utils.getUiObj(this.name);
	                        	comboboxtreeObj.setValue("");
	                    	break;
						}
						if(fld && fld.length && fld[0] !== null) {
							fld.val("");
						}
					});
					$("#id_g","#"+fmid).val(rowid);
					return;
				}
				var tre = $(obj).jqGrid("getInd",rowid,true);
				if(!tre) {return;}
				$('td[role="gridcell"]',tre).each( function(i) {
					nm = cm[i].name;
					// hidden fields are included in the form
					if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn' && cm[i].editable===true) {
						if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
							tmp = $(this).text();
						} else {
							try {
								tmp =  $.unformat.call(obj, $(this),{rowId:rowid, colModel:cm[i]},i);
							} catch (_) {
								tmp = cm[i].edittype=="textarea" ? $(this).text() : $(this).html();
							}
						}
						if($t.p.autoencode) {tmp = $.jgrid.htmlDecode(tmp);}
						if(rp_ge[$t.p.id].checkOnSubmit===true || rp_ge[$t.p.id].checkOnUpdate) {rp_ge[$t.p.id]._savedData[nm] = tmp;}
						nm = $.jgrid.jqID(nm);
						switch (cm[i].edittype) {
							case "password":
							case "text":
							case "button" :
							case "image":
                            case "datepicker":
							case "textarea":
							case "number":
							case "autocomplete":	
								if(tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
								$("#"+nm,"#"+fmid).val(tmp);
								break;
							case "select":
								var opv = tmp.split(",");
								opv = $.map(opv,function(n){return $.trim(n);});
								$("#"+nm+" option","#"+fmid).each(function(){
									if (!cm[i].editoptions.multiple && ($.trim(tmp) == $.trim($(this).text()) || opv[0] == $.trim($(this).text()) || opv[0] == $.trim($(this).val())) ){
										this.selected= true;
									} else if (cm[i].editoptions.multiple){
										if(  $.inArray($.trim($(this).text()), opv ) > -1 || $.inArray($.trim($(this).val()), opv ) > -1  ){
											this.selected = true;
										}else{
											this.selected = false;
										}
									} else {
										this.selected = false;
									}
								});
								break;
							case "checkbox":
									var checkValue = tmp.split(",");
									var checkboxObj = biz.utils.getUiObj(cm[i].name);
									if(checkValue != null && checkValue != ""){
										checkboxObj.uncheckAll();
										checkboxObj.check(checkValue);
									}
									else{
										checkboxObj.uncheckAll();
									}
								break;
							case "radio":
								var radioObj = biz.utils.getUiObj(cm[i].name);
								if(tmp != ""){
									radioObj.check(tmp);
								}
								else{
									radioObj.uncheck(radioObj.radio("getCheckValue"));		
								}
								break;
							case "comboboxlist":
                            	var comboboxlistObj = biz.utils.getUiObj(cm[i].name);
                            	comboboxlistObj.setValue(tmp);
                            	break;
                            case "comboboxtree":
                            	var comboboxtreeObj = biz.utils.getUiObj(cm[i].name);
                            	comboboxtreeObj.setValue(tmp);
                            	break;
							case 'custom' :
								try {
									if(cm[i].editoptions && $.isFunction(cm[i].editoptions.custom_value)) {
										cm[i].editoptions.custom_value.call($t, $("#"+nm,"#"+fmid),'set',tmp);
									} else {throw "e1";}
								} catch (e) {
									if (e=="e1") {$.jgrid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.jgrid.edit.msg.nodefined,jQuery.jgrid.edit.bClose);}
									else {$.jgrid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose);}
								}
								break;
						}
						cnt++;
					}
				});
				if(cnt>0) {$("#id_g",frmtb).val(rowid);}
			}
			function setNulls() {
				$.each($t.p.colModel, function(i,n){
					if(n.editoptions && n.editoptions.NullIfEmpty === true) {
						if(postdata.hasOwnProperty(n.name) && postdata[n.name] === "") {
							postdata[n.name] = 'null';
						}
					}
				});
			}
			function postIt() {
				var copydata, ret=[true,"",""], onCS = {}, opers = $t.p.prmNames, idname, oper, key, selr, i;

				var retvals = $($t).triggerHandler("jqGridAddEditBeforeCheckValues", [$("#"+frmgr), frmoper]);
				if(retvals && typeof(retvals) === 'object') {postdata = retvals;}

				if($.isFunction(rp_ge[$t.p.id].beforeCheckValues)) {
					retvals = rp_ge[$t.p.id].beforeCheckValues.call($t, postdata,$("#"+frmgr),postdata[$t.p.id+"_id"] == "_empty" ? opers.addoper : opers.editoper);
					if(retvals && typeof(retvals) === 'object') {postdata = retvals;}
				}
				for( key in postdata ){
					if(postdata.hasOwnProperty(key)) {
						ret = $.jgrid.checkValues(postdata[key],key,$t);
						if(ret[0] === false) {break;}
					}
				}
				setNulls();
				if(ret[0]) {
					onCS = $($t).triggerHandler("jqGridAddEditClickSubmit", [rp_ge[$t.p.id], postdata, frmoper]);
					if( onCS === undefined && $.isFunction( rp_ge[$t.p.id].onclickSubmit)) {
						onCS = rp_ge[$t.p.id].onclickSubmit.call($t, rp_ge[$t.p.id], postdata) || {};
					}
					ret = $($t).triggerHandler("jqGridAddEditBeforeSubmit", [postdata, $("#"+frmgr), frmoper]);
					if(ret === undefined) {
						ret = [true,"",""];
					}
					if( ret[0] && $.isFunction(rp_ge[$t.p.id].beforeSubmit))  {
						ret = rp_ge[$t.p.id].beforeSubmit(postdata,$("#"+frmgr));
					}
				}

				if(ret[0] && !rp_ge[$t.p.id].processing) {
					rp_ge[$t.p.id].processing = true;
					$("#sData", frmtb+"_2").addClass('ui-state-active');
					oper = opers.oper;
					idname = opers.id;
					// we add to pos data array the action - the name is oper
					postdata[oper] = ($.trim(postdata[$t.p.id+"_id"]) == "_empty") ? opers.addoper : opers.editoper;
					if(postdata[oper] != opers.addoper) {
						postdata[idname] = postdata[$t.p.id+"_id"];
					} else {
						// check to see if we have allredy this field in the form and if yes lieve it
						if( postdata[idname] === undefined ) {postdata[idname] = postdata[$t.p.id+"_id"];}
					}
					delete postdata[$t.p.id+"_id"];
					postdata = $.extend(postdata,rp_ge[$t.p.id].editData,onCS);
					if($t.p.treeGrid === true)  {
						if(postdata[oper] == opers.addoper) {
						selr = $($t).jqGrid("getGridParam", 'selrow');
							var tr_par_id = $t.p.treeGridModel == 'adjacency' ? $t.p.treeReader.parent_id_field : 'parent_id';
							postdata[tr_par_id] = selr;
						}
						for(i in $t.p.treeReader){
							if($t.p.treeReader.hasOwnProperty(i)) {
								var itm = $t.p.treeReader[i];
								if(postdata.hasOwnProperty(itm)) {
									if(postdata[oper] == opers.addoper && i === 'parent_id_field') {continue;}
									delete postdata[itm];
								}
							}
						}
					}

					postdata[idname] = $.jgrid.stripPref($t.p.idPrefix, postdata[idname]);
                    //把下拉框值传过去
                    //$.extend(postdata,extpost);
                    var ajaxUrl = rp_ge[$t.p.id].url ? rp_ge[$t.p.id].url : $($t).jqGrid('getGridParam','editurl') ;
					var ajaxOptions = $.extend({
						url: ajaxUrl,
						type: rp_ge[$t.p.id].mtype,
						data: $.isFunction(rp_ge[$t.p.id].serializeEditData) ? rp_ge[$t.p.id].serializeEditData(postdata) :  postdata,
						complete:function(data,Status){
							postdata[idname] = $t.p.idPrefix + postdata[idname];
							if(Status != "success") {
								ret[0] = false;
								ret[1] = $($t).triggerHandler("jqGridAddEditErrorTextFormat", [data, frmoper]);
								if ($.isFunction(rp_ge[$t.p.id].errorTextFormat)) {
									ret[1] = rp_ge[$t.p.id].errorTextFormat.call($t, data);
								} else {
									ret[1] = "\""+ajaxUrl+"\""+ I18N.error+". "+ Status + " Status: '" + data.statusText + "'. Error code: " + data.status;
								}
							} else {
								// data is posted successful
								// execute aftersubmit with the returned data from server
								ret = $($t).triggerHandler("jqGridAddEditAfterSubmit", [data, postdata, frmoper]);
								if(ret === undefined) {
									ret = [true,"",""];
								}
								if( ret[0] && $.isFunction(rp_ge[$t.p.id].afterSubmit) ) {
									ret = rp_ge[$t.p.id].afterSubmit.call($t, data,postdata);
								}
								$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});
							}
							if(ret[0] === false) {
								$("#FormError>td",frmtb).html(ret[1]);
								$("#FormError",frmtb).show();
							} else {
								// remove some values if formattaer select or checkbox
								$.each($t.p.colModel, function(){
									if(extpost[this.name] && this.formatter && this.formatter=='select') {
										try {delete extpost[this.name];} catch (e) {}
									}
								});
								postdata = $.extend(postdata,extpost);
								if($t.p.autoencode) {
									$.each(postdata,function(n,v){
										postdata[n] = $.jgrid.htmlDecode(v);
									});
								}
								//rp_ge[$t.p.id].reloadAfterSubmit = rp_ge[$t.p.id].reloadAfterSubmit && $t.p.datatype != "local";
								// the action is add
								if(postdata[oper] == opers.addoper ) {
									//id processing
									// user not set the id ret[2]
									if(!ret[2]) {ret[2] = $.jgrid.randId();}
									postdata[idname] = ret[2];
									if(rp_ge[$t.p.id].closeAfterAdd) {
										if(rp_ge[$t.p.id].reloadAfterSubmit) {$($t).trigger("reloadGrid");}
										else {
											if($t.p.treeGrid === true){
												$($t).jqGrid("addChildNode",ret[2],selr,postdata );
											} else {
											$($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
											$($t).jqGrid("setSelection",ret[2]);
										}
										}
										$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});
									} else if (rp_ge[$t.p.id].clearAfterAdd) {
										if(rp_ge[$t.p.id].reloadAfterSubmit) {$($t).trigger("reloadGrid");}
										else {
											if($t.p.treeGrid === true){
												$($t).jqGrid("addChildNode",ret[2],selr,postdata );
											} else {
												$($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
											}
										}
										fillData("_empty",$t,frmgr);
									} else {
										if(rp_ge[$t.p.id].reloadAfterSubmit) {$($t).trigger("reloadGrid");}
										else {
											if($t.p.treeGrid === true){
												$($t).jqGrid("addChildNode",ret[2],selr,postdata );
											} else {
												$($t).jqGrid("addRowData",ret[2],postdata,p.addedrow);
									}
										}
									}
								} else {
									// the action is update
									if(rp_ge[$t.p.id].reloadAfterSubmit) {
										$($t).trigger("reloadGrid");
										if( !rp_ge[$t.p.id].closeAfterEdit ) {setTimeout(function(){$($t).jqGrid("setSelection",postdata[idname]);},1000);}
									} else {
										if($t.p.treeGrid === true) {
											$($t).jqGrid("setTreeRow", postdata[idname],postdata);
										} else {
											$($t).jqGrid("setRowData", postdata[idname],postdata);
										}
									}
									if(rp_ge[$t.p.id].closeAfterEdit) {$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});}
								}
								if($.isFunction(rp_ge[$t.p.id].afterComplete)) {
									copydata = data;
									setTimeout(function(){
										$($t).triggerHandler("jqGridAddEditAfterComplete", [copydata, postdata, $("#"+frmgr), frmoper]);
										rp_ge[$t.p.id].afterComplete.call($t, copydata, postdata, $("#"+frmgr));
										copydata=null;
									},500);
								}
							if(rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
								$("#"+frmgr).data("disabled",false);
								if(rp_ge[$t.p.id]._savedData[$t.p.id+"_id"] !="_empty"){
									for(var key in rp_ge[$t.p.id]._savedData) {
										if(postdata[key]) {
											rp_ge[$t.p.id]._savedData[key] = postdata[key];
										}
									}
								}
							}
							}
							rp_ge[$t.p.id].processing=false;
							$("#sData", frmtb+"_2").removeClass('ui-state-active');
							try{$(':input:visible',"#"+frmgr)[0].focus();} catch (e){}
						}
					}, $.jgrid.ajaxOptions, rp_ge[$t.p.id].ajaxEditOptions );

					if (!ajaxOptions.url && !rp_ge[$t.p.id].useDataProxy) {
						if ($.isFunction($t.p.dataProxy)) {
							rp_ge[$t.p.id].useDataProxy = true;
						} else {
							ret[0]=false;ret[1] += " "+$.jgrid.errors.nourl;
						}
					}
					if (ret[0]) {
						if (rp_ge[$t.p.id].useDataProxy) {
							var dpret = $t.p.dataProxy.call($t, ajaxOptions, "set_"+$t.p.id);
							if(typeof(dpret) == "undefined") {
								dpret = [true, ""];
							}
							if(dpret[0] === false ) {
								ret[0] = false;
								ret[1] = dpret[1] || "Error deleting the selected row!" ;
							} else {
								if(ajaxOptions.data.oper == opers.addoper && rp_ge[$t.p.id].closeAfterAdd ) {
									$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});
								}
								if(ajaxOptions.data.oper == opers.editoper && rp_ge[$t.p.id].closeAfterEdit ) {
									$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});
								}
							}
						} else {
							$.ajax(ajaxOptions);
						}
					}
				}
				if(ret[0] === false) {
                     var checkCellElm = $("#"+key);
	                 checkCellElm.attr({title:ret[1]});
	                 checkCellElm.tooltip({container: 'body',placement: 'right' });
	                 checkCellElm.tooltip('show');
	                 window.setTimeout(function(){ checkCellElm.tooltip('destroy');},$t.p.tooltipTime);
				}
			}
			function compareData(nObj, oObj ) {
				var ret = false,key;
				for (key in nObj) {
					if(nObj[key] != oObj[key]) {
						ret = true;
						break;
					}
				}
				return ret;
			}
			function checkUpdates () {
				var stat = true;
				$("#FormError",frmtb).hide();
				if(rp_ge[$t.p.id].checkOnUpdate) {
					postdata = {};extpost={};
					getFormData();
					newData = $.extend({},postdata,extpost);
					diff = compareData(newData,rp_ge[$t.p.id]._savedData);
					if(diff) {
						$("#"+frmgr).data("disabled",true);
						$(".confirm","#"+IDs.themodal).show();
						stat = false;
					}
				}
				return stat;
			}
			function restoreInline()
			{
				if (rowid !== "_empty" && typeof($t.p.savedRow) !== "undefined" && $t.p.savedRow.length > 0 && $.isFunction($.fn.jqGrid.restoreRow)) {
					for (var i=0;i<$t.p.savedRow.length;i++) {
						if ($t.p.savedRow[i].id == rowid) {
							$($t).jqGrid('restoreRow',rowid);
							break;
						}
					}
				}
			}
			function updateNav(cr,totr){
				if (cr===0) {$("#pData",frmtb+"_2").addClass('ui-state-disabled');} else {$("#pData",frmtb+"_2").removeClass('ui-state-disabled');}
				if (cr==totr) {$("#nData",frmtb+"_2").addClass('ui-state-disabled');} else {$("#nData",frmtb+"_2").removeClass('ui-state-disabled');}
			}
			function getCurrPos() {
				var rowsInGrid = $($t).jqGrid("getDataIDs"),
				selrow = $("#id_g",frmtb).val(),
				pos = $.inArray(selrow,rowsInGrid);
				return [pos,rowsInGrid];
			}

			if ( $("#"+$.jgrid.jqID(IDs.themodal)).html() !== null ) {
				showFrm = $($t).triggerHandler("jqGridAddEditBeforeInitData", [$("#"+$.jgrid.jqID(frmgr))]);
				if(typeof(showFrm) == "undefined") {
					showFrm = true;
				}
				if(showFrm && onBeforeInit) {
					showFrm = onBeforeInit.call($t, $("#"+frmgr));
				}
				if(showFrm === false) {return;}
				restoreInline();
				$(".ui-jqdialog-title","#"+$.jgrid.jqID(IDs.modalhead)).html(p.caption);
				$("#FormError",frmtb).hide();
				if(rp_ge[$t.p.id].topinfo) {
					$(".topinfo",frmtb).html(rp_ge[$t.p.id].topinfo);
					$(".tinfo",frmtb).show();
				} else {
					$(".tinfo",frmtb).hide();
				}
				if(rp_ge[$t.p.id].bottominfo) {
					$(".bottominfo",frmtb+"_2").html(rp_ge[$t.p.id].bottominfo);
					$(".binfo",frmtb+"_2").show();
				} else {
					$(".binfo",frmtb+"_2").hide();
				}
				// filldata
				fillData(rowid,$t,frmgr);
				///
				if(rowid=="_empty" || !rp_ge[$t.p.id].viewPagerButtons) {
					$("#pData, #nData",frmtb+"_2").hide();
				} else {
					$("#pData, #nData",frmtb+"_2").show();
				}
				if(rp_ge[$t.p.id].processing===true) {
					rp_ge[$t.p.id].processing=false;
					$("#sData", frmtb+"_2").removeClass('ui-state-active');
				}
				if($("#"+frmgr).data("disabled")===true) {
					$(".confirm","#"+$.jgrid.jqID(IDs.themodal)).hide();
					$("#"+frmgr).data("disabled",false);
				}
				$($t).triggerHandler("jqGridAddEditBeforeShowForm", [$("#"+frmgr), frmoper]);
				if(onBeforeShow) { onBeforeShow.call($t, $("#"+frmgr)); }
				$("#"+$.jgrid.jqID(IDs.themodal)).data("onClose",rp_ge[$t.p.id].onClose);
				$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, jqM: false, overlay: p.overlay, modal:p.modal});
				if(!closeovrl) {
					$(".jqmOverlay").click(function(){
						if(!checkUpdates()) {return false;}
						$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});
						return false;
					});
				}
				$($t).triggerHandler("jqGridAddEditAfterShowForm", [$("#"+frmgr), frmoper]);
				if(onAfterShow) { onAfterShow.call($t, $("#"+frmgr)); }
			} else {
				var dh = isNaN(p.dataheight) ? p.dataheight : p.dataheight+"px",
				frm = $("<form name='FormPost' id='"+frmgr+"' class='FormGrid' onSubmit='return false;' style='width:100%;overflow:auto;position:relative;height:"+dh+";'></form>").data("disabled",false),
				tbl = $("<table id='"+frmtborg+"' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>");
				showFrm = $($t).triggerHandler("jqGridAddEditBeforeInitData", [$("#"+frmgr), frmoper]);
				if(typeof(showFrm) == "undefined") {
					showFrm = true;
				}
				if(showFrm && onBeforeInit) {
					showFrm = onBeforeInit.call($t, $("#"+frmgr));
				}
				if(showFrm === false) {return;}
				restoreInline();
				$($t.p.colModel).each( function() {
					var fmto = this.formoptions;
					maxCols = Math.max(maxCols, fmto ? fmto.colpos || 0 : 0 );
					maxRows = Math.max(maxRows, fmto ? fmto.rowpos || 0 : 0 );
				});
				$(frm).append(tbl);
				var flr = $("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='"+(maxCols*2)+"'></td></tr>");
				flr[0].rp = 0;
				$(tbl).append(flr);
				//topinfo
				flr = $("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='"+(maxCols*2)+"'>"+rp_ge[$t.p.id].topinfo+"</td></tr>");
				flr[0].rp = 0;
				$(tbl).append(flr);
				// set the id.
				// use carefull only to change here colproperties.
				// create data
				var rtlb = $t.p.direction == "rtl" ? true :false,
				bp = rtlb ? "nData" : "pData",
				bn = rtlb ? "pData" : "nData";
				createData(rowid,$t,tbl,maxCols);
				// buttons at footer
				var bP = "<a href='javascript:void(0)' id='"+bp+"' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",
				bN = "<a href='javascript:void(0)' id='"+bn+"' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>",
				//bS  ="<a href='javascript:void(0)' id='sData' class='fm-button ui-state-default ui-corner-all'>"+p.bSubmit+"</a>",
				//bC  ="<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>"+p.bCancel+"</a>";
				bS  ="<a href='javascript:void(0)' id='sData' class='ui-state-default ui-corner-all'></a>",
				bC  ="<a href='javascript:void(0)' id='cData' class='ui-state-default ui-corner-all'></a>";
				var bt = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='"+frmtborg+"_2'><tbody><tr id='Act_Buttons'><td class='navButton'>"+(rtlb ? bN+bP : bP+bN)+"</td><td class='EditButton'>"+bS+bC+"</td></tr>";
				bt += "<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>"+rp_ge[$t.p.id].bottominfo+"</td></tr>";
				bt += "</tbody></table>";
				if(maxRows >  0) {
					var sd=[];
					$.each($(tbl)[0].rows,function(i,r){
						sd[i] = r;
					});
					sd.sort(function(a,b){
						if(a.rp > b.rp) {return 1;}
						if(a.rp < b.rp) {return -1;}
						return 0;
					});
					$.each(sd, function(index, row) {
						$('tbody',tbl).append(row);
					});
				}
				p.gbox = "#gbox_"+$.jgrid.jqID(gID);
				var cle = false;
				if(p.closeOnEscape===true){
					p.closeOnEscape = false;
					cle = true;
				}
				var tms = $("<span></span>").append(frm).append(bt);
				$.jgrid.createModal(IDs,tms,p,"#gview_"+$.jgrid.jqID($t.p.id),$("#gbox_"+$.jgrid.jqID($t.p.id))[0]);
				if(rtlb) {
					$("#pData, #nData",frmtb+"_2").css("float","right");
					$(".EditButton",frmtb+"_2").css("text-align","left");
				}
				if(rp_ge[$t.p.id].topinfo) {$(".tinfo",frmtb).show();}
				if(rp_ge[$t.p.id].bottominfo) {$(".binfo",frmtb+"_2").show();}
				tms = null;bt=null;
				$("#"+$.jgrid.jqID(IDs.themodal)).keydown( function( e ) {
					var wkey = e.target;
					if ($("#"+frmgr).data("disabled")===true ) {return false;}//??
					if(rp_ge[$t.p.id].savekey[0] === true && e.which == rp_ge[$t.p.id].savekey[1]) { // save
						if(wkey.tagName != "TEXTAREA") {
							$("#sData", frmtb+"_2").trigger("click");
							return false;
						}
					}
					if(e.which === 27) {
						if(!checkUpdates()) {return false;}
						if(cle)	{$.jgrid.hideModal(this,{gb:p.gbox,jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});}
						return false;
					}
					if(rp_ge[$t.p.id].navkeys[0]===true) {
						if($("#id_g",frmtb).val() == "_empty") {return true;}
						if(e.which == rp_ge[$t.p.id].navkeys[1]){ //up
							$("#pData", frmtb+"_2").trigger("click");
							return false;
						}
						if(e.which == rp_ge[$t.p.id].navkeys[2]){ //down
							$("#nData", frmtb+"_2").trigger("click");
							return false;
						}
					}
				});
				if(p.checkOnUpdate) {
					$("a.ui-jqdialog-titlebar-close span","#"+$.jgrid.jqID(IDs.themodal)).removeClass("jqmClose");
					$("a.ui-jqdialog-titlebar-close","#"+$.jgrid.jqID(IDs.themodal)).unbind("click")
					.click(function(){
						if(!checkUpdates()) {return false;}
						$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});
						return false;
					});
				}
				p.saveicon = $.extend([true,"left","ui-icon-disk"],p.saveicon);
				p.closeicon = $.extend([true,"left","ui-icon-close"],p.closeicon);
				// beforeinitdata after creation of the form
				if(p.saveicon[0]===true) {
					/*$("#sData",frmtb+"_2").addClass(p.saveicon[1] == "right" ? 'fm-button-icon-right' : 'fm-button-icon-left')
					.append("<span class='ui-icon "+p.saveicon[2]+"'></span>");*/
					$("#sData",frmtb+"_2").button({icons: {primary: p.saveicon[2]},label:p.bSubmit});
				}
				if(p.closeicon[0]===true) {
					/*$("#cData",frmtb+"_2").addClass(p.closeicon[1] == "right" ? 'fm-button-icon-right' : 'fm-button-icon-left')
					.append("<span class='ui-icon "+p.closeicon[2]+"'></span>");*/
					$("#cData",frmtb+"_2").button({icons: {primary:p.closeicon[2]},label:p.bCancel});
				}
				if(rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
					bS  ="<a href='javascript:void(0)' id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bYes+"</a>";
					bN  ="<a href='javascript:void(0)' id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bNo+"</a>";
					bC  ="<a href='javascript:void(0)' id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+p.bExit+"</a>";
					var ii, zI = p.zIndex  || 999;zI ++;
					if ($.browser.msie && $.browser.version ==6) {
						ii = '<iframe style="display:block;position:absolute;z-index:-1;filter:Alpha(Opacity=\'0\');" src="javascript:false;"></iframe>';
					} else {ii="";}
					$("<div class='ui-widget-overlay jqgrid-overlay confirm' style='z-index:"+zI+";display:none;'>&#160;"+ii+"</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:"+(zI+1)+"'>"+p.saveData+"<br/><br/>"+bS+bN+bC+"</div>").insertAfter("#"+frmgr);
					$("#sNew","#"+$.jgrid.jqID(IDs.themodal)).click(function(){
						postIt();
						$("#"+frmgr).data("disabled",false);
						$(".confirm","#"+$.jgrid.jqID(IDs.themodal)).hide();
						return false;
					});
					$("#nNew","#"+$.jgrid.jqID(IDs.themodal)).click(function(){
						$(".confirm","#"+$.jgrid.jqID(IDs.themodal)).hide();
						$("#"+frmgr).data("disabled",false);
						setTimeout(function(){$(":input","#"+frmgr)[0].focus();},0);
						return false;
					});
					$("#cNew","#"+$.jgrid.jqID(IDs.themodal)).click(function(){
						$(".confirm","#"+$.jgrid.jqID(IDs.themodal)).hide();
						$("#"+frmgr).data("disabled",false);
						$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});
						return false;
					});
				}
				// here initform - only once
				$($t).triggerHandler("jqGridAddEditInitializeForm", [$("#"+frmgr), frmoper]);
				if(onInitializeForm) {onInitializeForm($("#"+frmgr));}
				if(rowid=="_empty" || !rp_ge[$t.p.id].viewPagerButtons) {$("#pData,#nData",frmtb+"_2").hide();} else {$("#pData,#nData",frmtb+"_2").show();}
				$($t).triggerHandler("jqGridAddEditBeforeShowForm", [$("#"+frmgr), frmoper]);
				if(onBeforeShow) { onBeforeShow.call($t, $("#"+frmgr));}
				$("#"+$.jgrid.jqID(IDs.themodal)).data("onClose",rp_ge[$t.p.id].onClose);
				$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, overlay: p.overlay,modal:p.modal});
				if(!closeovrl) {
					$(".jqmOverlay").click(function(){
						if(!checkUpdates()) {return false;}
						$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});
						return false;
					});
				}
				$($t).triggerHandler("jqGridAddEditAfterShowForm", [$("#"+frmgr), frmoper]);
				if(onAfterShow) { onAfterShow.call($t, $("#"+frmgr)); }
				$(".fm-button","#"+$.jgrid.jqID(IDs.themodal)).hover(
					function(){$(this).addClass('ui-state-hover');},
					function(){$(this).removeClass('ui-state-hover');}
				);
				$("#sData", frmtb+"_2").click(function(){
					postdata = {};extpost={};
					$("#FormError",frmtb).hide();
					// all depend on ret array
					//ret[0] - succes
					//ret[1] - msg if not succes
					//ret[2] - the id  that will be set if reload after submit false
					getFormData();
					if(postdata[$t.p.id+"_id"] == "_empty")	{postIt();}
					else if(p.checkOnSubmit===true ) {
						newData = $.extend({},postdata,extpost);
						diff = compareData(newData,rp_ge[$t.p.id]._savedData);
						if(diff) {
							$("#"+frmgr).data("disabled",true);
							$(".confirm","#"+$.jgrid.jqID(IDs.themodal)).show();
						} else {
							postIt();
						}
					} else {
						postIt();
					}
					return false;
				});
				$("#cData", frmtb+"_2").click(function(){
					if(!checkUpdates()) {return false;}
					$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal,onClose: rp_ge[$t.p.id].onClose});
					return false;
				});
				$("#nData", frmtb+"_2").click(function(){
					if(!checkUpdates()) {return false;}
					$("#FormError",frmtb).hide();
					var npos = getCurrPos();
					npos[0] = parseInt(npos[0],10);
					if(npos[0] != -1 && npos[1][npos[0]+1]) {
						$($t).triggerHandler("jqGridAddEditClickPgButtons", ['next',$("#"+frmgr),npos[1][npos[0]]]);
						if($.isFunction(p.onclickPgButtons)) {
							p.onclickPgButtons.call($t, 'next',$("#"+frmgr),npos[1][npos[0]]);
						}
						fillData(npos[1][npos[0]+1],$t,frmgr);
						$($t).jqGrid("setSelection",npos[1][npos[0]+1]);
						$($t).triggerHandler("jqGridAddEditAfterClickPgButtons", ['next',$("#"+frmgr),npos[1][npos[0]]]);
						if($.isFunction(p.afterclickPgButtons)) {
							p.afterclickPgButtons.call($t, 'next',$("#"+frmgr),npos[1][npos[0]+1]);
						}
						updateNav(npos[0]+1,npos[1].length-1);
					}
					return false;
				});
				$("#pData", frmtb+"_2").click(function(){
					if(!checkUpdates()) {return false;}
					$("#FormError",frmtb).hide();
					var ppos = getCurrPos();
					if(ppos[0] != -1 && ppos[1][ppos[0]-1]) {
						$($t).triggerHandler("jqGridAddEditClickPgButtons", ['prev',$("#"+frmgr),ppos[1][ppos[0]]]);
						if($.isFunction(p.onclickPgButtons)) {
							p.onclickPgButtons.call($t, 'prev',$("#"+frmgr),ppos[1][ppos[0]]);
						}
						fillData(ppos[1][ppos[0]-1],$t,frmgr);
						$($t).jqGrid("setSelection",ppos[1][ppos[0]-1]);
						$($t).triggerHandler("jqGridAddEditAfterClickPgButtons", ['prev',$("#"+frmgr),ppos[1][ppos[0]]]);
						if($.isFunction(p.afterclickPgButtons)) {
							p.afterclickPgButtons.call($t, 'prev',$("#"+frmgr),ppos[1][ppos[0]-1]);
						}
						updateNav(ppos[0]-1,ppos[1].length-1);
					}
					return false;
				});
			}
			var posInit =getCurrPos();
			updateNav(posInit[0],posInit[1].length-1);

		});
	},
        //弹出框查看，修改样提示框
        viewGridRow : function(rowid, p){
		p = $.extend({
			top : 0,
			left: 0,
			width: 0,
			height: 'auto',
			dataheight: 'auto',
			modal: false,
			overlay: 30,
			drag: true,
			resize: true,
			jqModal: true,
			closeOnEscape : false,
			labelswidth: '30%',
			closeicon: [],
			navkeys: [false,38,40],
			onClose: null,
			beforeShowForm : null,
			beforeInitData : null,
			viewPagerButtons : true
		}, $.jgrid.view, p || {});
		return this.each(function(){
			var $t = this;
			if (!$t.grid || !rowid) {return;}
			var gID = $t.p.id,
			frmgr = "ViewGrid_"+$.jgrid.jqID( gID  ), frmtb = "ViewTbl_" + $.jgrid.jqID( gID ),
			frmgr_id = "ViewGrid_"+gID, frmtb_id = "ViewTbl_"+gID,
			IDs = {themodal:'viewmod'+gID,modalhead:'viewhd'+gID,modalcontent:'viewcnt'+gID, scrollelm : frmgr},
			onBeforeInit = $.isFunction(p.beforeInitData) ? p.beforeInitData : false,
			showFrm = true,
			maxCols = 1, maxRows=0;
			function focusaref(){ //Sfari 3 issues
				if(p.closeOnEscape===true || p.navkeys[0]===true) {
					setTimeout(function(){$(".ui-jqdialog-titlebar-close","#"+$.jgrid.jqID(IDs.modalhead)).focus();},0);
				}
			}
			function createData(rowid,obj,tb,maxcols){
				var nm, hc,trdata, cnt=0,tmp, dc, retpos=[], ind=false,
				tdtmpl = "<td class='CaptionTD form-view-label' width='"+p.labelswidth+"'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>", tmpl="",
				tdtmpl2 = "<td class='CaptionTD form-view-label'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>",
				fmtnum = ['integer','number','currency'],max1 =0, max2=0 ,maxw,setme, viewfld;
				for (var i =1;i<=maxcols;i++) {
					tmpl += i == 1 ? tdtmpl : tdtmpl2;
				}
				// find max number align rigth with property formatter
				$(obj.p.colModel).each( function() {
					if(this.editrules && this.editrules.edithidden === true) {
						hc = false;
					} else {
						hc = this.hidden === true ? true : false;
					}
					if(!hc && this.align==='right') {
						if(this.formatter && $.inArray(this.formatter,fmtnum) !== -1 ) {
							max1 = Math.max(max1,parseInt(this.width,10));
						} else {
							max2 = Math.max(max2,parseInt(this.width,10));
						}
					}
				});
				maxw  = max1 !==0 ? max1 : max2 !==0 ? max2 : 0;
				ind = $(obj).jqGrid("getInd",rowid);
				$(obj.p.colModel).each( function(i) {
					nm = this.name;
					setme = false;
					// hidden fields are included in the form
					if(this.editrules && this.editrules.edithidden === true) {
						hc = false;
					} else {
						hc = this.hidden === true ? true : false;
					}
					dc = hc ? "style='display:none'" : "";
					viewfld = (typeof this.viewable != 'boolean') ? true : this.viewable;
					if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn' && viewfld) {
						if(ind === false) {
							tmp = "";
						} else {
							if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
								tmp = $("td:eq("+i+")",obj.rows[ind]).text();
							} else {
								tmp = $("td:eq("+i+")",obj.rows[ind]).html();
							}
						}
						setme = this.align === 'right' && maxw !==0 ? true : false;
						var opt = $.extend({}, this.editoptions || {} ,{id:nm,name:nm}),
						frmopt = $.extend({},{rowabove:false,rowcontent:''}, this.formoptions || {}),
						rp = parseInt(frmopt.rowpos,10) || cnt+1,
						cp = parseInt((parseInt(frmopt.colpos,10) || 1)*2,10);
						if(frmopt.rowabove) {
							var newdata = $("<tr><td class='contentinfo' colspan='"+(maxcols*2)+"'>"+frmopt.rowcontent+"</td></tr>");
							$(tb).append(newdata);
							newdata[0].rp = rp;
						}
						trdata = $(tb).find("tr[rowpos="+rp+"]");
						if ( trdata.length===0 ) {
							trdata = $("<tr "+dc+" rowpos='"+rp+"'></tr>").addClass("FormData").attr("id","trv_"+nm);
							$(trdata).append(tmpl);
							$(tb).append(trdata);
							trdata[0].rp = rp;
						}
						//$("td:eq("+(cp-2)+")",trdata[0]).html('<b>'+ (typeof frmopt.label === 'undefined' ? obj.p.colNames[i]: frmopt.label)+'</b>');
                        $("td:eq("+(cp-2)+")",trdata[0]).html((typeof frmopt.label === 'undefined' ? obj.p.colNames[i]: frmopt.label));
						$("td:eq("+(cp-1)+")",trdata[0]).html("<span>"+tmp+"</span>").attr("id","v_"+nm);
						if(setme){
							$("td:eq("+(cp-1)+") span",trdata[0]).css({'text-align':'right',width:maxw+"px"});
						}
						retpos[cnt] = i;
						cnt++;
					}
				});
				if( cnt > 0) {
					var idrow = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='"+ (maxcols*2-1)+"' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='"+rowid+"'/></td></tr>");
					idrow[0].rp = cnt+99;
					$(tb).append(idrow);
				}
				return retpos;
			}
			function fillData(rowid,obj){
				var nm, hc,cnt=0,tmp, opt,trv;
				trv = $(obj).jqGrid("getInd",rowid,true);
				if(!trv) {return;}
				$('td',trv).each( function(i) {
					nm = obj.p.colModel[i].name;
					// hidden fields are included in the form
					if(obj.p.colModel[i].editrules && obj.p.colModel[i].editrules.edithidden === true) {
						hc = false;
					} else {
						hc = obj.p.colModel[i].hidden === true ? true : false;
					}
					if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
						if(nm == obj.p.ExpandColumn && obj.p.treeGrid === true) {
							tmp = $(this).text();
						} else {
							tmp = $(this).html();
						}
						opt = $.extend({},obj.p.colModel[i].editoptions || {});
						nm = $.jgrid.jqID("v_"+nm);
						$("#"+nm+" span","#"+frmtb).html(tmp);
						if (hc) {$("#"+nm,"#"+frmtb).parents("tr:first").hide();}
						cnt++;
					}
				});
				if(cnt>0) {$("#id_g","#"+frmtb).val(rowid);}
			}
			function updateNav(cr,totr){
				if (cr===0) {$("#pData","#"+frmtb+"_2").addClass('ui-state-disabled');} else {$("#pData","#"+frmtb+"_2").removeClass('ui-state-disabled');}
				if (cr==totr) {$("#nData","#"+frmtb+"_2").addClass('ui-state-disabled');} else {$("#nData","#"+frmtb+"_2").removeClass('ui-state-disabled');}
			}
			function getCurrPos() {
				var rowsInGrid = $($t).jqGrid("getDataIDs"),
				selrow = $("#id_g","#"+frmtb).val(),
				pos = $.inArray(selrow,rowsInGrid);
				return [pos,rowsInGrid];
			}

			if ( $("#"+$.jgrid.jqID(IDs.themodal)).html() !== null ) {
				if(onBeforeInit) {
					showFrm = onBeforeInit($("#"+frmgr));
					if(typeof(showFrm) == "undefined") {
						showFrm = true;
					}
				}
				if(showFrm === false) {return;}
				$(".ui-jqdialog-title","#"+$.jgrid.jqID(IDs.modalhead)).html(p.caption);
				$("#FormError","#"+frmtb).hide();
				fillData(rowid,$t);
				if($.isFunction(p.beforeShowForm)) {p.beforeShowForm($("#"+frmgr));}
				$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, jqM: false, overlay: p.overlay, modal:p.modal});
				focusaref();
				$("#cData","#"+frmtb_id+"_2").removeClass("ui-state-focus ui-state-hover");
			} else {
				var dh = isNaN(p.dataheight) ? p.dataheight : p.dataheight+"px";
				var frm = $("<form name='FormPost' id='"+frmgr_id+"' class='FormGrid' style='width:100%;overflow:auto;position:relative;height:"+dh+";'></form>"),
				tbl =$("<table id='"+frmtb_id+"' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>");
				if(onBeforeInit) {
					showFrm = onBeforeInit($("#"+frmgr));
					if(typeof(showFrm) == "undefined") {
						showFrm = true;
					}
				}
				if(showFrm === false) {return;}
				$($t.p.colModel).each( function() {
					var fmto = this.formoptions;
					maxCols = Math.max(maxCols, fmto ? fmto.colpos || 0 : 0 );
					maxRows = Math.max(maxRows, fmto ? fmto.rowpos || 0 : 0 );
				});
				// set the id.
				$(frm).append(tbl);
				createData(rowid, $t, tbl, maxCols);
				var rtlb = $t.p.direction == "rtl" ? true :false,
				bp = rtlb ? "nData" : "pData",
				bn = rtlb ? "pData" : "nData",

				// buttons at footer
				bP = "<a href='javascript:void(0)' id='"+bp+"' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",
				bN = "<a href='javascript:void(0)' id='"+bn+"' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>",
				//bC  ="<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>"+p.bClose+"</a>";
				bC  ="<a href='javascript:void(0)' id='cData' class='ui-state-default ui-corner-all'></a>";
				if(maxRows >  0) {
					var sd=[];
					$.each($(tbl)[0].rows,function(i,r){
						sd[i] = r;
					});
					sd.sort(function(a,b){
						if(a.rp > b.rp) {return 1;}
						if(a.rp < b.rp) {return -1;}
						return 0;
					});
					$.each(sd, function(index, row) {
						$('tbody',tbl).append(row);
					});
				}
				p.gbox = "#gbox_"+$.jgrid.jqID(gID);
				var cle = false;
				if(p.closeOnEscape===true){
					p.closeOnEscape = false;
					cle = true;
				}
				var bt = $("<span></span>").append(frm).append("<table border='0' class='EditTable' id='"+frmtb+"_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='"+p.labelswidth+"'>"+(rtlb ? bN+bP : bP+bN)+"</td><td class='EditButton'>"+bC+"</td></tr></tbody></table>");
				$.jgrid.createModal(IDs,bt,p,"#gview_"+$.jgrid.jqID($t.p.id),$("#gview_"+$.jgrid.jqID($t.p.id))[0]);
				if(rtlb) {
					$("#pData, #nData","#"+frmtb+"_2").css("float","right");
					$(".EditButton","#"+frmtb+"_2").css("text-align","left");
				}
				if(!p.viewPagerButtons) {$("#pData, #nData","#"+frmtb+"_2").hide();}
				bt = null;
				$("#"+IDs.themodal).keydown( function( e ) {
					if(e.which === 27) {
						if(cle)	{$.jgrid.hideModal(this,{gb:p.gbox,jqm:p.jqModal, onClose: p.onClose});}
						return false;
					}
					if(p.navkeys[0]===true) {
						if(e.which === p.navkeys[1]){ //up
							$("#pData", "#"+frmtb+"_2").trigger("click");
							return false;
						}
						if(e.which === p.navkeys[2]){ //down
							$("#nData", "#"+frmtb+"_2").trigger("click");
							return false;
						}
					}
				});
				p.closeicon = $.extend([true,"left","ui-icon-close"],p.closeicon);
				if(p.closeicon[0]===true) {
					/*$("#cData","#"+frmtb+"_2").addClass(p.closeicon[1] == "right" ? 'fm-button-icon-right' : 'fm-button-icon-left')
					.append("<span class='ui-icon "+p.closeicon[2]+"'></span>");修改按钮样式为button组件形式*/
					$("#cData","#"+frmtb+"_2").button({icons: {primary: p.closeicon[2]},label:p.bClose});
				}
				if($.isFunction(p.beforeShowForm)) {p.beforeShowForm($("#"+frmgr));}
				$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, modal:p.modal});
				$(".fm-button:not(.ui-state-disabled)","#"+frmtb+"_2").hover(
					function(){$(this).addClass('ui-state-hover');},
					function(){$(this).removeClass('ui-state-hover');}
				);
				focusaref();
				$("#cData", "#"+frmtb+"_2").click(function(){
					$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: p.onClose});
					return false;
				});
				$("#nData", "#"+frmtb+"_2").click(function(){
					$("#FormError","#"+frmtb).hide();
					var npos = getCurrPos();
					npos[0] = parseInt(npos[0],10);
					if(npos[0] != -1 && npos[1][npos[0]+1]) {
						if($.isFunction(p.onclickPgButtons)) {
							p.onclickPgButtons('next',$("#"+frmgr),npos[1][npos[0]]);
						}
						fillData(npos[1][npos[0]+1],$t);
						$($t).jqGrid("setSelection",npos[1][npos[0]+1]);
						if($.isFunction(p.afterclickPgButtons)) {
							p.afterclickPgButtons('next',$("#"+frmgr),npos[1][npos[0]+1]);
						}
						updateNav(npos[0]+1,npos[1].length-1);
					}
					focusaref();
					return false;
				});
				$("#pData", "#"+frmtb+"_2").click(function(){
					$("#FormError","#"+frmtb).hide();
					var ppos = getCurrPos();
					if(ppos[0] != -1 && ppos[1][ppos[0]-1]) {
						if($.isFunction(p.onclickPgButtons)) {
							p.onclickPgButtons('prev',$("#"+frmgr),ppos[1][ppos[0]]);
						}
						fillData(ppos[1][ppos[0]-1],$t);
						$($t).jqGrid("setSelection",ppos[1][ppos[0]-1]);
						if($.isFunction(p.afterclickPgButtons)) {
							p.afterclickPgButtons('prev',$("#"+frmgr),ppos[1][ppos[0]-1]);
						}
						updateNav(ppos[0]-1,ppos[1].length-1);
					}
					focusaref();
					return false;
				});
			}
			var posInit =getCurrPos();
			updateNav(posInit[0],posInit[1].length-1);
		});
	},
        //弹出框删除，修改提示框
        delGridRow : function(rowids,p) {
		p = $.extend({
			url : '',
			mtype : "post",
			reloadAfterSubmit: true,
			beforeShowForm: null,
			beforeInitData : null,
			afterShowForm: null,
			beforeSubmit: null,
			onclickSubmit: null,
			afterSubmit: null,
			jqModal : true,
			closeOnEscape : false,
			delData: {},
			delicon : [],
			cancelicon : [],
			onClose : null,
			ajaxDelOptions : {},
			processing : false,
			serializeDelData : null,
			useDataProxy : false
		}, $.jgrid.del, p ||{});
		rp_ge[$(this)[0].p.id] = p;
		return this.each(function(){
			var $t = this;
			if (!$t.grid ) {return;}
			if(!rowids) {return;}
			var onBeforeShow = $.isFunction( rp_ge[$t.p.id].beforeShowForm  ),
			onAfterShow = $.isFunction( rp_ge[$t.p.id].afterShowForm ),
			onBeforeInit = $.isFunction(rp_ge[$t.p.id].beforeInitData) ? rp_ge[$t.p.id].beforeInitData : false,
			gID = $t.p.id, onCS = {},
            dtbl = "DelTbl_"+$.jgrid.jqID(gID),postd, idname, opers, oper,
			dtbl_id = "DelTbl_" + gID,
			showFrm = true;
			IDs = {themodal:'delmod'+gID,modalhead:'delhd'+gID,modalcontent:'delcnt'+gID, scrollelm: dtbl};
			if (jQuery.isArray(rowids)) {rowids = rowids.join();}

			var dh = isNaN(rp_ge[$t.p.id].dataheight) ? rp_ge[$t.p.id].dataheight : rp_ge[$t.p.id].dataheight+"px";


			if(onBeforeInit) {
				showFrm = onBeforeInit( $("#"+dtbl) );
				if(typeof(showFrm) == "undefined") {
					showFrm = true;
				}
			}
			if(showFrm === false) {return;}

			if(onBeforeShow) {rp_ge[$t.p.id].beforeShowForm($("#"+dtbl));}


            var okFuc = function(){
					var ret=[true,""];onCS = {};
					var postdata = rowids; //the pair is name=val1,val2,...
					if( $.isFunction( rp_ge[$t.p.id].onclickSubmit ) ) {onCS = rp_ge[$t.p.id].onclickSubmit(rp_ge[$t.p.id], postdata) || {};}
					if( $.isFunction( rp_ge[$t.p.id].beforeSubmit ) ) {ret = rp_ge[$t.p.id].beforeSubmit(postdata);}
					if(ret[0] && !rp_ge[$t.p.id].processing) {
						rp_ge[$t.p.id].processing = true;
						opers = $t.p.prmNames;
						postd = $.extend({},rp_ge[$t.p.id].delData, onCS);
						oper = opers.oper;
						postd[oper] = opers.deloper;
						idname = opers.id;
						postdata = String(postdata).split(",");
						if(!postdata.length) { return false; }
						for( var pk in postdata) {
							if(postdata.hasOwnProperty(pk)) {
								postdata[pk] = $.jgrid.stripPref($t.p.idPrefix, postdata[pk]);
							}
						}
						postd[idname] = postdata.join();
						$(this).addClass('ui-state-active');
                        var ajaxUrl =  rp_ge[$t.p.id].url ? rp_ge[$t.p.id].url : $($t).jqGrid('getGridParam','editurl');
						var ajaxOptions = $.extend({
							url: ajaxUrl,
							type: rp_ge[$t.p.id].mtype,
							data: $.isFunction(rp_ge[$t.p.id].serializeDelData) ? rp_ge[$t.p.id].serializeDelData(postd) : postd,
							complete:function(data,Status){
								if(Status != "success") {
									ret[0] = false;
									if ($.isFunction(rp_ge[$t.p.id].errorTextFormat)) {
										ret[1] = rp_ge[$t.p.id].errorTextFormat(data);
									} else {
                                        jAlert("\""+ajaxUrl+"\""+ I18N.error+". "+Status + " Status: '" + data.statusText + "'. Error code: " + data.status, rp_ge[$t.p.id].caption);
										//ret[1] = Status + " Status: '" + data.statusText + "'. Error code: " + data.status;
									}
								} else {
									// data is posted successful
									// execute aftersubmit with the returned data from server
									if( $.isFunction( rp_ge[$t.p.id].afterSubmit ) ) {
										ret = rp_ge[$t.p.id].afterSubmit(data,postd);
									}
								}
								if(ret[0] === false) {
									$("#DelError>td","#"+dtbl).html(ret[1]);
									$("#DelError","#"+dtbl).show();
								} else {
									if(rp_ge[$t.p.id].reloadAfterSubmit && $t.p.datatype != "local") {
										$($t).trigger("reloadGrid");
									} else {
										if($t.p.treeGrid===true){
												try {$($t).jqGrid("delTreeNode",$t.p.idPrefix+postdata[0]);} catch(e){}
										} else {
											for(var i=0;i<postdata.length;i++) {
												$($t).jqGrid("delRowData",$t.p.idPrefix+ postdata[i]);
											}
										}
										$t.p.selrow = null;
										$t.p.selarrrow = [];
									}
									if($.isFunction(rp_ge[$t.p.id].afterComplete)) {
										setTimeout(function(){rp_ge[$t.p.id].afterComplete(data,postdata);},500);
									}
								}
								rp_ge[$t.p.id].processing=false;
								$("#dData", "#"+dtbl+"_2").removeClass('ui-state-active');
								if(ret[0]) {$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});}
							}
						}, $.jgrid.ajaxOptions, rp_ge[$t.p.id].ajaxDelOptions);


						if (!ajaxOptions.url && !rp_ge[$t.p.id].useDataProxy) {
							if ($.isFunction($t.p.dataProxy)) {
								rp_ge[$t.p.id].useDataProxy = true;
							} else {
								ret[0]=false;ret[1] += " "+$.jgrid.errors.nourl;
							}
						}
						if (ret[0]) {
							if (rp_ge[$t.p.id].useDataProxy) {
								var dpret = $t.p.dataProxy.call($t, ajaxOptions, "del_"+$t.p.id);
								if(typeof(dpret) == "undefined") {
									dpret = [true, ""];
								}
								if(dpret[0] === false ) {
									ret[0] = false;
									ret[1] = dpret[1] || "Error deleting the selected row!" ;
								} else {
									$.jgrid.hideModal("#"+$.jgrid.jqID(IDs.themodal),{gb:"#gbox_"+$.jgrid.jqID(gID),jqm:p.jqModal, onClose: rp_ge[$t.p.id].onClose});
								}
							}
							else {$.ajax(ajaxOptions);}
						}
					}

					if(ret[0] === false) {
						if($("#DelError>td","#"+dtbl).length > 1){
							$("#DelError>td","#"+dtbl).html(ret[1]);
							$("#DelError","#"+dtbl).show();
						}else{
							jAlert(ret[1], rp_ge[$t.p.id].caption);
						}
					}
					return false;
				}
            jConfirm(rp_ge[$t.p.id].msg,rp_ge[$t.p.id].caption,
                     function(r) {if(r){okFuc();}});
                // jAlert(rp_ge[$t.p.id].msg, rp_ge[$t.p.id].caption);
				//$.jgrid.viewModal("#"+$.jgrid.jqID(IDs.themodal),{gbox:"#gbox_"+$.jgrid.jqID(gID),jqm:rp_ge[$t.p.id].jqModal, overlay: rp_ge[$t.p.id].overlay, modal:rp_ge[$t.p.id].modal});
			if(onAfterShow) {rp_ge[$t.p.id].afterShowForm($("#"+dtbl));}

			if(rp_ge[$t.p.id].closeOnEscape===true) {
				setTimeout(function(){$(".ui-jqdialog-titlebar-close","#"+$.jgrid.jqID(IDs.modalhead)).focus();},0);
			}
		});
	},
	//修复锁列功能在ie下高度问题
    setFrozenColumns : function () {
		return this.each(function() {
			if ( !this.grid ) {return;}
			var $t = this, cm = $t.p.colModel,i=0, len = cm.length, maxfrozen = -1, frozen= false;
			// TODO treeGrid and grouping  Support
			if($t.p.subGrid === true || $t.p.treeGrid === true || $t.p.cellEdit === true || $t.p.sortable || $t.p.scroll || $t.p.grouping )
			{
				return;
			}
			if($t.p.rownumbers) { i++; }
			if($t.p.multiselect) { i++; }
	
			// get the max index of frozen col
			while(i<len)
			{
				// from left, no breaking frozen
				if(cm[i].frozen === true)
				{
					frozen = true;
					maxfrozen = i;
				} else {
					// break; 支持所锁列左边有隐藏列
				}
				i++;
			}
			if( maxfrozen>=0 && frozen) {
				var top = $t.p.caption ? $($t.grid.cDiv).outerHeight() : 0,
				hth = $(".ui-jqgrid-htable","#gview_"+$.jgrid.jqID($t.p.id)).height();
				//headers
				if($t.p.toppager) {
					top = top + $($t.grid.topDiv).outerHeight();
				}
				if($t.p.toolbar[0] === true) {
					if($t.p.toolbar[1] != "bottom") {
						top = top + $($t.grid.uDiv).outerHeight();
					}
				}
				$t.grid.fhDiv = $('<div style="position:absolute;left:0px;top:'+top+'px;height:'+hth+'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>');
				$t.grid.fbDiv = $('<div style="position:absolute;left:0px;top:'+(parseInt(top,10)+parseInt(hth,10) + 1)+'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
				$("#gview_"+$.jgrid.jqID($t.p.id)).append($t.grid.fhDiv);
				var htbl = $(".ui-jqgrid-htable","#gview_"+$.jgrid.jqID($t.p.id)).clone(true);
				// groupheader support - only if useColSpanstyle is false
				if($t.p.groupHeader) {
					$("tr.jqg-first-row-header, tr.jqg-third-row-header", htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
					var swapfroz = -1, fdel = -1;
					$("tr.jqg-second-row-header th", htbl).each(function(){
						var cs= parseInt($(this).attr("colspan"),10);
						if(cs) {
							swapfroz = swapfroz+cs;
							fdel++;
						}
						if(swapfroz === maxfrozen) {
							return false;
						}
					});
					if(swapfroz !== maxfrozen) {
						fdel = maxfrozen;
					}
					$("tr.jqg-second-row-header", htbl).each(function(){
						$("th:gt("+fdel+")",this).remove();
					});
				} else {
					$("tr",htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
				}
				$(htbl).width(1);
				// resizing stuff
				$($t.grid.fhDiv).append(htbl)
				.mousemove(function (e) {
					if($t.grid.resizing){ $t.grid.dragMove(e);return false; }
				});
				$($t).bind('jqGridResizeStop.setFrozenColumns', function (e, w, index) {
					var rhth = $(".ui-jqgrid-htable",$t.grid.fhDiv);
					$("th:eq("+index+")",rhth).width( w );
					var btd = $(".ui-jqgrid-btable",$t.grid.fbDiv);
					$("tr:first td:eq("+index+")",btd).width( w );
					//锁定层高度自适应
                    $("tr",btd).each(function(i){
                        $(this).css("height",$("#"+$.jgrid.jqID($t.p.id)+" tr:eq("+i+")").outerHeight());
                    });
				});
				// sorting stuff
				$($t).bind('jqGridOnSortCol.setFrozenColumns', function (index, idxcol) {
	
					var previousSelectedTh = $("tr.ui-jqgrid-labels:last th:eq("+$t.p.lastsort+")",$t.grid.fhDiv), newSelectedTh = $("tr.ui-jqgrid-labels:last th:eq("+idxcol+")",$t.grid.fhDiv);
	
					$("span.ui-grid-ico-sort",previousSelectedTh).addClass('ui-state-disabled');
					$(previousSelectedTh).attr("aria-selected","false");
					$("span.ui-icon-"+$t.p.sortorder,newSelectedTh).removeClass('ui-state-disabled');
					$(newSelectedTh).attr("aria-selected","true");
					if(!$t.p.viewsortcols[0]) {
						if($t.p.lastsort != idxcol) {
							$("span.s-ico",previousSelectedTh).hide();
							$("span.s-ico",newSelectedTh).show();
						}
					}
				});
	
				// data stuff
				//TODO support for setRowData
				$("#gview_"+$.jgrid.jqID($t.p.id)).append($t.grid.fbDiv);
				jQuery($t.grid.bDiv).scroll(function () {
					jQuery($t.grid.fbDiv).scrollTop(jQuery(this).scrollTop());
				});
				if($t.p.hoverrows === true) {
					$("#"+$.jgrid.jqID($t.p.id)).unbind('mouseover').unbind('mouseout');
				}
				$($t).bind('jqGridAfterGridComplete.setFrozenColumns', function () {
					$("#"+$.jgrid.jqID($t.p.id)+"_frozen").remove();
					//jQuery($t.grid.fbDiv).height( jQuery($t.grid.bDiv).height()-16);
	                jQuery($t.grid.fbDiv).height( "auto");//锁定列高度设置为auto
					var btbl = $("#"+$.jgrid.jqID($t.p.id)).clone(true);
					$("tr",btbl).each(function(i){
						//设置锁定层高度
						$(this).css("height",$("#"+$.jgrid.jqID($t.p.id)+" tr:eq("+i+")").outerHeight());
						$("td:gt("+maxfrozen+")",this).remove();
					});
	
					$(btbl).width(1).attr("id",$t.p.id+"_frozen");
					$($t.grid.fbDiv).append(btbl);
					if($t.p.hoverrows === true) {
						$("tr.jqgrow", btbl).hover(
							function(){ $(this).addClass("ui-state-hover"); $("#"+$.jgrid.jqID(this.id), "#"+$.jgrid.jqID($t.p.id)).addClass("ui-state-hover"); },
							function(){ $(this).removeClass("ui-state-hover"); $("#"+$.jgrid.jqID(this.id), "#"+$.jgrid.jqID($t.p.id)).removeClass("ui-state-hover"); }
						);
						$("tr.jqgrow", "#"+$.jgrid.jqID($t.p.id)).hover(
							function(){ $(this).addClass("ui-state-hover"); $("#"+$.jgrid.jqID(this.id), "#"+$.jgrid.jqID($t.p.id)+"_frozen").addClass("ui-state-hover");},
							function(){ $(this).removeClass("ui-state-hover"); $("#"+$.jgrid.jqID(this.id), "#"+$.jgrid.jqID($t.p.id)+"_frozen").removeClass("ui-state-hover"); }
						);
					}
					btbl=null;
				});
				$t.p.frozenColumns = true;
			}
		});
    }
    });
$.extend($.jgrid,{
        // 编辑类型与biz基础录入组件一致，编辑时调用相应组件处理
        createEl : function(eltype,options,vl,autowidth, ajaxso ,v2) {
            var elem = "";
            function bindEv (el, opt) {
                if($.isFunction(opt.dataInit)) {
                    opt.dataInit(el);
                }
                if(opt.dataEvents) {
                    $.each(opt.dataEvents, function() {
                        if (this.data !== undefined) {
                            $(el).bind(this.type, this.data, this.fn);
                        } else {
                            $(el).bind(this.type, this.fn);
                        }
                    });
                }
                return opt;
            }
            function setAttributes(elm, atr) {
                $.each(atr, function(key, value){
                	//如果属性不是function且不是对象，添加到标签属性上
                	if(!$.isFunction(atr[key]) && (typeof value !=="object")) {
                        $(elm).attr(key,value);
                    }
                });
                if(!atr.hasOwnProperty('id')) {
                    $(elm).attr('id', $.jgrid.randId());
                }
            }
            switch (eltype)
            {
                case "textarea" :
                    elem = document.createElement("textarea");
                    elem.className = "textarea";
                    if(autowidth) {
                        if(!options.cols) { $(elem).css({width:"98%"});}
                    } else if (!options.cols) { options.cols = 18; }
                    if(!options.rows) { options.rows = 2; }
                    if(vl=='&nbsp;' || vl=='&#160;' || (vl.length==1 && vl.charCodeAt(0)==160)) {vl="";}
                    //如果textarea字段值有<br>替换为\r\n
                    var reg=new RegExp("<br>","gi");
                    vl= vl.replace(reg,"\r\n");
                    elem.value = vl;
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    $(elem).attr({"role":"textbox","multiline":"true"});
                break;
                case "radio" : 
                    elem = document.createElement("span");
                    var setting = $.extend({},options);
                    setting.value =  v2 ? v2 : vl;
                    setting.id = elem;
                    options.data = null ;
                    options.url = null ;
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    $(elem).attr("role","radio");
                    //避免重复请求数据
                    if(setting.dicData){
 					   setting.data = options.dicData;
 					   setting.url = "";
 					}
                    new biz.radio(setting);
                break;
                case "checkbox" : 
                    elem = document.createElement("span");
                    var setting = $.extend({},options);
                    setting.value =  v2 ? v2 : vl;
                    setting.id = elem;
                    options.data = null ;
                    options.url = null ;
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    $(elem).attr("role","checkbox");
                   //避免重复请求数据
                    if(setting.dicData){
 					   setting.data = options.dicData;
 					   setting.url = "";
 					}
                    new biz.checkbox(setting);
                break;
                case "select" :
                    elem = document.createElement("select");
                    elem.setAttribute("role","select");
                    elem.className = "select";
                    var setting = $.extend({},options);
                    setting.value =  v2 ? v2 : vl;
                    setting.id = elem;
                    options.data = null ;
                    options.url = null ;
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    if(setting.dicData){
 					   setting.data = options.dicData;
 					   setting.url = "";
 					}
                    new biz.select(setting);
                break;
				case "number" :
                    elem = document.createElement("input");
                    elem.type = "text";
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
					var setting = $.extend({},options);
					elem.value =  vl;
                    setting.id = elem;
                    $(elem).addClass("text");
					new biz.number(setting);
                break;
                case "text" :
                case "password" :
                case "button" :
                    var role;
                    if(eltype=="button") { role = "button"; }
                    else { role = "textbox"; }
                    elem = document.createElement("input");
                    elem.type = eltype;
                    elem.value = vl;
                    if(eltype=="text"){
                        elem.className = "text";
                    }else if(eltype=="password"){
                        elem.className = "password";
                    }
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    if(eltype != "button"){
                        if(autowidth) {
                            if(!options.size) { $(elem).css({width:"98%"}); }
                        } else if (!options.size) { options.size = 20; }
                    }
                    $(elem).attr("role",role);
                break;
                case "image" :
                case "file" :
                    elem = document.createElement("input");
                    elem.type = eltype;
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
					if(eltype==="file"){
						var setting = $.extend({},options);
						new biz.file(setting);
					}
                    break;
                case "comboboxlist" :
                    elem = document.createElement("input");
                    elem.type = "text";
                    elem.value = vl;
                    elem.id = options.id;
                    elem.name = options.name;
                    options = bindEv(elem,options);
                    if(options.dicData){
 					   options.data = options.dicData;
 					   options.url = "";
 					}
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    break;
                case "comboboxtree" :
                    elem = document.createElement("input");
                    elem.type = "text";
                    elem.value = vl;
                    elem.id = options.id;
                    elem.name = options.name;
                    options = bindEv(elem,options);
                    if(options.dicData){
 					   options.nodes = options.dicData;
 					}
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    break;
                case "datepicker" :
                    elem = document.createElement("input");
                    elem.type = "text";
                    elem.className = "Wdate";
                    elem.value = vl;
                    if(autowidth) {
                        if(!options.size) { $(elem).css({width:"98%"}); }
                    } else if (!options.size) { options.size = 20; }
                    setAttributes(elem, options);
                    options = bindEv(elem,options);
                    $(elem).live('click',function(){WdatePicker(options)});
                    break;
                case "autocomplete" : 
                	elem = document.createElement("input");
                	elem.type = "text";
                	setAttributes(elem, options);
                    options = bindEv(elem,options);
                    elem.value =  vl;
                    var setting = $.extend({},options);
                    setting.id = elem;
                    $(elem).addClass("text");
                    new biz.autocomplete(setting);
                    break;	
                case "custom" :
                    elem = document.createElement("span");
                    try {
                        if($.isFunction(options.custom_element)) {
                            var celm = options.custom_element.call(this,vl,options);
                            if(celm) {
                                celm = $(celm).addClass("customelement").attr({id:options.id,name:options.name});
                                $(elem).empty().append(celm);
                            } else {
                                throw "e2";
                            }
                        } else {
                            throw "e1";
                        }
                    } catch (e) {
                        if (e=="e1") { this.info_dialog($.jgrid.errors.errcap,"function 'custom_element' "+$.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);}
                        if (e=="e2") { this.info_dialog($.jgrid.errors.errcap,"function 'custom_element' "+$.jgrid.edit.msg.novalue,$.jgrid.edit.bClose);}
                        else { this.info_dialog($.jgrid.errors.errcap,typeof(e)==="string"?e:e.message,$.jgrid.edit.bClose); }
                    }
                    break;
            }
            return elem;
        },
        createSubModal : function(aIDs, content, p, insertSelector, posSelector, appendsel, css) {
            var mw  = document.createElement('div'), rtlsup, self = this;
            css = $.extend({}, css || {});
            rtlsup = $(p.gbox).attr("dir") == "rtl" ? true : false;
            var mc = document.createElement('div');
            $(mc).addClass("ui-jqdialog-content ui-widget-content").attr("id",aIDs.modalcontent);
            $(mc).append(content);
            if (typeof appendsel == "string"){
                $(appendsel).append(mc);
            }else {$(mc).insertBefore(insertSelector);}
            $(mc).css(css);
        },
		// --by zhanghp 2012/08/07 start
		/**
		 * 覆盖jgrid的checkValues方法，每次更新jqGrid内核时需要检查覆写内容，是否修改了覆写的方法
		 * 
		 * @param {objcet} val 被验证的数据值
		 * @param {integer} valref 对应的column的index
		 * @param {objcet} g grid对象的dom对象
		 * @param {objcet} customobject 
		 * @param {objcet} nam 
		 * @param {bool} isEdit 内部参数，如果设置为true，则表示是编辑时触发的此方法，如果grid的editvalid设置为false就不进行校验
		 * @return {object[]}
		 *         验证通过，返回验证信息，如果验证通过返回[true,""，""]失败返回[false,"验证失败消息"]
		 * @author zhanghp 2012-08-07
		 * @override
		 */
		checkValues : function(val, valref, g, customobject, nam, isEdit) {
			//如果设置editvalid属性为false，则不进行编辑时验证
			if("undefined" === typeof(isEdit))
				isEdit = true;
			if(!g.p.editvalid&&isEdit)
				return [true, "", ""];
			var edtrul, i, nm, dft, len;
			if (typeof(customobject) === "undefined") {
				if (typeof(valref) == 'string') {
					for (i = 0, len = g.p.colModel.length; i < len; i++) {
						if (g.p.colModel[i].name == valref) {
							edtrul = g.p.colModel[i].editrules;
							valref = i;
							try {
								nm = g.p.colModel[i].formoptions.label;
							} catch (e) {
							}
							break;
						}
					}
				} else if (valref >= 0) {
					edtrul = g.p.colModel[valref].editrules;
				}
			} else {
				edtrul = customobject;
				nm = nam === undefined ? "_" : nam;
			}
			if (edtrul) {
				if (!nm) {
					nm = g.p.colNames[valref];
				}
				if (edtrul.required === true) {
					if ($.jgrid.isEmpty(val)) {
						return [false, nm + ": " + $.jgrid.edit.msg.required, ""];
					}
				}
				// force required
				var rqfield = edtrul.required === false ? false : true;
				if (edtrul.number === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						if (isNaN(val)) {
							return [false, nm + ": " + $.jgrid.edit.msg.number, ""];
						}
					}
				}
				if (typeof edtrul.minValue != 'undefined'
						&& !isNaN(edtrul.minValue)) {
					if (parseFloat(val) < parseFloat(edtrul.minValue)) {
						return [
								false,
								nm + ": " + $.jgrid.edit.msg.minValue + " "
										+ edtrul.minValue, ""];
					}
				}
				if (typeof edtrul.maxValue != 'undefined'
						&& !isNaN(edtrul.maxValue)) {
					if (parseFloat(val) > parseFloat(edtrul.maxValue)) {
						return [
								false,
								nm + ": " + $.jgrid.edit.msg.maxValue + " "
										+ edtrul.maxValue, ""];
					}
				}
				var filter;
				if (edtrul.email === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						// taken from $ Validate plugin
						filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
						if (!filter.test(val)) {
							return [false, nm + ": " + $.jgrid.edit.msg.email, ""];
						}
					}
				}
				if (edtrul.integer === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						if (isNaN(val)) {
							return [false, nm + ": " + $.jgrid.edit.msg.integer, ""];
						}
						if ((val % 1 !== 0) || (val.indexOf('.') != -1)) {
							return [false, nm + ": " + $.jgrid.edit.msg.integer, ""];
						}
					}
				}
				if (edtrul.date === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						if (g.p.colModel[valref].formatoptions
								&& g.p.colModel[valref].formatoptions.newformat) {
							dft = g.p.colModel[valref].formatoptions.newformat;
						} else {
							dft = g.p.colModel[valref].datefmt || "Y-m-d";
						}
						if (!$.jgrid.checkDate(dft, val)) {
							return [
									false,
									nm + ": " + $.jgrid.edit.msg.date + " - " + dft,
									""];
						}
					}
				}
				if (edtrul.time === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						if (!$.jgrid.checkTime(val)) {
							return [
									false,
									nm + ": " + $.jgrid.edit.msg.date
											+ " - hh:mm (am/pm)", ""];
						}
					}
				}
				if (edtrul.url === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
						if (!filter.test(val)) {
							return [false, nm + ": " + $.jgrid.edit.msg.url, ""];
						}
					}
				}
				if (edtrul.custom === true) {
					if (!(rqfield === false && $.jgrid.isEmpty(val))) {
						if ($.isFunction(edtrul.custom_func)) {
							var ret = edtrul.custom_func.call(g, val, nm);
							if ($.isArray(ret)) {
								return ret;
							} else {
								return [false, $.jgrid.edit.msg.customarray, ""];
							}
						} else {
							return [false, $.jgrid.edit.msg.customfcheck, ""];
						}
					}
				}
				//添加校验，与validate一致start
				if (edtrul.string === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter = /^[\u0391-\uFFE5\w]+$/;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_specialSignal, ""];
                        }
                    }
                }
                if (edtrul.stringCH === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter = /[\u4E00-\u9FA5]/g;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_chineseOnly, ""];
                        }
                    }
                }
                if (edtrul.stringEN === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter = /^[A-Za-z]+$/g;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_letterOnly, ""];
                        }
                    }
                }
                if (edtrul.ip === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
                        if (!(filter.test(val)&&(RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256))) {
                            return [false, nm + ": " + I18N.validator_IP, ""];
                        }
                    }
                }
                if (edtrul.port === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!(val < 65536 && val > 0)) {
                            return [false, nm + ": " + I18N.validator_Port, ""];
                        }
                    }
                }
                if (edtrul.postalcode === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter =/^[0-9]{6}$/;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_Postalcode, ""];
                        }
                    }
                }
                if (edtrul.mobile === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter =/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
                        if (!(filter.test(val) && val.length == 11)) {
                            return [false, nm + ": " + I18N.validator_mobile, ""];
                        }
                    }
                }
                if (edtrul.alnum === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter =/^[a-zA-Z0-9]+$/;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_alnum, ""];
                        }
                    }
                }
                if (edtrul.naturalnum === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter =/^[0-9]+$/;
                        if (!(filter.test(val) && val>0)) {
                            return [false, nm + ": " + I18N.validator_naturalnum, ""];
                        }
                    }
                }
                if (edtrul.idcardno === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!isIdCardNo(val)) {
                            return [false, nm + ": " + I18N.validator_idcardno, ""];
                        }
                    }
                }
                if (edtrul.time === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter =/^(\d{2}):(\d{2}):(\d{2})\s*([ap]m)?$/;
                        if (!filter.test(val)) {
                            return [false, nm + ": " + I18N.validator_time, ""];
                        }
                    }
                }
                if (typeof edtrul.minlength != 'undefined' && !isNaN(edtrul.minlength)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val).length>=edtrul.minlength)) {
                            return [false, nm + ": " + I18N.validator_minlength_1 + edtrul.minlength + I18N.validator_minlength_2, ""];
                        }
                    }
                }
                if (typeof edtrul.maxlength != 'undefined' && !isNaN(edtrul.maxlength)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val).length<=edtrul.maxlength)) {
                            return [false, nm + ": " + I18N.validator_maxlength_1 + edtrul.maxlength + I18N.validator_maxlength_2, ""];
                        }
                    }
                }
                if (typeof edtrul.rangelength != 'undefined' && $.isArray(edtrul.rangelength)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val).length >= edtrul.rangelength[0] && $.trim(val).length <= edtrul.rangelength[1])) {
                            return [false, nm + ": " + I18N.validator_rangelength_1+ edtrul.rangelength[0] + I18N.validator_rangelength_2+edtrul.rangelength[1]+I18N.validator_rangelength_3, ""];
                        }
                    }
                }
                if (typeof edtrul.min != 'undefined' && !isNaN(edtrul.min)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val)>=edtrul.min)) {
                            return [false, nm + ": " + I18N.validator_min_1 + edtrul.min + I18N.validator_min_2, ""];
                        }
                    }
                }
                if (typeof edtrul.max != 'undefined' && !isNaN(edtrul.max)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val)<=edtrul.max)) {
                            return [false, nm + ": " + I18N.validator_max_1 + edtrul.max + I18N.validator_max_2, ""];
                        }
                    }
                }
                if (typeof edtrul.range != 'undefined' && $.isArray(edtrul.range)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($.trim(val) >= edtrul.range[0] && $.trim(val).length <= edtrul.range[1])) {
                            return [false, nm + ": " + I18N.validator_range_1+ edtrul.range[0] + I18N.validator_range_2+edtrul.range[1]+I18N.validator_range_3, ""];
                        }
                    }
                }
                if (edtrul.creditcard === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                            var nCheck = 0,
                                nDigit = 0,
                                bEven = false;
                            value = val.replace(/\D/g, "");

                            for (var n = val.length - 1; n >= 0; n--) {
                                var cDigit = val.charAt(n);
                                var nDigit = parseInt(cDigit, 10);
                                if (bEven) {
                                    if ((nDigit *= 2) > 9)
                                        nDigit -= 9;
                                }
                                nCheck += nDigit;
                                bEven = !bEven;
                            }

                        if (/[^0-9 -]+/.test(val) || !((nCheck % 10) == 0)) {
                            return [false, nm + ": " + I18N.validator_creditcard, ""];
                        }
                    }
                }
                if (typeof edtrul.accept != 'undefined' && !$.jgrid.isEmpty(edtrul.accept)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        var param = edtrul.accept;
                        param = typeof param == "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
                        if (!val.match(new RegExp(".(" + param + ")$", "i"))) {
                            return [false, nm + ": " + I18N.validator_accept, ""];
                        }
                    }
                }
                if (typeof edtrul.equalTo != 'undefined' && !$.jgrid.isEmpty(edtrul.equalTo)) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!($(edtrul.equalTo).val() === val)) {
                            return [false, nm + ": " + I18N.validator_equalTo, ""];
                        }
                    }
                }
                if (edtrul.digits === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!( /^\d+$/.test(val))) {
                            return [false, nm + ": " + I18N.validator_digits, ""];
                        }
                    }
                }
				if (edtrul.number === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!( /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(val))) {
                            return [false, nm + ": " + I18N.validator_number, ""];
                        }
                    }
                }
				if (edtrul.dateISO === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!( /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(val))) {
                            return [false, nm + ": " + I18N.validator_dateISO, ""];
                        }
                    }
                }
                //添加校验，与validate一致end
			}
			return [true, "", ""];
		},
		// --by zhanghp 2012/08/07 end
		info_dialog : function(caption, content,c_b, modalopt) {
			// showWarn(content,3000);
			new biz.alert({type:"alert",message:content,title:I18N.warn}) ;
			new biz.alert({type:"hide",times:3000}) ;
		}
    });
 //格式化时替换{columnName}为当前行列值
 $.fmatter.replacePara = function (inString,rowData,opts){
    for ( var columnName in rowData ){
       if( inString.indexOf(columnName)){
       		inString = inString.replace("{"+columnName+"}" , rowData[columnName]);
       }
    }
    return inString;
 };
 //编辑类型为radio、checkbox、select、comboboxlist、comboboxtree时使用,获取value对应name或name对应的value
 $.fmatter.getValue = function (data,value,editType,getType,idKey){
     idKey = idKey ? idKey : "id" ;//comboboxtree默认值属性为id
     for(var i = 0,dataLength = data.length;i < dataLength; i++){
     	 //为兼容radio、checkbox的旧版格式，先判断是否存在label，否则去name
         if(getType == "value"){
             if(((editType == "radio" || editType == "checkbox") ?  (data[i].label ? data[i].label :data[i].name) : data[i].name) == value)  {
                 return  editType == "comboboxtree" ? data[i][idKey] : data[i].value;
             }else{if(i == (dataLength-1)) return value;}
         }else{
             if(data[i].value == value || data[i][idKey] == value)  {
                 return (editType == "radio" || editType == "checkbox") ?  (data[i].label ? data[i].label :data[i].name) : data[i].name ;
             }else{if(i == (dataLength-1)) return value;}
         }
     }
 };
 //编辑类型为radio、checkbox、select、comboboxlist、comboboxtree时使用,获取列属性dicdata属性（用于getValue参数）
 $.fmatter.getDicData = function (opts,cm){
     var dicData ,temp ;
     if(cm.editoptions.dicData){
         dicData = cm.editoptions.dicData ;
     }else{
         if(cm.edittype == "comboboxtree"){
             if(cm.editoptions.nodes){
                 temp = cm.editoptions.nodes ;
             }else if(cm.editoptions.async.url){
                 temp = cm.editoptions.async.url ;
             }
         }else{
             if(cm.editoptions.data){
                 temp = cm.editoptions.data ;
             }else if(cm.editoptions.url){
                 temp = cm.editoptions.url ;
             }
         }
         if(typeof temp == "string"){
             $.ajax({
                 url:temp,
                 dataType: "json",
                 async:false,
                 success: function(data){
                     cm.editoptions.dicData = data;
                     dicData = data;
                 },
                 error:function(xhr, error, thrown){
                     //biz.utils.loadError(xhr,error, thrown);
                	 if($.isFunction(opts.loadError)) { opts.loadError.call(opts,xhr, error, thrown); }
                 }
             })
         }else if(typeof temp == "object"){
             cm.editoptions.dicData = temp ;
             dicData = temp;
         }else{
             dicData = "";
         }
     }
     return dicData ;
 };
 //格式化为密码
 $.fn.fmatter.password = function(cellval, opts) {
        var op =  $.extend({},opts.colModel.formatoptions);
		if(!$.fmatter.isEmpty(cellval)) {
            var tempval = cellval.toString();
            tempval = tempval.replace(/./g,op.passwordStr?op.passwordStr:opts.passwordStr);  // 替换所有字符
			return "<span value=\"" + cellval + "\">" + tempval + "</span>";
		}else {
			//fix 在ie8 下 空值返回的是空格
			return $.fn.fmatter.defaultFormat(cellval,opts )=="&#160;"?"":$.fn.fmatter.defaultFormat(cellval,opts );
		}
 };
 //创建img格式化,支持多个img，设置各自属性
 $.fn.fmatter.img = function(cellval, opts, rowData) {
		var op = {baseUrl: opts.baseUrl,showAction:opts.showAction,imgsOptions:opts.imgsOptions||[],suffix:opts.suffix||""},
		target = "", idUrl,imgString="",$p=$('#'+opts.gid)[0].p;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}

        if(op.imgsOptions.length> 0){
        	//通过闭包把i作为参数转化为局部变量k，否则事件绑定有误
            for(var i=0;i<op.imgsOptions.length;i++)(function(k){
                 var opt = $.extend({},op,op.imgsOptions[k]) ;
                 //获取baseUrl、showAction对应列值
                 var bl = $.fmatter.replacePara(opt.baseUrl,rowData,opts),
                     cm = $.fmatter.replacePara(opt.showAction,rowData,opts);
                 var elem = document.createElement("img");
                 //按钮id，保证其唯一性
                 $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId+"_"+k);
                 $(elem).attr("src",bl + cm + opt.suffix);
                 for(var param in opt){
                     //如为事件则绑定到元素上
                     if($.isFunction(opt[param])){
                         $("#"+elem.id).die(param).live(param,function(e){
                                 opt[e.type].call(this,opts.rowId,cellval,opts);
                         })
                     }else if((typeof opt[param] !== "object") && param!=="baseUrl" && param!=="showAction"){
                         $(elem).attr(param,opt[param]);
                     }
                 }
                imgString += elem.outerHTML ;
            })(i)
            return imgString;
        }else{
        	 //获取baseUrl、showAction对应列值
             var bl = $.fmatter.replacePara(op.baseUrl,rowData,opts),
                 cm = $.fmatter.replacePara(op.showAction,rowData,opts);
             var elem = document.createElement("img");
             //按钮id，保证其唯一性
             $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId);
             $(elem).attr("src",bl + cm + op.suffix);
             for(var param in op){
                 //如为事件则绑定到元素上
                 if($.isFunction(op[param])){
                     $("#"+elem.id).die(param).live(param,function(e){
                             op[e.type].call(this,opts.rowId,cellval,opts);
                     })
                 }else if((typeof op[param] !== "object") && param!=="baseUrl" && param!=="showAction"){
                     $(elem).attr(param,op[param]);
                 }
             }
             return   elem.outerHTML;
        }
	};
 //创建button格式化,支持多个button，设置各自属性
 $.fn.fmatter.button = function(cellval, opts) {
		var op = {buttonsOptions:[]},
		target = "", idUrl,buttonString="";
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}

        if(op.buttonsOptions.length> 0){
            for(var i=0;i<op.buttonsOptions.length;i++)(function(k){
                 var opt = $.extend({},op,op.buttonsOptions[k]) ;
                 var elem = document.createElement("input");
                 $(elem).attr("type","button");
                 //按钮id，保证其唯一性
                 $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId+"_"+k);
                 if(opt.value == undefined){
                     $(elem).attr("value",cellval);
                 }
                 for(var param in opt){
                     //如为事件则绑定到元素上
                     if($.isFunction(opt[param])){
                        $("#"+elem.id).die(param).live(param,function(e){
                             opt[e.type].call(this,opts.rowId,cellval,opts);
                        })
                     }else if((typeof opt[param] !== "object")){
                         $(elem).attr(param,opt[param]);
                     }
                 }
                buttonString += elem.outerHTML ;
            })(i)
            return buttonString;
        }else{
             var elem = document.createElement("input");
             $(elem).attr("type","button");
             $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId);
             if(op.value == undefined){
                 $(elem).attr("value",cellval);
             }
             for(var param in op){
                 if($.isFunction(op[param])){
                    $("#"+elem.id).die(param).live(param,function(e){
                         op[e.type].call(this,opts.rowId,cellval,opts);
                    })
                 }else{
                     $(elem).attr(param,op[param]);
                 }
             }
             return   elem.outerHTML;
        }
	};
 //link类型格式化 修改支持多个link
 $.fn.fmatter.showlink = function(cellval, opts, rowData) {
		var op = {baseLinkUrl: opts.baseLinkUrl,showAction:opts.showAction, addParam: opts.addParam || "", target: opts.target, idName: opts.idName,linksOptions:opts.linksOptions||[]},
		target = "", idUrl,linkString="";
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
        if(op.linksOptions.length> 0){
            for(var i=0;i<op.linksOptions.length;i++)(function(k){
                var opt = $.extend({},op,op.linksOptions[k]),
                	bl = $.fmatter.replacePara(opt.baseLinkUrl,rowData,opts),
                	cm = $.fmatter.replacePara(opt.showAction,rowData,opts),
                	pm = $.fmatter.replacePara(opt.addParam,rowData,opts),
                	elem = document.createElement("a");
                $(elem).attr("class","showlink");
                $(elem).attr("href",bl+ cm + '?'+ opt.idName+'='+opts.rowId+pm);
                //按钮id，保证其唯一性
                $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId+"_"+k);
                if(opt.opeName) {
                     $(elem).text(opt.opeName);
                }else if($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)){
                     $(elem).text(cellval);
                }
                for(var param in opt){
                     //如为事件则绑定到元素上
                     if($.isFunction(opt[param])){
                        $("#"+elem.id).die(param).live(param,function(e){
                             opt[e.type].call(this,opts.rowId,cellval,opts);
                        })
                     }else if( opt[param]!="" && param!="baseLinkUrl" && param!="showAction" && param!="idName"  && param!="addParam"){
                         $(elem).attr(param,opt[param]);
                     }
                }
                linkString += ($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval) || opt.opeName )?elem.outerHTML:$.fn.fmatter.defaultFormat(cellval,opts) ;
            })(i)
            return linkString;
        }else{
        	 var bl = $.fmatter.replacePara(op.baseLinkUrl,rowData,opts),
        	 	 cm = $.fmatter.replacePara(op.showAction,rowData,opts),
        	 	 pm = $.fmatter.replacePara(op.addParam,rowData,opts),
        	 	 elem = document.createElement("a");
             $(elem).attr("class","showlink");
             $(elem).attr("href",bl + cm + '?'+ op.idName+'='+opts.rowId+pm);
             //按钮id，保证其唯一性
             $(elem).attr("id",opts.gid+"_"+opts.colModel.name+"_"+opts.rowId);
             if(op.opeName) {
                  $(elem).text(op.opeName);
             }else if($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)){
                  $(elem).text(cellval);
             }
             for(var param in op){
                  //如为事件则绑定到元素上
                 if($.isFunction(op[param])){
                     $("#"+elem.id).die(param).live(param,function(e){
                          op[e.type].call(this,opts.rowId,cellval,opts);
                     })
                  }else if( op[param]!="" && param!="baseLinkUrl" && param!="showAction" && param!="idName" && param!="addParam"){
                      $(elem).attr(param,op[param]);
                  }
             }
             return  ($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval) || op.opeName )?elem.outerHTML:$.fn.fmatter.defaultFormat(cellval,opts) ;
        }
	};
 //checkbox格式化增加筛选function filter
 $.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds,$t= this;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
        //数据筛选接口
        if($.isFunction(op.filter) && (op.filter(cval))) {
			return cval ;
	    }else{
            if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
            if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = $.fn.fmatter.defaultFormat(cval,op);}
            cval=cval+"";cval=cval.toLowerCase();
            var bchk = cval.search(/(false|0|no|off)/i)<0 ? " checked='checked' " : "";
            return "<input type=\"checkbox\" " + bchk  + " value=\""+ cval+"\" offval=\"no\" "+ds+ "/>";
        }
 };
 //编辑类型为radio、checkbox、select的默认格式化,显示name
 $.fn.fmatter.dictionary = function(cellval,opts,rwdat,act) {
     var colmodel = opts.colModel, cellname = "" ,tempArray ,
         data = $.fmatter.getDicData(opts,colmodel),eidttype = opts.colModel.edittype;
     //数据为空提示用户
     if( typeof cellval == "undefined"){
         cellname = "" ;
     }else if(data == ""){
         jAlert(I18N.param_error + "$.fn.fmatter.dictionary()" , I18N.promp);
         cellname = cellval ;
     }else{
         if(eidttype == "checkbox" || eidttype == "comboboxlist" || eidttype == "comboboxtree"){
             tempArray = $.isArray(cellval) ? cellval : String(cellval).split(",");
             for(var p= 0,checkLength = tempArray.length;p < checkLength;p++){
                 if(eidttype == "comboboxtree"){
                     try{ //如idKey没定义会报错，采用默认idKey为id处理
                         var idKey = colmodel.editoptions.data.simpleData.idKey ;
                         cellname  = cellname + (cellname?",":"") +  $.fmatter.getValue(data,tempArray[p],eidttype,"name",idKey);
                     }catch(e){
                         cellname  = cellname + (cellname?",":"") + $.fmatter.getValue(data,tempArray[p],eidttype);
                     }
                 }else{
                    cellname  = cellname + (cellname?",":"") + $.fmatter.getValue(data,tempArray[p],eidttype);
                 }
             }
         }else{
             cellname  =  $.fmatter.getValue(data,cellval,eidttype);
         }
     }
     return cellname ;
 };
 //checkbox反格式化增加筛选function filter
 $.unformat = function (cellval,options,pos,cnt) {
		// specific for jqGrid only
		var ret, formatType = options.colModel.formatter,
		op =options.colModel.formatoptions || {}, sep,
		re = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
		unformatFunc = options.colModel.unformat||($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat);
		if(typeof unformatFunc !== 'undefined' && $.isFunction(unformatFunc) ) {
			ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
		} else if(!$.fmatter.isUndefined(formatType) && $.fmatter.isString(formatType) ) {
			var opts = $.jgrid.formatter || {}, stripTag;
			switch(formatType) {
                case 'password':
                    ret = ($("span",cellval).length === 0) ? $(cellval).text():$("span",cellval).attr("value");
                    break;
				case 'integer' :
					op = $.extend({},opts.integer,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,'');
					break;
				case 'number' :
					op = $.extend({},opts.number,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,"").replace(op.decimalSeparator,'.');
					break;
				case 'currency':
					op = $.extend({},opts.currency,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text();
					if (op.prefix && op.prefix.length) {
						ret = ret.substr(op.prefix.length);
					}
					if (op.suffix && op.suffix.length) {
						ret = ret.substr(0, ret.length - op.suffix.length);
					}
					ret = ret.replace(stripTag,'').replace(op.decimalSeparator,'.');
					break;
				case 'checkbox':
                     //数据筛选接口
                    if($.isFunction(options.colModel.formatoptions.filter) && (options.colModel.formatoptions.filter($(cellval).text()))) {
                        return $(cellval).text() ;
                    }else{
                        var cbv = (options.colModel.editoptions) ? options.colModel.editoptions.value.split(":") : ["Yes","No"];
                        ret = $('input',cellval).is(":checked") ? cbv[0] : cbv[1];
                    }
					break;
				case 'select' :
					ret = $.unformat.select(cellval,options,pos,cnt);
					break;
				case 'dictionary' :
                    ret = $(cellval).attr("value");
                    break;
				case 'actions':
					return "";
				default:
					ret= $(cellval).text();
			}
		}
		return ret !== undefined ? ret : cnt===true ? $(cellval).text() : $.jgrid.htmlDecode($(cellval).html());
};
$.unformat.select = function (cellval,options,pos,cnt) {
	// Spacial case when we have local data and perform a sort
	// cnt is set to true only in sortDataArray
	var ret = [];
	var cell = $(cellval).text();
	if(cnt===true) {return cell;}
	var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
	sep = op.separator === undefined ? ":" : op.separator,
	delim = op.delimiter === undefined ? ";" : op.delimiter;
	
	if(op.value){
		var oSelect = op.value,
		msl =  op.multiple === true ? true : false,
		scell = [], sv;
		if(msl) {scell = cell.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
		if ($.fmatter.isString(oSelect)) {
			var so = oSelect.split(delim), j=0;
			for(var i=0; i<so.length;i++){
				sv = so[i].split(sep);
				if(sv.length > 2 ) {
					sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
				}					
				if(msl) {
					if($.inArray(sv[1],scell)>-1) {
						ret[j] = sv[0];
						j++;
					}
				} else if($.trim(sv[1])==$.trim(cell)) {
					ret[0] = sv[0];
					break;
				}
			}
		} else if($.fmatter.isObject(oSelect) || $.isArray(oSelect) ){
			if(!msl) {scell[0] =  cell;}
			ret = $.map(scell, function(n){
				var rv;
				$.each(oSelect, function(i,val){
					if (val == n) {
						rv = i;
						return false;
					}
				});
				if( typeof(rv) != 'undefined' ) {return rv;}
			});
		}
		return ret.join(", ");
	} else {
		return cell || "";
	}
};
$.unformat.date = function (cellval, opts) {
	var op = $.jgrid.formatter.date || {};
	if(!$.fmatter.isUndefined(opts.formatoptions)) {
		op = $.extend({},op,opts.formatoptions);
	}		
	if(!$.fmatter.isEmpty(cellval)) {
		return $.fmatter.util.DateFormat(op.newformat,cellval,op.srcformat,op);
	} else {
		return $.fn.fmatter.defaultFormat(cellval, opts);
	}
};
biz.grid = biz.createUI(function(options){
    if(typeof options == "object"){
         var me = this;
         me.target = options.id;
         me.uiType = 'grid'  ;
         options.target = options.id;
         //把扩展方法加到grid组件上
         $.extend($.fn.jqGrid,this.methods||{});
         //部分内部方法需要扩展到 $.jgrid 上面
         $.extend($.jgrid,this._methods||{});
    }else if(typeof options == 'string'){
         //调用jqgrid方法，在grid渲染之前调用方法必须用此调用方式
         //使用方式：biz.grid("#gridid","方法名",参数1,参数2……);
	     var tempValue,args = $.makeArray(arguments).slice(1);
	     $(arguments[0]).each(function(){
	              tempValue =  $(this).jqGrid.apply($(this),args);
	     })
	     return tempValue;
    }
}).extend({
    init:function(opts){
	       //opts =  $.extend({}, this.defaults || {} ,opts ) ;
	       //如果导航栏类型为自定义类型，则做相应处理
	       if(opts.navtype == "bottom" || opts.navtype == "top" || opts.navtype == "both" || opts.navtype == "none" || opts.navtype == "topRight"){
	           if(opts.navtype !== "none")opts.navbar = opts.pager;
	           if(opts.navtype == "bottom" ||opts.navtype == "none"){
	                 opts.toppager =  false;
	           }else{
	                 opts.toppager =  true;
	           }
	           if(opts.navtype == "topRight"){
                   opts.pagerpos = (opts.pagerpos == "center") ? "left" : opts.pagerpos;
                   opts.recordpos = (opts.recordpos == "right") ? "center" : opts.recordpos;
                   opts.navopt = $.extend({},{position:"right",floatp:"right"},opts.navopt);
               }
	       }
	       //如果编辑方式为自定义类型，做相应默认设置
	       if(opts.editway == "cell"){
	             opts.navopt = $.extend({},{edit:false,view:false,//导航栏默认属性*/
	      	        addfunc:function(rowid){
	      	        	$(opts.target).jqGrid("saveEditCell");//保存处于编辑状态的单元格*/
	      	        	$(opts.target).jqGrid("addLocalRow",opts.pAdd);} ,//新增按钮处理*/
	      	        delfunc:function(rowid){$(opts.target).jqGrid("delLocalRow",rowid)}},opts.navopt); //删除按钮处理*/
	      	     opts.cellEdit = true	//单元格是否可编辑*/;
	       }else if(opts.editway == "row"){
	             opts.navopt = $.extend({},{view:false,edit:false,add:false,del:true},opts.navopt);  //导航栏默认属性
	       }
	       //分页栏类型为simple时分页栏相关属性值设置
	       if(opts.pagerType == "simple"){
               opts.pginput = false;
               opts.pgtext = "";
               opts.rowList = [];
           }
	      //单元格td添加value属性 
           function getCellValue(rowId,val,rowObject,cm,rdata){
               var values = "",dicData,tempArray = [];
               dicData = $.fmatter.getDicData(opts,cm);
               //数据为空提示用户
               if(dicData == ""){
                   jAlert(I18N.param_error + "$.fn.fmatter.dictionary()" , I18N.promp);
                   values = val ;
               }else if( typeof val == "undefined"){//新增行val为undefined
                   values = "" ;
               }else{
                   if(cm.edittype == "checkbox" || cm.edittype == "comboboxlist" || cm.edittype == "comboboxtree"){
                       tempArray = $.isArray(val) ? val : String(val).split(",");
                       for(var p= 0,checkLength = tempArray.length;p < checkLength;p++){
                           if(cm.edittype == "comboboxtree"){
                               try{ //如idKey没定义会报错，采用默认idKey为id处理
                                   var idKey = cm.editoptions.data.simpleData.idKey ;
                                   values  = values + (values?",":"") +  $.fmatter.getValue(dicData,tempArray[p],cm.edittype,"value",idKey);
                               }catch(e){
                                   values  = values + (values?",":"") + $.fmatter.getValue(dicData,tempArray[p],cm.edittype,"value");
                               }
                           }else{
                                values  = values + (values?",":"") + $.fmatter.getValue(dicData,tempArray[p],cm.edittype,"value");
                           }
                       }
                   }else{
                       values = $.fmatter.getValue(dicData,val,cm.edittype,"value");
                   }
               }
               return "value=" + values;
           }
           //初始化行数据时，给编辑类型为radio、checkbox、select、comboboxlist、comboboxtree、password添加默认处理函数
           for(var i = 0,colLength = opts.colModel.length; i < colLength ; i++){
               var colContent = opts.colModel[i] ;
               if(typeof colContent != "undefined" && typeof colContent.editable != "undefined" && colContent.editable){
            	   if(typeof colContent.edittype == "undefined"){colContent.edittype = "text";}
                   switch(colContent.edittype){
                       case "radio":
                       case "checkbox":
                       case "select":
                       case "comboboxlist":
                       case "comboboxtree":
                           if(typeof colContent.cellattr == "undefined")colContent.cellattr = getCellValue ;
                           colContent.formatter = "dictionary";
                           break;
                       case "password":
                           colContent.formatter = !!colContent.formatter ? colContent.formatter : "password";
                           break;
                       default:
                           break;
                   }
               }
           }
           //如设置为单选，多选自动设置为true（单选在多选基础上改造而成）
           if(opts.singleselect){opts.multiselect = true;}
	       var returnObj = $(opts.target).jqGrid(opts) ;
	       //把grid方法直接绑定到返回对象上
	       $.extend(returnObj , returnObj.jqGrid) ;
	       //自适应大小
	       returnObj.setGridWidth(opts.width);
	       // returnObj.setGridHeight(opts.height);
	       if((opts.width == "auto" || opts.width == "100%") && opts.shrinkToFit!==false ){
               $(window).bind("resize.gridwidth."+$(opts.id).attr("id"),function(){
                    returnObj.setGridWidth("auto");
               });
           }
	
	       if(opts.navbar!==""){
	          //导航栏初始化
	    	  returnObj.navGrid(opts.navbar,opts.navopt,opts.pEdit,opts.pAdd,opts.pDel,opts.pSearch,opts.pView);
	       }
	       //导航、分页栏位置调整
	       returnObj.navGridposition(opts);
	       //如编辑方式为行编辑，则对导航栏进行行编辑渲染
	       if(opts.editway == "row"){
	    	   var inlineTar = opts.navtype == "bottom"?opts.pager:(opts.navtype == "top"?opts.id+"_toppager":(opts.navtype == "none"?"":opts.pager+" , "+opts.id+"_toppager"))
	           if(inlineTar!=="")$(inlineTar).each(function(){returnObj.inlineNav(this,opts.rownavopt||{})});
	       }
	       //修复集成到portal里ie下分页栏布局错位问题
	       $(".ui-pager-control > .ui-pg-table").attr("style","width: 100%;  height: 100%;");
	       //实现首列为radio功能
	       if(opts.singleselect){
	            function sigleselect(){
	                var ids = $(opts.target).jqGrid('getDataIDs');
	                for (var i=0; i<ids.length; i++) {
	                    var temp = {},cl = ids[i],ret = $(opts.target).jqGrid('getRowData', cl),
	                    bnEdt = "<input type='radio' class ='cbox' role='radio' name="+ $(opts.target)[0].id +"_cb"  +" value='" + cl +"' />";
	                    temp.cb = bnEdt;
	                    $(opts.target).jqGrid('setRowData', cl, temp);
	                }
	            }
	            //选中行时check所在行radio
	            $(opts.target).on("jqGridSelectRow",function(obj,id){
					var radioEl = $("input[name="+ $(opts.target)[0].id +"_cb][value=" + id +"]",this) ;
					$(".ui-state-highlight",this).removeClass("ui-state-highlight");
					radioEl.parentsUntil('tbody').addClass("ui-state-highlight") ;
					radioEl[0].checked = true;
					$(opts.target)[0].p.selrow = id ;	
					$(opts.target)[0].p.selarrrow.splice(0,$(opts.target)[0].p.selarrrow.length,id);
				});
	            $("#jqgh_"+ $(opts.target)[0].id + "_cb").html(opts.singlename ? opts.singlename : ('<input id="cb_'+ $(opts.target)[0].id + '" class="cbox" type="radio" disabled="disabled" role="radio">'));
	            sigleselect();
	            $(opts.target).bind('jqGridGridComplete.singleselect', sigleselect);
	        }
	       return returnObj;
    },
    defaults:{
         rowList: [10,15,50,100],
         rowNum:10,
         height:"100%",
         width:"auto",
         multiselect: true,
         datatype: "json",
         mtype: "post",
         viewrecords: true,
         cellEdit: false,
	     cellsubmit: "clientArray",
         toppager: true,
         sortorder: "asc",
		 sortname: "",
         pagerpos: 'center',
		 recordpos: 'right',
         prmNames:{page:"pageNo",rows:"pageSize",sort:"orderFields",order:"order"},
         jsonReader:{repeatitems:false},
         hoverrows:true,//是否使用悬停行样式
         altRows:true, //是否使用斑马样式
         altclass:"even",//定义斑马样式class
         pagerwidth:"",//分页内容宽度
         recordwidth:"150",//数据信息内容宽度
         navtype:"none",//导航栏类型top、both、bottom、none
         navbar:"",//定义导航栏位置
         navopt:{},  //导航栏默认属性
         pEdit:{},  //导航栏编辑数据属性，同navGrid的pEdit属性
         pAdd:{},  //导航栏增加数据属性，同navGrid的pAdd
         pDel:{},  //导航栏删除数据属性，同navGrid的pDel
         pSearch:{},  //导航栏查找数据属性，同navGrid的pSearch
         pView:{},  //导航栏查看数据属性，同navGrid的pView
         _delrowid:[],//保存删除行id
		 editvalid : false,// 是否在编辑时校验
         addParams : {serial:0,rowID : "new_row"}, //新增行属性
         groupingView : { mergeCell:true},
         totalGroupHeader:[],//多表头信息
         pagerType:"full",//分页栏类型，包括full和simple
         autoencode:true,//对特殊字符自动编码，例如单元格内容包含"<" （转换为"&lt"后显示）
         editCellFlag:true,//编辑过的单元格是否有标识
         loadError: function(xhr, error, thrown){
        	 //biz.utils.loadError(xhr,error, thrown);
         },
         ajaxGridOptions:{traditional: true},//支持ajax提交数组
         tooltipTime:2000 //编辑校验提示框持续时间
    }
  }) ;
 

/*  Bizfoundation ui 5.1
 *  biz.tree.js tree组件的JS文件
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

/**
 * 创建一个tree控件
 * @function
 * @return {Object} ui控件
 */
 biz.tree = biz.createUI(function(options){
      var zt = $.fn.zTree,
         tools = zt._z.tools,
         consts = zt.consts,
         view = zt._z.view,
         data = zt._z.data,
         event = zt._z.event;
     if(typeof options == "object"){
         var me = this;
         me.target = options.id;
         me.uiType = 'tree'  ;
         options.target = options.id;
         var _methods = this._methods||{};
         //扩展内部方法名添加到tree上
         data.addZTreeTools( _methods);
         //把扩展默认属性添加到tree上
        // data.exSetting(this.defaults || {});
        // $.extend(true,this.defaults || {} ,options) ;
     }else if(typeof options == 'string'){
         var treeId = arguments[0],methodName = arguments[1],
              args = $.makeArray(arguments).slice(2),temObj = $.fn.zTree.getZTreeObj(treeId),
              tempValue = (typeof temObj[methodName] =="function") ? temObj[methodName].apply($(treeId),args):jAlert(I18N.param_error + options , I18N.promp);;
         return tempValue;
     }
 }).extend({
    init:function(opts){
        var returnObj = $.fn.zTree.init($(opts.target), opts, opts.nodes);
        return returnObj;
    },
    defaults:{
    	callback:{
            onAsyncError:function(event,treeId,treeNode,XMLHttpRequest,textStatus,errorThrown){
                 // biz.utils.loadError(XMLHttpRequest,textStatus,errorThrown);
            }
        }
    },
    //提供给用户扩展用，只能通过返回对象调用方法 返回对象.方法名（参数1，参数2……）
    methods:{
        /*
        getabc:function(){
            alert("dd");
        }  */
    },
     //内部扩展用，可以通过biz.tree("id","方法名")方式调用
    _methods:function(setting, zTreeTools) {
        //获取指定id 的tree对象
        zTreeTools.getTreeObj =  function(){
           return  $.fn.zTree.getZTreeObj(this[0].id);
        }
    }
 });


/*
 * JQuery zTree core 3.3
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2012-07-16
 */
(function($){
	var settings = {}, roots = {}, caches = {}, zId = 0,
	//default consts of core
	_consts = {
		event: {
			NODECREATED: "ztree_nodeCreated",
			CLICK: "ztree_click",
			EXPAND: "ztree_expand",
			COLLAPSE: "ztree_collapse",
			ASYNC_SUCCESS: "ztree_async_success",
			ASYNC_ERROR: "ztree_async_error"
		},
		id: {
			A: "_a",
			ICON: "_ico",
			SPAN: "_span",
			SWITCH: "_switch",
			UL: "_ul"
		},
		line: {
			ROOT: "root",
			ROOTS: "roots",
			CENTER: "center",
			BOTTOM: "bottom",
			NOLINE: "noline",
			LINE: "line"
		},
		folder: {
			OPEN: "open",
			CLOSE: "close",
			DOCU: "docu"
		},
		node: {
			CURSELECTED: "curSelectedNode"
		}
	},
	//default setting of core
	_setting = {
		treeId: "",
		treeObj: null,
		view: {
			addDiyDom: null,
			autoCancelSelected: true,
			dblClickExpand: true,
			expandSpeed: "fast",
			fontCss: {},
			nameIsHTML: false,
			selectedMulti: true,
			showIcon: true,
			showLine: true,
			showTitle: true
		},
		data: {
			key: {
				children: "children",
				name: "name",
				title: "",
				url: "url"
			},
			simpleData: {
				enable: false,
				idKey: "id",
				pIdKey: "pId",
				rootPId: null
			},
			keep: {
				parent: false,
				leaf: false
			}
		},
		async: {
			enable: false,
			contentType: "application/x-www-form-urlencoded",
			type: "post",
			dataType: "text",
			url: "",
			autoParam: [],
			otherParam: [],
			dataFilter: null
		},
		callback: {
			beforeAsync:null,
			beforeClick:null,
			beforeRightClick:null,
			beforeMouseDown:null,
			beforeMouseUp:null,
			beforeExpand:null,
			beforeCollapse:null,
			beforeRemove:null,

			onAsyncError:null,
			onAsyncSuccess:null,
			onNodeCreated:null,
			onClick:null,
			onRightClick:null,
			onMouseDown:null,
			onMouseUp:null,
			onExpand:null,
			onCollapse:null,
			onRemove:null
		}
	},
	//default root of core
	//zTree use root to save full data
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		if (!r) {
			r = {};
			data.setRoot(setting, r);
		}
		r[setting.data.key.children] = [];
		r.expandTriggerFlag = false;
		r.curSelectedList = [];
		r.noSelection = true;
		r.createdNodes = [];
	},
	//default cache of core
	_initCache = function(setting) {
		var c = data.getCache(setting);
		if (!c) {
			c = {};
			data.setCache(setting, c);
		}
		c.nodes = [];
		c.doms = [];
	},
	//default bindEvent of core
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.NODECREATED);
		o.bind(c.NODECREATED, function (event, treeId, node) {
			tools.apply(setting.callback.onNodeCreated, [event, treeId, node]);
		});

		o.unbind(c.CLICK);
		o.bind(c.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			tools.apply(setting.callback.onClick, [srcEvent, treeId, node, clickFlag]);
		});

		o.unbind(c.EXPAND);
		o.bind(c.EXPAND, function (event, treeId, node) {
			tools.apply(setting.callback.onExpand, [event, treeId, node]);
		});

		o.unbind(c.COLLAPSE);
		o.bind(c.COLLAPSE, function (event, treeId, node) {
			tools.apply(setting.callback.onCollapse, [event, treeId, node]);
		});

		o.unbind(c.ASYNC_SUCCESS);
		o.bind(c.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			tools.apply(setting.callback.onAsyncSuccess, [event, treeId, node, msg]);
		});

		o.unbind(c.ASYNC_ERROR);
		o.bind(c.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			tools.apply(setting.callback.onAsyncError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown]);
		});
	},
	//default event proxy of core
	_eventProxy = function(event) {
		var target = event.target,
		setting = settings[event.data.treeId],
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(event.type, "mousedown")) {
			treeEventType = "mousedown";
		} else if (tools.eqs(event.type, "mouseup")) {
			treeEventType = "mouseup";
		} else if (tools.eqs(event.type, "contextmenu")) {
			treeEventType = "contextmenu";
		} else if (tools.eqs(event.type, "click")) {
			if (tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.SWITCH) !== null) {
				tId = target.parentNode.id;
				nodeEventType = "switchNode";
			} else {
				tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
				if (tmp) {
					tId = tmp.parentNode.id;
					nodeEventType = "clickNode";
				}
			}
		} else if (tools.eqs(event.type, "dblclick")) {
			treeEventType = "dblclick";
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tmp.parentNode.id;
				nodeEventType = "switchNode";
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {tId = tmp.parentNode.id;}
		}
		// event to node
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "switchNode" :
					if (!node.isParent) {
						nodeEventType = "";
					} else if (tools.eqs(event.type, "click") 
						|| (tools.eqs(event.type, "dblclick") && tools.apply(setting.view.dblClickExpand, [setting.treeId, node], setting.view.dblClickExpand))) {
						nodeEventCallback = handler.onSwitchNode;
					} else {
						nodeEventType = "";
					}
					break;
				case "clickNode" :
					nodeEventCallback = handler.onClickNode;
					break;
			}
		}
		// event to zTree
		switch (treeEventType) {
			case "mousedown" :
				treeEventCallback = handler.onZTreeMousedown;
				break;
			case "mouseup" :
				treeEventCallback = handler.onZTreeMouseup;
				break;
			case "dblclick" :
				treeEventCallback = handler.onZTreeDblclick;
				break;
			case "contextmenu" :
				treeEventCallback = handler.onZTreeContextmenu;
				break;
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of core
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var childKey = setting.data.key.children;
		n.level = level;
		n.tId = setting.treeId + "_" + (++zId);
		n.parentTId = parentNode ? parentNode.tId : null;
		if (n[childKey] && n[childKey].length > 0) {
			if (typeof n.open == "string") n.open = tools.eqs(n.open, "true");
			n.open = !!n.open;
			n.isParent = true;
			n.zAsync = true;
		} else {
			n.open = false;
			if (typeof n.isParent == "string") n.isParent = tools.eqs(n.isParent, "true");
			n.isParent = !!n.isParent;
			n.zAsync = !n.isParent;
		}
		n.isFirstNode = isFirstNode;
		n.isLastNode = isLastNode;
		n.getParentNode = function() {return data.getNodeCache(setting, n.parentTId);};
		n.getPreNode = function() {return data.getPreNode(setting, n);};
		n.getNextNode = function() {return data.getNextNode(setting, n);};
		n.isAjaxing = false;
		data.fixPIdKeyValue(setting, n);
	},
	_init = {
		bind: [_bindEvent],
		caches: [_initCache],
		nodes: [_initNode],
		proxys: [_eventProxy],
		roots: [_initRoot],
		beforeA: [],
		afterA: [],
		innerBeforeA: [],
		innerAfterA: [],
		zTreeTools: []
	},
	//method of operate data
	data = {
		addNodeCache: function(setting, node) {
			data.getCache(setting).nodes[node.tId] = node;
		},
		addAfterA: function(afterA) {
			_init.afterA.push(afterA);
		},
		addBeforeA: function(beforeA) {
			_init.beforeA.push(beforeA);
		},
		addInnerAfterA: function(innerAfterA) {
			_init.innerAfterA.push(innerAfterA);
		},
		addInnerBeforeA: function(innerBeforeA) {
			_init.innerBeforeA.push(innerBeforeA);
		},
		addInitBind: function(bindEvent) {
			_init.bind.push(bindEvent);
		},
		addInitCache: function(initCache) {
			_init.caches.push(initCache);
		},
		addInitNode: function(initNode) {
			_init.nodes.push(initNode);
		},
		addInitProxy: function(initProxy) {
			_init.proxys.push(initProxy);
		},
		addInitRoot: function(initRoot) {
			_init.roots.push(initRoot);
		},
		addNodesData: function(setting, parentNode, nodes) {
			var childKey = setting.data.key.children;
			if (!parentNode[childKey]) parentNode[childKey] = [];
			if (parentNode[childKey].length > 0) {
				parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
				view.setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1]);
			}
			parentNode.isParent = true;
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		},
		addSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			if (!data.isSelectedNode(setting, node)) {
				root.curSelectedList.push(node);
			}
		},
		addCreatedNode: function(setting, node) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				root.createdNodes.push(node);
			}
		},
		addZTreeTools: function(zTreeTools) {
			_init.zTreeTools.push(zTreeTools);
		},
		exSetting: function(s) {
			$.extend(true, _setting, s);
		},
		fixPIdKeyValue: function(setting, node) {
			if (setting.data.simpleData.enable) {
				node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId;
			}
		},
		getAfterA: function(setting, node, array) {
			for (var i=0, j=_init.afterA.length; i<j; i++) {
				_init.afterA[i].apply(this, arguments);
			}
		},
		getBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.beforeA.length; i<j; i++) {
				_init.beforeA[i].apply(this, arguments);
			}
		},
		getInnerAfterA: function(setting, node, array) {
			for (var i=0, j=_init.innerAfterA.length; i<j; i++) {
				_init.innerAfterA[i].apply(this, arguments);
			}
		},
		getInnerBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.innerBeforeA.length; i<j; i++) {
				_init.innerBeforeA[i].apply(this, arguments);
			}
		},
		getCache: function(setting) {
			return caches[setting.treeId];
		},
		getNextNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length-1; i<=l; i++) {
				if (p[childKey][i] === node) {
					return (i==l ? null : p[childKey][i+1]);
				}
			}
			return null;
		},
		getNodeByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return null;
			var childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					return nodes[i];
				}
				var tmp = data.getNodeByParam(setting, nodes[i][childKey], key, value);
				if (tmp) return tmp;
			}
			return null;
		},
		getNodeCache: function(setting, tId) {
			if (!tId) return null;
			var n = caches[setting.treeId].nodes[tId];
			return n ? n : null;
		},
		getNodes: function(setting) {
			return data.getRoot(setting)[setting.data.key.children];
		},
		getNodesByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParam(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByParamFuzzy: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (typeof nodes[i][key] == "string" && nodes[i][key].indexOf(value)>-1) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParamFuzzy(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByFilter: function(setting, nodes, filter, isSingle, invokeParam) {
			if (!nodes) return (isSingle ? null : []);
			var childKey = setting.data.key.children,
			result = isSingle ? null : [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (tools.apply(filter, [nodes[i], invokeParam], false)) {
					if (isSingle) {return nodes[i];}
					result.push(nodes[i]);
				}
				var tmpResult = data.getNodesByFilter(setting, nodes[i][childKey], filter, isSingle, invokeParam);
				if (isSingle && !!tmpResult) {return tmpResult;}
				result = isSingle ? tmpResult : result.concat(tmpResult);
			}
			return result;
		},
		getPreNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length; i<l; i++) {
				if (p[childKey][i] === node) {
					return (i==0 ? null : p[childKey][i-1]);
				}
			}
			return null;
		},
		getRoot: function(setting) {
			return setting ? roots[setting.treeId] : null;
		},
		getSetting: function(treeId) {
			return settings[treeId];
		},
		getSettings: function() {
			return settings;
		},
		getTitleKey: function(setting) {
			return setting.data.key.title === "" ? setting.data.key.name : setting.data.key.title;
		},
		getZTreeTools: function(treeId) {
			var r = this.getRoot(this.getSetting(treeId));
			return r ? r.treeTools : null;
		},
		initCache: function(setting) {
			for (var i=0, j=_init.caches.length; i<j; i++) {
				_init.caches[i].apply(this, arguments);
			}
		},
		initNode: function(setting, level, node, parentNode, preNode, nextNode) {
			for (var i=0, j=_init.nodes.length; i<j; i++) {
				_init.nodes[i].apply(this, arguments);
			}
		},
		initRoot: function(setting) {
			for (var i=0, j=_init.roots.length; i<j; i++) {
				_init.roots[i].apply(this, arguments);
			}
		},
		isSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i]) return true;
			}
			return false;
		},
		removeNodeCache: function(setting, node) {
			var childKey = setting.data.key.children;
			if (node[childKey]) {
				for (var i=0, l=node[childKey].length; i<l; i++) {
					arguments.callee(setting, node[childKey][i]);
				}
			}
			delete data.getCache(setting).nodes[node.tId];
		},
		removeSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i].tId)) {
					root.curSelectedList.splice(i, 1);
					i--;j--;
				}
			}
		},
		setCache: function(setting, cache) {
			caches[setting.treeId] = cache;
		},
		setRoot: function(setting, root) {
			roots[setting.treeId] = root;
		},
		setZTreeTools: function(setting, zTreeTools) {
			for (var i=0, j=_init.zTreeTools.length; i<j; i++) {
				_init.zTreeTools[i].apply(this, arguments);
			}
		},
		transformToArrayFormat: function (setting, nodes) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			r = [];
			if (tools.isArray(nodes)) {
				for (var i=0, l=nodes.length; i<l; i++) {
					r.push(nodes[i]);
					if (nodes[i][childKey])
						r = r.concat(data.transformToArrayFormat(setting, nodes[i][childKey]));
				}
			} else {
				r.push(nodes);
				if (nodes[childKey])
					r = r.concat(data.transformToArrayFormat(setting, nodes[childKey]));
			}
			return r;
		},
		transformTozTreeFormat: function(setting, sNodes) {
			var i,l,
			key = setting.data.simpleData.idKey,
			parentKey = setting.data.simpleData.pIdKey,
			childKey = setting.data.key.children;
			if (!key || key=="" || !sNodes) return [];

			if (tools.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i=0, l=sNodes.length; i<l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i];
				}
				for (i=0, l=sNodes.length; i<l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey])
							tmpMap[sNodes[i][parentKey]][childKey] = [];
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
					} else {
						r.push(sNodes[i]);
					}
				}
				return r;
			}else {
				return [sNodes];
			}
		}
	},
	//method of event proxy
	event = {
		bindEvent: function(setting) {
			for (var i=0, j=_init.bind.length; i<j; i++) {
				_init.bind[i].apply(this, arguments);
			}
		},
		bindTree: function(setting) {
			var eventParam = {
				treeId: setting.treeId
			},
			o = setting.treeObj;
			o.unbind('click', event.proxy);
			o.bind('click', eventParam, event.proxy);
			o.unbind('dblclick', event.proxy);
			o.bind('dblclick', eventParam, event.proxy);
			o.unbind('mouseover', event.proxy);
			o.bind('mouseover', eventParam, event.proxy);
			o.unbind('mouseout', event.proxy);
			o.bind('mouseout', eventParam, event.proxy);
			o.unbind('mousedown', event.proxy);
			o.bind('mousedown', eventParam, event.proxy);
			o.unbind('mouseup', event.proxy);
			o.bind('mouseup', eventParam, event.proxy);
			o.unbind('contextmenu', event.proxy);
			o.bind('contextmenu', eventParam, event.proxy);
		},
		doProxy: function(e) {
			var results = [];
			for (var i=0, j=_init.proxys.length; i<j; i++) {
				var proxyResult = _init.proxys[i].apply(this, arguments);
				results.push(proxyResult);
				if (proxyResult.stop) {
					break;
				}
			}
			return results;
		},
		proxy: function(e) {
			var setting = data.getSetting(e.data.treeId);
			if (!tools.uCanDo(setting, e)) return true;
			var results = event.doProxy(e),
			r = true, x = false;
			for (var i=0, l=results.length; i<l; i++) {
				var proxyResult = results[i];
				if (proxyResult.nodeEventCallback) {
					x = true;
					r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
				if (proxyResult.treeEventCallback) {
					x = true;
					r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
			}
			try{
				if (x && $("input:focus").length == 0) {
					tools.noSel(setting);
				}
			} catch(e) {}
			return r;
		}
	},
	//method of event handler
	handler = {
		onSwitchNode: function (event, node) {
			var setting = settings[event.data.treeId];
			if (node.open) {
				if (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			} else {
				if (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			}
			return true;
		},
		onClickNode: function (event, node) {
			var setting = settings[event.data.treeId],
			clickFlag = ( (setting.view.autoCancelSelected && event.ctrlKey) && data.isSelectedNode(setting, node)) ? 0 : (setting.view.autoCancelSelected && event.ctrlKey && setting.view.selectedMulti) ? 2 : 1;
			if (tools.apply(setting.callback.beforeClick, [setting.treeId, node, clickFlag], true) == false) return true;
			if (clickFlag === 0) {
				view.cancelPreSelectedNode(setting, node);
			} else {
				view.selectNode(setting, node, clickFlag === 2);
			}
			setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]);
			return true;
		},
		onZTreeMousedown: function(event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeMouseDown, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseDown, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeMouseup: function(event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeMouseUp, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseUp, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeDblclick: function(event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeDblClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onDblClick, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeContextmenu: function(event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeRightClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onRightClick, [event, setting.treeId, node]);
			}
			return (typeof setting.callback.onRightClick) != "function";
		}
	},
	//method of tools for zTree
	tools = {
		apply: function(fun, param, defaultValue) {
			if ((typeof fun) == "function") {
				return fun.apply(zt, param?param:[]);
			}
			return defaultValue;
		},
		canAsync: function(setting, node) {
			var childKey = setting.data.key.children;
			return (setting.async.enable && node && node.isParent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)));
		},
		clone: function (jsonObj) {
			var buf;
			if (jsonObj instanceof Array) {
				buf = [];
				var i = jsonObj.length;
				while (i--) {
					buf[i] = arguments.callee(jsonObj[i]);
				}
				return buf;
			}else if (typeof jsonObj == "function"){
				return jsonObj;
			}else if (jsonObj instanceof Object){
				buf = {};
				for (var k in jsonObj) {
					buf[k] = arguments.callee(jsonObj[k]);
				}
				return buf;
			}else{
				return jsonObj;
			}
		},
		eqs: function(str1, str2) {
			return str1.toLowerCase() === str2.toLowerCase();
		},
		isArray: function(arr) {
			return Object.prototype.toString.apply(arr) === "[object Array]";
		},
		getMDom: function (setting, curDom, targetExpr) {
			if (!curDom) return null;
			while (curDom && curDom.id !== setting.treeId) {
				for (var i=0, l=targetExpr.length; curDom.tagName && i<l; i++) {
					if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
						return curDom;
					}
				}
				curDom = curDom.parentNode;
			}
			return null;
		},
		noSel: function(setting) {
			var r = data.getRoot(setting);
			if (r.noSelection) {
				try {
					window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
				} catch(e){}
			}
		},
		uCanDo: function(setting, e) {
			return true;
		}
	},
	//method of operate ztree dom
	view = {
		addNodes: function(setting, parentNode, newNodes, isSilent) {
			if (setting.data.keep.leaf && parentNode && !parentNode.isParent) {
				return;
			}
			if (!tools.isArray(newNodes)) {
				newNodes = [newNodes];
			}
			if (setting.data.simpleData.enable) {
				newNodes = data.transformTozTreeFormat(setting, newNodes);
			}
			if (parentNode) {
				var target_switchObj = $("#" + parentNode.tId + consts.id.SWITCH),
				target_icoObj = $("#" + parentNode.tId + consts.id.ICON),
				target_ulObj = $("#" + parentNode.tId + consts.id.UL);

				if (!parentNode.open) {
					view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						"display": "none"
					});
				}

				data.addNodesData(setting, parentNode, newNodes);
				view.createNodes(setting, parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					view.expandCollapseParentNode(setting, parentNode, true);
				}
			} else {
				data.addNodesData(setting, data.getRoot(setting), newNodes);
				view.createNodes(setting, 0, newNodes, null);
			}
		},
		appendNodes: function(setting, level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) return [];
			var html = [],
			childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i];
				if (initFlag) {
					var tmpPNode = (parentNode) ? parentNode: data.getRoot(setting),
					tmpPChild = tmpPNode[childKey],
					isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
					isLastNode = (i == (nodes.length - 1));
					data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
					data.addNodeCache(setting, node);
				}

				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					//make child html first, because checkType
					childHtml = view.appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open);
				}
				if (openFlag) {
					
					view.makeDOMNodeMainBefore(html, setting, node);
					view.makeDOMNodeLine(html, setting, node);
					data.getBeforeA(setting, node, html);
					view.makeDOMNodeNameBefore(html, setting, node);
					data.getInnerBeforeA(setting, node, html);
					view.makeDOMNodeIcon(html, setting, node);
					data.getInnerAfterA(setting, node, html);
					view.makeDOMNodeNameAfter(html, setting, node);
					data.getAfterA(setting, node, html);
					if (node.isParent && node.open) {
						view.makeUlHtml(setting, node, html, childHtml.join(''));
					}
					view.makeDOMNodeMainAfter(html, setting, node);
					data.addCreatedNode(setting, node);
				}
			}
			return html;
		},
		appendParentULDom: function(setting, node) {
			var html = [],
			nObj = $("#" + node.tId),
			ulObj = $("#" + node.tId + consts.id.UL),
			childKey = setting.data.key.children,
			childHtml = view.appendNodes(setting, node.level+1, node[childKey], node, false, true);
			view.makeUlHtml(setting, node, html, childHtml.join(''));
			if (!nObj.get(0) && !!node.parentTId) {
				view.appendParentULDom(setting, node.getParentNode());
				nObj = $("#" + node.tId);
			}
			if (ulObj.get(0)) {
				ulObj.remove();
			}
			nObj.append(html.join(''));
		},
		asyncNode: function(setting, node, isSilent, callback) {
			var i, l;
			if (node && !node.isParent) {
				tools.apply(callback);
				return false;
			} else if (node && node.isAjaxing) {
				return false;
			} else if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {
				tools.apply(callback);
				return false;
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = $("#" + node.tId + consts.id.ICON);
				icoObj.attr({"style":"", "class":"button ico_loading"});
			}

			var isJson = (setting.async.contentType == "application/json"), tmpParam = isJson ? "{" : "", jTemp="";
			for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {
				var pKey = setting.async.autoParam[i].split("="), spKey = pKey;
				if (pKey.length>1) {
					spKey = pKey[1];
					pKey = pKey[0];
				}
				if (isJson) {
					jTemp = (typeof node[pKey] == "string") ? '"' : '';
					tmpParam += '"' + spKey + ('":' + jTemp + node[pKey]).replace(/'/g,'\\\'') + jTemp + ',';
				} else {
					tmpParam += spKey + ("=" + node[pKey]).replace(/&/g,'%26') + "&";
				}
			}
			if (tools.isArray(setting.async.otherParam)) {
				for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[i + 1] == "string") ? '"' : '';
						tmpParam += '"' + setting.async.otherParam[i] + ('":' + jTemp + setting.async.otherParam[i + 1]).replace(/'/g,'\\\'') + jTemp + ",";
					} else {
						tmpParam += setting.async.otherParam[i] + ("=" + setting.async.otherParam[i + 1]).replace(/&/g,'%26') + "&";
					}
				}
			} else {
				for (var p in setting.async.otherParam) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[p] == "string") ? '"' : '';
						tmpParam += '"' + p + ('":' + jTemp + setting.async.otherParam[p]).replace(/'/g,'\\\'') + jTemp + ",";
					} else {
						tmpParam += p + ("=" + setting.async.otherParam[p]).replace(/&/g,'%26') + "&";
					}
				}
			}
			if (tmpParam.length > 1) tmpParam = tmpParam.substring(0, tmpParam.length-1);
			if (isJson) tmpParam += "}";

			$.ajax({
				contentType: setting.async.contentType,
				type: setting.async.type,
				url: tools.apply(setting.async.url, [setting.treeId, node], setting.async.url),
				data: tmpParam,
				dataType: setting.async.dataType,
				success: function(msg) {
					var newNodes = [];
					try {
						if (!msg || msg.length == 0) {
							newNodes = [];
						} else if (typeof msg == "string") {
							newNodes = eval("(" + msg + ")");
						} else {
							newNodes = msg;
						}
					} catch(err) {}

					if (node) {
						node.isAjaxing = null;
						node.zAsync = true;
					}
					view.setNodeLineIcos(setting, node);
					if (newNodes && newNodes !== "") {
						newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);
						view.addNodes(setting, node, !!newNodes ? tools.clone(newNodes) : [], !!isSilent);
					} else {
						view.addNodes(setting, node, [], !!isSilent);
					}
					setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
					tools.apply(callback);
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					if (node) node.isAjaxing = null;
					view.setNodeLineIcos(setting, node);
					setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);
				}
			});
			return true;
		},
		cancelPreSelectedNode: function (setting, node) {
			var list = data.getRoot(setting).curSelectedList;
			for (var i=0, j=list.length-1; j>=i; j--) {
				if (!node || node === list[j]) {
					$("#" + list[j].tId + consts.id.A).removeClass(consts.node.CURSELECTED);
					view.setNodeName(setting, list[j]);
					if (node) {
						data.removeSelectedNode(setting, node);
						break;
					}
				}
			}
			if (!node) data.getRoot(setting).curSelectedList = [];
		},
		createNodeCallback: function(setting) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				while (root.createdNodes.length>0) {
					var node = root.createdNodes.shift();
					tools.apply(setting.view.addDiyDom, [setting.treeId, node]);
					if (!!setting.callback.onNodeCreated) {
						setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node]);
					}
				}
			}
		},
		createNodes: function(setting, level, nodes, parentNode) {
			if (!nodes || nodes.length == 0) return;
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			openFlag = !parentNode || parentNode.open || !!$("#" + parentNode[childKey][0].tId).get(0);
			root.createdNodes = [];
			var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, true, openFlag);
			if (!parentNode) {
				setting.treeObj.append(zTreeHtml.join(''));
			} else {
				var ulObj = $("#" + parentNode.tId + consts.id.UL);
				if (ulObj.get(0)) {
					ulObj.append(zTreeHtml.join(''));
				}
			}
			view.createNodeCallback(setting);
		},
		expandCollapseNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (!node) {
				tools.apply(callback, []);
				return;
			}
			if (root.expandTriggerFlag) {
				var _callback = callback;
				callback = function(){
					if (_callback) _callback();
					if (node.open) {
						setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node]);
					} else {
						setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node]);
					}
				};
				root.expandTriggerFlag = false;
			}
			if (node.open == expandFlag) {
				tools.apply(callback, []);
				return;
			}
			if (!node.open && node.isParent && ((!$("#" + node.tId + consts.id.UL).get(0)) || (node[childKey] && node[childKey].length>0 && !$("#" + node[childKey][0].tId).get(0)))) {
				view.appendParentULDom(setting, node);
				view.createNodeCallback(setting);
			}
			var ulObj = $("#" + node.tId + consts.id.UL),
			switchObj = $("#" + node.tId + consts.id.SWITCH),
			icoObj = $("#" + node.tId + consts.id.ICON);

			if (node.isParent) {
				node.open = !node.open;
				if (node.iconOpen && node.iconClose) {
					icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
				}

				if (node.open) {
					view.replaceSwitchClass(node, switchObj, consts.folder.OPEN);
					view.replaceIcoClass(node, icoObj, consts.folder.OPEN);
					if (animateFlag == false || setting.view.expandSpeed == "") {
						ulObj.show();
						tools.apply(callback, []);
					} else {
						if (node[childKey] && node[childKey].length > 0) {
							ulObj.slideDown(setting.view.expandSpeed, callback);
						} else {
							ulObj.show();
							tools.apply(callback, []);
						}
					}
				} else {
					view.replaceSwitchClass(node, switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(node, icoObj, consts.folder.CLOSE);
					if (animateFlag == false || setting.view.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
						ulObj.hide();
						tools.apply(callback, []);
					} else {
						ulObj.slideUp(setting.view.expandSpeed, callback);
					}
				}
			} else {
				tools.apply(callback, []);
			}
		},
		expandCollapseParentNode: function(setting, node, expandFlag, animateFlag, callback) {
			if (!node) return;
			if (!node.parentTId) {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);
				return;
			} else {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag);
			}
			if (node.parentTId) {
				view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback);
			}
		},
		expandCollapseSonNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			treeNodes = (node) ? node[childKey]: root[childKey],
			selfAnimateSign = (node) ? false : animateFlag,
			expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;
			data.getRoot(setting).expandTriggerFlag = false;
			if (treeNodes) {
				for (var i = 0, l = treeNodes.length; i < l; i++) {
					if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);
				}
			}
			data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;
			view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback );
		},
		makeDOMNodeIcon: function(html, setting, node) {
			var nameKey = setting.data.key.name,
			name = setting.view.nameIsHTML ? node[nameKey] : node[nameKey].replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
			html.push("<span id='", node.tId, consts.id.ICON,
				"' title='' treeNode", consts.id.ICON," class='", view.makeNodeIcoClass(setting, node),
				"' style='", view.makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN,
				"'>",name,"</span>");
		},
		makeDOMNodeLine: function(html, setting, node) {
			html.push("<span id='", node.tId, consts.id.SWITCH,	"' title='' class='", view.makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH,"></span>");
		},
		makeDOMNodeMainAfter: function(html, setting, node) {
			html.push("</li>");
		},
		makeDOMNodeMainBefore: function(html, setting, node) {
			html.push("<li id='", node.tId, "' class='level", node.level,"' tabindex='0' hidefocus='true' treenode>");
		},
		makeDOMNodeNameAfter: function(html, setting, node) {
			html.push("</a>");
		},
		makeDOMNodeNameBefore: function(html, setting, node) {
			var titleKey = data.getTitleKey(setting),
			url = view.makeNodeUrl(setting, node),
			fontcss = view.makeNodeFontCss(setting, node),
			fontStyle = [];
			for (var f in fontcss) {
				fontStyle.push(f, ":", fontcss[f], ";");
			}
			html.push("<a id='", node.tId, consts.id.A, "' class='level", node.level,"' treeNode", consts.id.A," onclick=\"", (node.click || ''),
				"\" ", ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='",view.makeNodeTarget(node),"' style='", fontStyle.join(''),
				"'");
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && node[titleKey]) {html.push("title='", node[titleKey].replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;'),"'");}
			html.push(">");
		},
		makeNodeFontCss: function(setting, node) {
			var fontCss = tools.apply(setting.view.fontCss, [setting.treeId, node], setting.view.fontCss);
			return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {};
		},
		makeNodeIcoClass: function(setting, node) {
			var icoCss = ["ico"];
			if (!node.isAjaxing) {
				icoCss[0] = (node.iconSkin ? node.iconSkin + "_" : "") + icoCss[0];
				if (node.isParent) {
					icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
				} else {
					icoCss.push(consts.folder.DOCU);
				}
			}
			return "button " + icoCss.join('_');
		},
		makeNodeIcoStyle: function(setting, node) {
			var icoStyle = [];
			if (!node.isAjaxing) {
				var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
				if (icon) icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
				if (setting.view.showIcon == false || !tools.apply(setting.view.showIcon, [setting.treeId, node], true)) {
					icoStyle.push("width:0px;height:0px;");
				}
			}
			return icoStyle.join('');
		},
		makeNodeLineClass: function(setting, node) {
			var lineClass = [];
			if (setting.view.showLine) {
				if (node.level == 0 && node.isFirstNode && node.isLastNode) {
					lineClass.push(consts.line.ROOT);
				} else if (node.level == 0 && node.isFirstNode) {
					lineClass.push(consts.line.ROOTS);
				} else if (node.isLastNode) {
					lineClass.push(consts.line.BOTTOM);
				} else {
					lineClass.push(consts.line.CENTER);
				}
			} else {
				lineClass.push(consts.line.NOLINE);
			}
			if (node.isParent) {
				lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
			} else {
				lineClass.push(consts.folder.DOCU);
			}
			return view.makeNodeLineClassEx(node) + lineClass.join('_');
		},
		makeNodeLineClassEx: function(node) {
			return "button level" + node.level + " switch ";
		},
		makeNodeTarget: function(node) {
			return (node.target || "_blank");
		},
		makeNodeUrl: function(setting, node) {
			var urlKey = setting.data.key.url;
			return node[urlKey] ? node[urlKey] : null;
		},
		makeUlHtml: function(setting, node, html, content) {
			html.push("<ul id='", node.tId, consts.id.UL, "' class='level", node.level, " ", view.makeUlLineClass(setting, node), "' style='display:", (node.open ? "block": "none"),"'>");
			html.push(content);
			html.push("</ul>");
		},
		makeUlLineClass: function(setting, node) {
			return ((setting.view.showLine && !node.isLastNode) ? consts.line.LINE : "");
		},
		removeChildNodes: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			nodes = node[childKey];
			if (!nodes) return;

			for (var i = 0, l = nodes.length; i < l; i++) {
				data.removeNodeCache(setting, nodes[i]);
			}
			data.removeSelectedNode(setting);
			delete node[childKey];

			if (!setting.data.keep.parent) {
				node.isParent = false;
				node.open = false;
				var tmp_switchObj = $("#" + node.tId + consts.id.SWITCH),
				tmp_icoObj = $("#" + node.tId + consts.id.ICON);
				view.replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);
				$("#" + node.tId + consts.id.UL).remove();
			} else {
				$("#" + node.tId + consts.id.UL).empty();
			}
		},
                setFirstNode: function(setting, parentNode) {
                    var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
                    if ( childLength > 0) {
                        parentNode[childKey][0].isFirstNode = true;
                    }
                },
                setLastNode: function(setting, parentNode) {
                    var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
                    if ( childLength > 0) {
                        parentNode[childKey][childLength - 1].isLastNode = true;
                    }
                },
		removeNode: function(setting, node) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			parentNode = (node.parentTId) ? node.getParentNode() : root;

			node.isFirstNode = false;
			node.isLastNode = false;
			node.getPreNode = function() {return null;};
			node.getNextNode = function() {return null;};
                        
			$("#" + node.tId).remove();
			data.removeNodeCache(setting, node);
			data.removeSelectedNode(setting, node);

			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i].tId == node.tId) {
					parentNode[childKey].splice(i, 1);
					break;
				}
			}
                        view.setFirstNode(setting, parentNode);
                        view.setLastNode(setting, parentNode);
                                                
                        var tmp_ulObj,tmp_switchObj,tmp_icoObj, 
                        childLength = parentNode[childKey].length;

			//repair nodes old parent
			if (!setting.data.keep.parent && childLength == 0) {
				//old parentNode has no child nodes
				parentNode.isParent = false;
				parentNode.open = false;
				tmp_ulObj = $("#" + parentNode.tId + consts.id.UL);
				tmp_switchObj = $("#" + parentNode.tId + consts.id.SWITCH);
				tmp_icoObj = $("#" + parentNode.tId + consts.id.ICON);
				view.replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (setting.view.showLine && childLength > 0) {
				//old parentNode has child nodes
				var newLast = parentNode[childKey][childLength - 1];
				tmp_ulObj = $("#" + newLast.tId + consts.id.UL);
				tmp_switchObj = $("#" + newLast.tId + consts.id.SWITCH);
				tmp_icoObj = $("#" + newLast.tId + consts.id.ICON);
				if (parentNode == root) {
					if (parentNode[childKey].length == 1) {
						//node was root, and ztree has only one root after move node
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT);
					} else {
						var tmp_first_switchObj = $("#" + parentNode[childKey][0].tId + consts.id.SWITCH);
						view.replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
					}
				} else {
					view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
				}
				tmp_ulObj.removeClass(consts.line.LINE);
			}
		},
		replaceIcoClass: function(node, obj, newName) {
			if (!obj || node.isAjaxing) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[tmpList.length-1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
		},
		replaceSwitchClass: function(node, obj, newName) {
			if (!obj) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.line.ROOT:
				case consts.line.ROOTS:
				case consts.line.CENTER:
				case consts.line.BOTTOM:
				case consts.line.NOLINE:
					tmpList[0] = view.makeNodeLineClassEx(node) + newName;
					break;
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
			if (newName !== consts.folder.DOCU) {
				obj.removeAttr("disabled");
			} else {
				obj.attr("disabled", "disabled");
			}
		},
		selectNode: function(setting, node, addFlag) {
			if (!addFlag) {
				view.cancelPreSelectedNode(setting);
			}
			$("#" + node.tId + consts.id.A).addClass(consts.node.CURSELECTED);
			data.addSelectedNode(setting, node);
		},
		setNodeFontCss: function(setting, treeNode) {
			var aObj = $("#" + treeNode.tId + consts.id.A),
			fontCss = view.makeNodeFontCss(setting, treeNode);
			if (fontCss) {
				aObj.css(fontCss);
			}
		},
		setNodeLineIcos: function(setting, node) {
			if (!node) return;
			var switchObj = $("#" + node.tId + consts.id.SWITCH),
			ulObj = $("#" + node.tId + consts.id.UL),
			icoObj = $("#" + node.tId + consts.id.ICON),
			ulLine = view.makeUlLineClass(setting, node);
			if (ulLine.length==0) {
				ulObj.removeClass(consts.line.LINE);
			} else {
				ulObj.addClass(ulLine);
			}
			switchObj.attr("class", view.makeNodeLineClass(setting, node));
			if (node.isParent) {
				switchObj.removeAttr("disabled");
			} else {
				switchObj.attr("disabled", "disabled");
			}
			icoObj.removeAttr("style");
			icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
			icoObj.attr("class", view.makeNodeIcoClass(setting, node));
		},
		setNodeName: function(setting, node) {
			var nameKey = setting.data.key.name,
			titleKey = data.getTitleKey(setting),
			nObj = $("#" + node.tId + consts.id.SPAN);
			nObj.empty();
			if (setting.view.nameIsHTML) {
				nObj.html(node[nameKey]);
			} else {
				nObj.text(node[nameKey]);
			}
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle)) {
				var aObj = $("#" + node.tId + consts.id.A);
				aObj.attr("title", !node[titleKey] ? "" : node[titleKey]);
			}
		},
		setNodeTarget: function(node) {
			var aObj = $("#" + node.tId + consts.id.A);
			aObj.attr("target", view.makeNodeTarget(node));
		},
		setNodeUrl: function(setting, node) {
			var aObj = $("#" + node.tId + consts.id.A),
			url = view.makeNodeUrl(setting, node);
			if (url == null || url.length == 0) {
				aObj.removeAttr("href");
			} else {
				aObj.attr("href", url);
			}
		},
		switchNode: function(setting, node) {
			if (node.open || !tools.canAsync(setting, node)) {
				view.expandCollapseNode(setting, node, !node.open);
			} else if (setting.async.enable) {
				if (!view.asyncNode(setting, node)) {
					view.expandCollapseNode(setting, node, !node.open);
					return;
				}
			} else if (node) {
				view.expandCollapseNode(setting, node, !node.open);
			}
		}
	};
	// zTree defind
	$.fn.zTree = {
		consts : _consts,
		_z : {
			tools: tools,
			view: view,
			event: event,
			data: data
		},
		getZTreeObj: function(treeId) {
			var o = data.getZTreeTools(treeId);
			return o ? o : null;
		},
		init: function(obj, zSetting, zNodes) {
			var setting = tools.clone(_setting);
			$.extend(true, setting, zSetting);
			setting.treeId = obj.attr("id");
			setting.treeObj = obj;
			setting.treeObj.empty();
			settings[setting.treeId] = setting;
			if ($.browser.msie && parseInt($.browser.version)<7) {
				setting.view.expandSpeed = "";
			}

			data.initRoot(setting);
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			zNodes = zNodes ? tools.clone(tools.isArray(zNodes)? zNodes : [zNodes]) : [];
			if (setting.data.simpleData.enable) {
				root[childKey] = data.transformTozTreeFormat(setting, zNodes);
			} else {
				root[childKey] = zNodes;
			}

			data.initCache(setting);
			event.bindTree(setting);
			event.bindEvent(setting);
			
			var zTreeTools = {
				setting : setting,
				addNodes : function(parentNode, newNodes, isSilent) {
					if (!newNodes) return null;
					if (!parentNode) parentNode = null;
					if (parentNode && !parentNode.isParent && setting.data.keep.leaf) return null;
					var xNewNodes = tools.clone(tools.isArray(newNodes)? newNodes: [newNodes]);
					function addCallback() {
						view.addNodes(setting, parentNode, xNewNodes, (isSilent==true));
					}

					if (tools.canAsync(setting, parentNode)) {
						view.asyncNode(setting, parentNode, isSilent, addCallback);
					} else {
						addCallback();
					}
					return xNewNodes;
				},
				cancelSelectedNode : function(node) {
					view.cancelPreSelectedNode(this.setting, node);
				},
				expandAll : function(expandFlag) {
					expandFlag = !!expandFlag;
					view.expandCollapseSonNode(this.setting, null, expandFlag, true);
					return expandFlag;
				},
				expandNode : function(node, expandFlag, sonSign, focus, callbackFlag) {
					if (!node || !node.isParent) return null;
					if (expandFlag !== true && expandFlag !== false) {
						expandFlag = !node.open;
					}
					callbackFlag = !!callbackFlag;

					if (callbackFlag && expandFlag && (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false)) {
						return null;
					} else if (callbackFlag && !expandFlag && (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false)) {
						return null;
					}
					if (expandFlag && node.parentTId) {
						view.expandCollapseParentNode(this.setting, node.getParentNode(), expandFlag, false);
					}
					if (expandFlag === node.open && !sonSign) {
						return null;
					}
					
					data.getRoot(setting).expandTriggerFlag = callbackFlag;
					if (sonSign) {
						view.expandCollapseSonNode(this.setting, node, expandFlag, true, function() {
							if (focus !== false) {$("#" + node.tId).focus().blur();}
						});
					} else {
						node.open = !expandFlag;
						view.switchNode(this.setting, node);
						if (focus !== false) {$("#" + node.tId).focus().blur();}
					}
					return expandFlag;
				},
				getNodes : function() {
					return data.getNodes(this.setting);
				},
				getNodeByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodeByParam(this.setting, parentNode?parentNode[this.setting.data.key.children]:data.getNodes(this.setting), key, value);
				},
				getNodeByTId : function(tId) {
					return data.getNodeCache(this.setting, tId);
				},
				getNodesByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParam(this.setting, parentNode?parentNode[this.setting.data.key.children]:data.getNodes(this.setting), key, value);
				},
				getNodesByParamFuzzy : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParamFuzzy(this.setting, parentNode?parentNode[this.setting.data.key.children]:data.getNodes(this.setting), key, value);
				},
				getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {
					isSingle = !!isSingle;
					if (!filter || (typeof filter != "function")) return (isSingle ? null : []);
					return data.getNodesByFilter(this.setting, parentNode?parentNode[this.setting.data.key.children]:data.getNodes(this.setting), filter, isSingle, invokeParam);
				},
				getNodeIndex : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(this.setting);
					for (var i=0, l = parentNode[childKey].length; i < l; i++) {
						if (parentNode[childKey][i] == node) return i;
					}
					return -1;
				},
				getSelectedNodes : function() {
					var r = [], list = data.getRoot(this.setting).curSelectedList;
					for (var i=0, l=list.length; i<l; i++) {
						r.push(list[i]);
					}
					return r;
				},
				isSelectedNode : function(node) {
					return data.isSelectedNode(this.setting, node);
				},
				reAsyncChildNodes : function(parentNode, reloadType, isSilent) {
					if (!this.setting.async.enable) return;
					var isRoot = !parentNode;
					if (isRoot) {
						parentNode = data.getRoot(this.setting);
					}
					if (reloadType=="refresh") {
						parentNode[this.setting.data.key.children] = [];
						if (isRoot) {
							this.setting.treeObj.empty();
						} else {
							var ulObj = $("#" + parentNode.tId + consts.id.UL);
							ulObj.empty();
						}
					}
					view.asyncNode(this.setting, isRoot? null:parentNode, !!isSilent);
				},
				refresh : function() {
					this.setting.treeObj.empty();
					var root = data.getRoot(this.setting),
					nodes = root[this.setting.data.key.children]
					data.initRoot(this.setting);
					root[this.setting.data.key.children] = nodes
					data.initCache(this.setting);
					view.createNodes(this.setting, 0, root[this.setting.data.key.children]);
				},
				removeChildNodes : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					nodes = node[childKey];
					view.removeChildNodes(setting, node);
					return nodes ? nodes : null;
				},
				removeNode : function(node, callbackFlag) {
					if (!node) return;
					callbackFlag = !!callbackFlag;
					if (callbackFlag && tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return;
					view.removeNode(setting, node);
					if (callbackFlag) {
						this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					}
				},
				selectNode : function(node, addFlag) {
					if (!node) return;
					if (tools.uCanDo(this.setting)) {
						addFlag = setting.view.selectedMulti && addFlag;
						if (node.parentTId) {
							view.expandCollapseParentNode(this.setting, node.getParentNode(), true, false, function() {
								$("#" + node.tId).focus().blur();
							});
						} else {
							$("#" + node.tId).focus().blur();
						}
						view.selectNode(this.setting, node, addFlag);
					}
				},
				transformTozTreeNodes : function(simpleNodes) {
					return data.transformTozTreeFormat(this.setting, simpleNodes);
				},
				transformToArray : function(nodes) {
					return data.transformToArrayFormat(this.setting, nodes);
				},
				updateNode : function(node, checkTypeFlag) {
					if (!node) return;
					var nObj = $("#" + node.tId);
					if (nObj.get(0) && tools.uCanDo(this.setting)) {
						view.setNodeName(this.setting, node);
						view.setNodeTarget(node);
						view.setNodeUrl(this.setting, node);
						view.setNodeLineIcos(this.setting, node);
						view.setNodeFontCss(this.setting, node);
					}
				}
			}
			root.treeTools = zTreeTools;
			data.setZTreeTools(setting, zTreeTools);

			if (root[childKey] && root[childKey].length > 0) {
				view.createNodes(setting, 0, root[childKey]);
			} else if (setting.async.enable && setting.async.url && setting.async.url !== '') {
				view.asyncNode(setting);
			}
			return zTreeTools;
		}
	};

	var zt = $.fn.zTree,
	consts = zt.consts;
})(jQuery);
/*
 * JQuery zTree excheck 3.3
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2012-07-16
 */
(function($){
	//default consts of excheck
	var _consts = {
		event: {
			CHECK: "ztree_check"
		},
		id: {
			CHECK: "_check"
		},
		checkbox: {
			STYLE: "checkbox",
			DEFAULT: "chk",
			DISABLED: "disable",
			FALSE: "false",
			TRUE: "true",
			FULL: "full",
			PART: "part",
			FOCUS: "focus"
		},
		radio: {
			STYLE: "radio",
			TYPE_ALL: "all",
			TYPE_LEVEL: "level"
		}
	},
	//default setting of excheck
	_setting = {
		check: {
			enable: false,
			autoCheckTrigger: false,
			chkStyle: _consts.checkbox.STYLE,
			nocheckInherit: false,
			radioType: _consts.radio.TYPE_LEVEL,
			chkboxType: {
				"Y": "ps",
				"N": "ps"
			}
		},
		data: {
			key: {
				checked: "checked"
			}
		},
		callback: {
			beforeCheck:null,
			onCheck:null
		}
	},
	//default root of excheck
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		r.radioCheckedList = [];
	},
	//default cache of excheck
	_initCache = function(treeId) {},
	//default bind event of excheck
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.CHECK);
		o.bind(c.CHECK, function (event, treeId, node) {
			tools.apply(setting.callback.onCheck, [event, treeId, node]);
		});
	},
	//default event proxy of excheck
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null;

		if (tools.eqs(e.type, "mouseover")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = target.parentNode.id;
				nodeEventType = "mouseoverCheck";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = target.parentNode.id;
				nodeEventType = "mouseoutCheck";
			}
		} else if (tools.eqs(e.type, "click")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = target.parentNode.id;
				nodeEventType = "checkNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "checkNode" :
					nodeEventCallback = _handler.onCheckNode;
					break;
				case "mouseoverCheck" :
					nodeEventCallback = _handler.onMouseoverCheck;
					break;
				case "mouseoutCheck" :
					nodeEventCallback = _handler.onMouseoutCheck;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of excheck
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var checkedKey = setting.data.key.checked;
		if (typeof n[checkedKey] == "string") n[checkedKey] = tools.eqs(n[checkedKey], "true");
		n[checkedKey] = !!n[checkedKey];
		n.checkedOld = n[checkedKey];
		n.nocheck = !!n.nocheck || (setting.check.nocheckInherit && parentNode && !!parentNode.nocheck);
		n.chkDisabled = !!n.chkDisabled || (parentNode && !!parentNode.chkDisabled);
		if (typeof n.halfCheck == "string") n.halfCheck = tools.eqs(n.halfCheck, "true");
		n.halfCheck = !!n.halfCheck;
		n.check_Child_State = -1;
		n.check_Focus = false;
		n.getCheckStatus = function() {return data.getCheckStatus(setting, n);};
		if (isLastNode) {
			data.makeChkFlag(setting, parentNode);
		}
	},
	//add dom for check
	_beforeA = function(setting, node, html) {
		var checkedKey = setting.data.key.checked;
		if (setting.check.enable) {
			data.makeChkFlag(setting, node);
			if (setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL && node[checkedKey] ) {
				var r = data.getRoot(setting);
				r.radioCheckedList.push(node);
			}
			html.push("<span ID='", node.tId, consts.id.CHECK, "' class='", view.makeChkClass(setting, node), "' treeNode", consts.id.CHECK, (node.nocheck === true?" style='display:none;'":""),"></span>");
		}
	},
	//update zTreeObj, add method of check
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.checkNode = function(node, checked, checkTypeFlag, callbackFlag) {
			var checkedKey = this.setting.data.key.checked;
			if (node.chkDisabled === true) return;
			if (checked !== true && checked !== false) {
				checked = !node[checkedKey];
			}
			callbackFlag = !!callbackFlag;
			
			if (node[checkedKey] === checked && !checkTypeFlag) {
				return;
			} else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [this.setting.treeId, node], true) == false) {
				return;
			}
			if (tools.uCanDo(this.setting) && this.setting.check.enable && node.nocheck !== true) {
				node[checkedKey] = checked;
				var checkObj = $("#" + node.tId + consts.id.CHECK);
				if (checkTypeFlag || this.setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(this.setting, node);
				view.setChkClass(this.setting, checkObj, node);
				view.repairParentChkClassWithSelf(this.setting, node);
				if (callbackFlag) {
					setting.treeObj.trigger(consts.event.CHECK, [setting.treeId, node]);
				}
			}
		}

		zTreeTools.checkAllNodes = function(checked) {
			view.repairAllChk(this.setting, !!checked);
		}

		zTreeTools.getCheckedNodes = function(checked) {
			var childKey = this.setting.data.key.children;
			checked = (checked !== false);
			return data.getTreeCheckedNodes(this.setting, data.getRoot(setting)[childKey], checked);
		}

		zTreeTools.getChangeCheckedNodes = function() {
			var childKey = this.setting.data.key.children;
			return data.getTreeChangeCheckedNodes(this.setting, data.getRoot(setting)[childKey]);
		}

		zTreeTools.setChkDisabled = function(node, disabled) {
			disabled = !!disabled;
			view.repairSonChkDisabled(this.setting, node, disabled);
			if (!disabled) view.repairParentChkDisabled(this.setting, node, disabled);
		}

		var _updateNode = zTreeTools.updateNode;
		zTreeTools.updateNode = function(node, checkTypeFlag) {
			if (_updateNode) _updateNode.apply(zTreeTools, arguments);
			if (!node || !this.setting.check.enable) return;
			var nObj = $("#" + node.tId);
			if (nObj.get(0) && tools.uCanDo(this.setting)) {
				var checkObj = $("#" + node.tId + consts.id.CHECK);
				if (checkTypeFlag == true || this.setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(this.setting, node);
				view.setChkClass(this.setting, checkObj, node);
				view.repairParentChkClassWithSelf(this.setting, node);
			}
		}
	},
	//method of operate data
	_data = {
		getRadioCheckedList: function(setting) {
			var checkedList = data.getRoot(setting).radioCheckedList;
			for (var i=0, j=checkedList.length; i<j; i++) {
				if(!data.getNodeCache(setting, checkedList[i].tId)) {
					checkedList.splice(i, 1);
					i--; j--;
				}
			}
			return checkedList;
		},
		getCheckStatus: function(setting, node) {
			if (!setting.check.enable || node.nocheck) return null;
			var checkedKey = setting.data.key.checked,
			r = {
				checked: node[checkedKey],
				half: node.halfCheck ? node.halfCheck : (setting.check.chkStyle == consts.radio.STYLE ? (node.check_Child_State === 2) : (node[checkedKey] ? (node.check_Child_State > -1 && node.check_Child_State < 2) : (node.check_Child_State > 0)))
			};
			return r;
		},
		getTreeCheckedNodes: function(setting, nodes, checked, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			onlyOne = (checked && setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL);
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i][checkedKey] == checked) {
					results.push(nodes[i]);
					if(onlyOne) {
						break;
					}
				}
				data.getTreeCheckedNodes(setting, nodes[i][childKey], checked, results);
				if(onlyOne && results.length > 0) {
					break;
				}
			}
			return results;
		},
		getTreeChangeCheckedNodes: function(setting, nodes, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked;
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
					results.push(nodes[i]);
				}
				data.getTreeChangeCheckedNodes(setting, nodes[i][childKey], results);
			}
			return results;
		},
		makeChkFlag: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			chkFlag = -1;
			if (node[childKey]) {
				var start = false;
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var cNode = node[childKey][i];
					var tmp = -1;
					if (setting.check.chkStyle == consts.radio.STYLE) {
						if (cNode.nocheck === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 2;
						} else if (cNode.nocheck !== true && cNode[checkedKey]) {
							tmp = 2;
						} else {
							tmp = cNode.check_Child_State > 0 ? 2:0;
						}
						if (tmp == 2) {
							chkFlag = 2; break;
						} else if (tmp == 0){
							chkFlag = 0;
						}
					} else if (setting.check.chkStyle == consts.checkbox.STYLE) {
						if (cNode.nocheck === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 1;
						} else if (cNode.nocheck !== true && cNode[checkedKey] ) {
							tmp = (cNode.check_Child_State === -1 || cNode.check_Child_State === 2) ? 2 : 1;
						} else {
							tmp = (cNode.check_Child_State > 0) ? 1 : 0;
						}
						if (tmp === 1) {
							chkFlag = 1; break;
						} else if (tmp === 2 && start && tmp !== chkFlag) {
							chkFlag = 1; break;
						} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
							chkFlag = 1; break;
						} else if (tmp > -1) {
							chkFlag = tmp;
						}
						if (!start) start = (cNode.nocheck !== true);
					}
				}
			}
			node.check_Child_State = chkFlag;
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onCheckNode: function (event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkedKey = setting.data.key.checked;
			if (tools.apply(setting.callback.beforeCheck, [setting.treeId, node], true) == false) return true;
			node[checkedKey] = !node[checkedKey];
			view.checkNodeRelation(setting, node);
			var checkObj = $("#" + node.tId + consts.id.CHECK);
			view.setChkClass(setting, checkObj, node);
			view.repairParentChkClassWithSelf(setting, node);
			setting.treeObj.trigger(consts.event.CHECK, [setting.treeId, node]);
			return true;
		},
		onMouseoverCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $("#" + node.tId + consts.id.CHECK);
			node.check_Focus = true;
			view.setChkClass(setting, checkObj, node);
			return true;
		},
		onMouseoutCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $("#" + node.tId + consts.id.CHECK);
			node.check_Focus = false;
			view.setChkClass(setting, checkObj, node);
			return true;
		}
	},
	//method of tools for zTree
	_tools = {

	},
	//method of operate ztree dom
	_view = {
		checkNodeRelation: function(setting, node) {
			var pNode, i, l,
			childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			r = consts.radio;
			if (setting.check.chkStyle == r.STYLE) {
				var checkedList = data.getRadioCheckedList(setting);
				if (node[checkedKey]) {
					if (setting.check.radioType == r.TYPE_ALL) {
						for (i = checkedList.length-1; i >= 0; i--) {
							pNode = checkedList[i];
							pNode[checkedKey] = false;
							checkedList.splice(i, 1);

							view.setChkClass(setting, $("#" + pNode.tId + consts.id.CHECK), pNode);
							if (pNode.parentTId != node.parentTId) {
								view.repairParentChkClassWithSelf(setting, pNode);
							}
						}
						checkedList.push(node);
					} else {
						var parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(setting);
						for (i = 0, l = parentNode[childKey].length; i < l; i++) {
							pNode = parentNode[childKey][i];
							if (pNode[checkedKey] && pNode != node) {
								pNode[checkedKey] = false;
								view.setChkClass(setting, $("#" + pNode.tId + consts.id.CHECK), pNode);
							}
						}
					}
				} else if (setting.check.radioType == r.TYPE_ALL) {
					for (i = 0, l = checkedList.length; i < l; i++) {
						if (node == checkedList[i]) {
							checkedList.splice(i, 1);
							break;
						}
					}
				}

			} else {
				if (node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.Y.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.N.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, false);
				}
				if (node[checkedKey] && setting.check.chkboxType.Y.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && setting.check.chkboxType.N.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, false);
				}
			}
		},
		makeChkClass: function(setting, node) {
			var checkedKey = setting.data.key.checked,
			c = consts.checkbox, r = consts.radio,
			fullStyle = "";
			if (node.chkDisabled === true) {
				fullStyle = c.DISABLED;
			} else if (node.halfCheck) {
				fullStyle = c.PART;
			} else if (setting.check.chkStyle == r.STYLE) {
				fullStyle = (node.check_Child_State < 1)? c.FULL:c.PART;
			} else {
				fullStyle = node[checkedKey] ? ((node.check_Child_State === 2 || node.check_Child_State === -1) ? c.FULL:c.PART) : ((node.check_Child_State < 1)? c.FULL:c.PART);
			}
			var chkName = setting.check.chkStyle + "_" + (node[checkedKey] ? c.TRUE : c.FALSE) + "_" + fullStyle;
			chkName = (node.check_Focus && node.chkDisabled !== true) ? chkName + "_" + c.FOCUS : chkName;
			return "button " + c.DEFAULT + " " + chkName;
		},
		repairAllChk: function(setting, checked) {
			if (setting.check.enable && setting.check.chkStyle === consts.checkbox.STYLE) {
				var checkedKey = setting.data.key.checked,
				childKey = setting.data.key.children,
				root = data.getRoot(setting);
				for (var i = 0, l = root[childKey].length; i<l ; i++) {
					var node = root[childKey][i];
					if (node.nocheck !== true) {
						node[checkedKey] = checked;
					}
					view.setSonNodeCheckBox(setting, node, checked);
				}
			}
		},
		repairChkClass: function(setting, node) {
			if (!node) return;
			data.makeChkFlag(setting, node);
			var checkObj = $("#" + node.tId + consts.id.CHECK);
			view.setChkClass(setting, checkObj, node);
		},
		repairParentChkClass: function(setting, node) {
			if (!node || !node.parentTId) return;
			var pNode = node.getParentNode();
			view.repairChkClass(setting, pNode);
			view.repairParentChkClass(setting, pNode);
		},
		repairParentChkClassWithSelf: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node[childKey] && node[childKey].length > 0) {
				view.repairParentChkClass(setting, node[childKey][0]);
			} else {
				view.repairParentChkClass(setting, node);
			}
		},
		repairSonChkDisabled: function(setting, node, chkDisabled) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node.chkDisabled != chkDisabled) {
				node.chkDisabled = chkDisabled;
				if (node.nocheck !== true) view.repairChkClass(setting, node);
			}
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var sNode = node[childKey][i];
					view.repairSonChkDisabled(setting, sNode, chkDisabled);
				}
			}
		},
		repairParentChkDisabled: function(setting, node, chkDisabled) {
			if (!node) return;
			if (node.chkDisabled != chkDisabled) {
				node.chkDisabled = chkDisabled;
				if (node.nocheck !== true) view.repairChkClass(setting, node);
			}
			view.repairParentChkDisabled(setting, node.getParentNode(), chkDisabled);
		},
		setChkClass: function(setting, obj, node) {
			if (!obj) return;
			if (node.nocheck === true) {
				obj.hide();
			} else {
				obj.show();
			}
			obj.removeClass();
			obj.addClass(view.makeChkClass(setting, node));
		},
		setParentNodeCheckBox: function(setting, node, value, srcNode) {
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $("#" + node.tId + consts.id.CHECK);
			if (!srcNode) srcNode = node;
			data.makeChkFlag(setting, node);
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode && node.nocheck !== true) {
					setting.treeObj.trigger(consts.event.CHECK, [setting.treeId, node]);
				}
			}
			if (node.parentTId) {
				var pSign = true;
				if (!value) {
					var pNodes = node.getParentNode()[childKey];
					for (var i = 0, l = pNodes.length; i < l; i++) {
						if ((pNodes[i].nocheck !== true && pNodes[i][checkedKey])
						|| (pNodes[i].nocheck === true && pNodes[i].check_Child_State > 0)) {
							pSign = false;
							break;
						}
					}
				}
				if (pSign) {
					view.setParentNodeCheckBox(setting, node.getParentNode(), value, srcNode);
				}
			}
		},
		setSonNodeCheckBox: function(setting, node, value, srcNode) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $("#" + node.tId + consts.id.CHECK);
			if (!srcNode) srcNode = node;

			var hasDisable = false;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
					var sNode = node[childKey][i];
					view.setSonNodeCheckBox(setting, sNode, value, srcNode);
					if (sNode.chkDisabled === true) hasDisable = true;
				}
			}
			
			if (node != data.getRoot(setting) && node.chkDisabled !== true) {
				if (hasDisable && node.nocheck !== true) {
					data.makeChkFlag(setting, node);
				}
				if (node.nocheck !== true) {
					node[checkedKey] = value;
					if (!hasDisable) node.check_Child_State = (node[childKey] && node[childKey].length > 0) ? (value ? 2 : 0) : -1;
				} else {
					node.check_Child_State = -1;
				}
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode && node.nocheck !== true) {
					setting.treeObj.trigger(consts.event.CHECK, [setting.treeId, node]);
				}
			}

		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy);
	data.addInitRoot(_initRoot);
	data.addBeforeA(_beforeA);
	data.addZTreeTools(_zTreeTools);

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) _createNodes.apply(view, arguments);
		if (!nodes) return;
		view.repairParentChkClassWithSelf(setting, parentNode);
	}
	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var parentNode = node.getParentNode();
		if (_removeNode) _removeNode.apply(view, arguments);
		if (!node || !parentNode) return;
		view.repairChkClass(setting, parentNode);
		view.repairParentChkClass(setting, parentNode);
	}
})(jQuery);
/*
 * JQuery zTree exedit 3.3
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2012-07-16
 */
(function($){
	//default consts of exedit
	var _consts = {
		event: {
			DRAG: "ztree_drag",
			DROP: "ztree_drop",
			REMOVE: "ztree_remove",
			RENAME: "ztree_rename"
		},
		id: {
			EDIT: "_edit",
			INPUT: "_input",
			REMOVE: "_remove"
		},
		move: {
			TYPE_INNER: "inner",
			TYPE_PREV: "prev",
			TYPE_NEXT: "next"
		},
		node: {
			CURSELECTED_EDIT: "curSelectedNode_Edit",
			TMPTARGET_TREE: "tmpTargetzTree",
			TMPTARGET_NODE: "tmpTargetNode"
		}
	},
	//default setting of exedit
	_setting = {
		edit: {
			enable: false,
			editNameSelectAll: false,
			showRemoveBtn: true,
			showRenameBtn: true,
			removeTitle: "remove",
			renameTitle: "rename",
			drag: {
				autoExpandTrigger: false,
				isCopy: true,
				isMove: true,
				prev: true,
				next: true,
				inner: true,
				minMoveSize: 5,
				borderMax: 10,
				borderMin: -5,
				maxShowNodeNum: 5,
				autoOpenTime: 500
			}
		},
		view: {
			addHoverDom: null,
			removeHoverDom: null
		},
		callback: {
			beforeDrag:null,
			beforeDragOpen:null,
			beforeDrop:null,
			beforeEditName:null,
			beforeRename:null,
			onDrag:null,
			onDrop:null,
			onRename:null
		}
	},
	//default root of exedit
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		r.curEditNode = null;
		r.curEditInput = null;
		r.curHoverNode = null;
		r.dragFlag = 0;
		r.dragNodeShowBefore = [];
		r.dragMaskList = new Array();
		r.showHoverDom = true;
	},
	//default cache of exedit
	_initCache = function(treeId) {},
	//default bind event of exedit
	_bindEvent = function(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.unbind(c.RENAME);
		o.bind(c.RENAME, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRename, [event, treeId, treeNode]);
		});

		o.unbind(c.REMOVE);
		o.bind(c.REMOVE, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRemove, [event, treeId, treeNode]);
		});

		o.unbind(c.DRAG);
		o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {
			tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);
		});

		o.unbind(c.DROP);
		o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);
		});
	},
	//default event proxy of exedit
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		relatedTarget = e.relatedTarget,
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(e.type, "mouseover")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tmp.parentNode.id;
				nodeEventType = "hoverOverNode";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			tmp = tools.getMDom(setting, relatedTarget, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if (tools.eqs(e.type, "mousedown")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tmp.parentNode.id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "mousedownNode" :
					nodeEventCallback = _handler.onMousedownNode;
					break;
				case "hoverOverNode" :
					nodeEventCallback = _handler.onHoverOverNode;
					break;
				case "hoverOutNode" :
					nodeEventCallback = _handler.onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of exedit
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		n.isHover = false;
		n.editNameFlag = false;
	},
	//update zTreeObj, add method of edit
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.cancelEditName = function(newName) {
			var root = data.getRoot(setting),
			nameKey = setting.data.key.name,
			node = root.curEditNode;
			if (!root.curEditNode) return;
			view.cancelCurEditNode(setting, newName?newName:node[nameKey]);
		}
		zTreeTools.copyNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return null;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;
			var newNode = tools.clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = consts.move.TYPE_INNER;
			}
			if (moveType == consts.move.TYPE_INNER) {
				function copyCallback() {
					view.addNodes(setting, targetNode, [newNode], isSilent);
				}

				if (tools.canAsync(setting, targetNode)) {
					view.asyncNode(setting, targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				view.addNodes(setting, targetNode.parentNode, [newNode], isSilent);
				view.moveNode(setting, targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		}
		zTreeTools.editName = function(node) {
			if (!node || !node.tId || node !== data.getNodeCache(setting, node.tId)) return;
			if (node.parentTId) view.expandCollapseParentNode(setting, node.getParentNode(), true);
			view.editNode(setting, node)
		}
		zTreeTools.moveNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return node;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && ((node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER) || $("#" + node.tId).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}
			function moveCallback() {
				view.moveNode(setting, targetNode, node, moveType, false, isSilent);
			}
			if (tools.canAsync(setting, targetNode)) {
				view.asyncNode(setting, targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		}
		zTreeTools.setEditable = function(editable) {
			setting.edit.enable = editable;
			return this.refresh();
		}
	},
	//method of operate data
	_data = {
		setSonNodeLevel: function(setting, parentNode, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			node.level = (parentNode)? parentNode.level + 1 : 0;
			if (!node[childKey]) return;
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				if (node[childKey][i]) data.setSonNodeLevel(setting, node, node[childKey][i]);
			}
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onHoverOverNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode != node) {
				_handler.onHoverOutNode(event);
			}
			root.curHoverNode = node;
			view.addHoverDom(setting, node);
		},
		onHoverOutNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {
				view.removeTreeDom(setting, root.curHoverNode);
				root.curHoverNode = null;
			}
		},
		onMousedownNode: function(eventMouseDown, _node) {
			var i,l,
			setting = data.getSetting(eventMouseDown.data.treeId),
			root = data.getRoot(setting);
			//right click can't drag & drop
			if (eventMouseDown.button == 2 || !setting.edit.enable || (!setting.edit.drag.isCopy && !setting.edit.drag.isMove)) return true;

			//input of edit node name can't drag & drop
			var target = eventMouseDown.target,
			_nodes = data.getRoot(setting).curSelectedList,
			nodes = [];
			if (!data.isSelectedNode(setting, _node)) {
				nodes = [_node];
			} else {
				for (i=0, l=_nodes.length; i<l; i++) {
					if (_nodes[i].editNameFlag && tools.eqs(target.tagName, "input") && target.getAttribute("treeNode"+consts.id.INPUT) !== null) {
						return true;
					}
					nodes.push(_nodes[i]);
					if (nodes[0].parentTId !== _nodes[i].parentTId) {
						nodes = [_node];
						break;
					}
				}
			}

			view.editNodeBlur = true;
			view.cancelCurEditNode(setting, null, true);
			

			var doc = $(document), curNode, tmpArrow, tmpTarget,
			isOtherTree = false,
			targetSetting = setting,
			preNode, nextNode,
			preTmpTargetNodeId = null,
			preTmpMoveType = null,
			tmpTargetNodeId = null,
			moveType = consts.move.TYPE_INNER,
			mouseDownX = eventMouseDown.clientX,
			mouseDownY = eventMouseDown.clientY,
			startTime = (new Date()).getTime();

			if (tools.uCanDo(setting)) {
				doc.bind("mousemove", _docMouseMove);
			}
			function _docMouseMove(event) {
				//avoid start drag after click node
				if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize
					&& Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {
					return true;
				}
				var i, l, tmpNode, tmpDom, tmpNodes,
				childKey = setting.data.key.children;
				tools.noSel(setting);
				$("body").css("cursor", "pointer");

				if (root.dragFlag == 0) {
					if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {
						_docMouseUp(event);
						return true;
					}

					for (i=0, l=nodes.length; i<l; i++) {
						if (i==0) {
							root.dragNodeShowBefore = [];
						}
						tmpNode = nodes[i];
						if (tmpNode.isParent && tmpNode.open) {
							view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
							root.dragNodeShowBefore[tmpNode.tId] = true;
						} else {
							root.dragNodeShowBefore[tmpNode.tId] = false;
						}
					}

					root.dragFlag = 1;
					root.showHoverDom = false;
					tools.showIfameMask(setting, true);

					//sort
					var isOrder = true, lastIndex = -1;
					if (nodes.length>1) {
						var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : data.getNodes(setting);
						tmpNodes = [];
						for (i=0, l=pNodes.length; i<l; i++) {
							if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
								if (isOrder && lastIndex > -1 && (lastIndex+1) !== i) {
									isOrder = false;
								}
								tmpNodes.push(pNodes[i]);
								lastIndex = i;
							}
							if (nodes.length === tmpNodes.length) {
								nodes = tmpNodes;
								break;
							}
						}
					}
					if (isOrder) {
						preNode = nodes[0].getPreNode();
						nextNode = nodes[nodes.length-1].getNextNode();
					}

					//set node in selected
					curNode = $("<ul class='zTreeDragUL'></ul>");
					for (i=0, l=nodes.length; i<l; i++) {
						tmpNode = nodes[i];
						tmpNode.editNameFlag = false;
						view.selectNode(setting, tmpNode, i>0);
						view.removeTreeDom(setting, tmpNode);

						tmpDom = $("<li id='"+ tmpNode.tId +"_tmp'></li>");
						tmpDom.append($("#" + tmpNode.tId + consts.id.A).clone());
						tmpDom.css("padding", "0");
						tmpDom.children("#" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);
						curNode.append(tmpDom);
						if (i == setting.edit.drag.maxShowNodeNum-1) {
							tmpDom = $("<li id='"+ tmpNode.tId +"_moretmp'><a>  ...  </a></li>");
							curNode.append(tmpDom);
							break;
						}
					}
					curNode.attr("id", nodes[0].tId + consts.id.UL + "_tmp");
					curNode.addClass(setting.treeObj.attr("class"));
					curNode.appendTo("body");

					tmpArrow = $("<span class='tmpzTreeMove_arrow'></span>");
					tmpArrow.attr("id", "zTreeMove_arrow_tmp");
					tmpArrow.appendTo("body");

					setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);
				}

				if (root.dragFlag == 1) {
					if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft()+2) > ($("#" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left)) {
						var xT = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget);
						event.target = (xT.length > 0) ? xT.get(0) : event.target;
					} else if (tmpTarget) {
						tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
						if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
					}
					tmpTarget = null;
					tmpTargetNodeId = null;

					//judge drag & drop in multi ztree
					isOtherTree = false;
					targetSetting = setting;
					var settings = data.getSettings();
					for (var s in settings) {
						if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId
							&& (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length>0)) {
							isOtherTree = true;
							targetSetting = settings[s];
						}
					}

					var docScrollTop = doc.scrollTop(),
					docScrollLeft = doc.scrollLeft(),
					treeOffset = targetSetting.treeObj.offset(),
					scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
					scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
					dTop = (event.clientY + docScrollTop - treeOffset.top),
					dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),
					dLeft = (event.clientX + docScrollLeft - treeOffset.left),
					dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),
					isTop = (dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin),
					isBottom = (dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin),
					isLeft = (dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin),
					isRight = (dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin),
					isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,
					isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),
					isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height()+10) >= scrollHeight),
					isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),
					isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width()+10) >= scrollWidth);

					if (event.target.id && targetSetting.treeObj.find("#" + event.target.id).length > 0) {
						//get node <li> dom
						var targetObj = event.target;
						while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
							targetObj = targetObj.parentNode;
						}

						var canMove = true;
						//don't move to self or children of self
						for (i=0, l=nodes.length; i<l; i++) {
							tmpNode = nodes[i];
							if (targetObj.id === tmpNode.tId) {
								canMove = false;
								break;
							} else if ($("#" + tmpNode.tId).find("#" + targetObj.id).length > 0) {
								canMove = false;
								break;
							}
						}
						if (canMove) {
							if (event.target.id &&
								(event.target.id == (targetObj.id + consts.id.A) || $(event.target).parents("#" + targetObj.id + consts.id.A).length > 0)) {
								tmpTarget = $(targetObj);
								tmpTargetNodeId = targetObj.id;
							}
						}
					}

					//the mouse must be in zTree
					tmpNode = nodes[0];
					if (isTreeInner && (event.target.id == targetSetting.treeId || $(event.target).parents("#" + targetSetting.treeId).length>0)) {
						//judge mouse move in root of ztree
						if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {
							tmpTarget = targetSetting.treeObj;
						}
						//auto scroll top
						if (isTop) {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()-10);
						} else if (isBottom)  {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()+10);
						}
						if (isLeft) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()-10);
						} else if (isRight) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+10);
						}
						//auto scroll left
						if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+ tmpTarget.offset().left - targetSetting.treeObj.offset().left);
						}
					}

					curNode.css({
						"top": (event.clientY + docScrollTop + 3) + "px",
						"left": (event.clientX + docScrollLeft + 3) + "px"
					});

					var dX = 0;
					var dY = 0;
					if (tmpTarget && tmpTarget.attr("id")!=targetSetting.treeId) {
						var tmpTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId),
						isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy),
						isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
						isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
						isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),
						canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),
						canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),
						canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !tmpTargetNode.isParent) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);
						if (!canPrev && !canNext && !canInner) {
							tmpTarget = null;
							tmpTargetNodeId = "";
							moveType = consts.move.TYPE_INNER;
							tmpArrow.css({
								"display":"none"
							});
							if (window.zTreeMoveTimer) {
								clearTimeout(window.zTreeMoveTimer);
								window.zTreeMoveTargetNodeTId = null
							}
						} else {
							var tmpTargetA = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget),
							tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),
							tmpTop = tmpTargetA.offset().top,
							tmpLeft = tmpTargetA.offset().left,
							prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1) ) : -1,
							nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0) ) : -1,
							dY_percent = (event.clientY + docScrollTop - tmpTop)/tmpTargetA.height();
							if ((prevPercent==1 ||dY_percent<=prevPercent && dY_percent>=-.2) && canPrev) {
								dX = 1 - tmpArrow.width();
								dY = tmpTop - tmpArrow.height()/2;
								moveType = consts.move.TYPE_PREV;
							} else if ((nextPercent==0 || dY_percent>=nextPercent && dY_percent<=1.2) && canNext) {
								dX = 1 - tmpArrow.width();
								dY = (tmpNextA == null || (tmpTargetNode.isParent && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height()/2) : (tmpNextA.offset().top - tmpArrow.height()/2);
								moveType = consts.move.TYPE_NEXT;
							}else {
								dX = 5 - tmpArrow.width();
								dY = tmpTop;
								moveType = consts.move.TYPE_INNER;
							}
							tmpArrow.css({
								"display":"block",
								"top": dY + "px",
								"left": (tmpLeft + dX) + "px"
							});
							tmpTargetA.addClass(consts.node.TMPTARGET_NODE + "_" + moveType);

							if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
								startTime = (new Date()).getTime();
							}
							if (tmpTargetNode && tmpTargetNode.isParent && moveType == consts.move.TYPE_INNER) {
								var startTimer = true;
								if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {
									clearTimeout(window.zTreeMoveTimer);
									window.zTreeMoveTargetNodeTId = null;
								} else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {
									startTimer = false;
								}
								if (startTimer) {
									window.zTreeMoveTimer = setTimeout(function() {
										if (moveType != consts.move.TYPE_INNER) return;
										if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.edit.drag.autoOpenTime
											&& tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {
											view.switchNode(targetSetting, tmpTargetNode);
											if (targetSetting.edit.drag.autoExpandTrigger) {
												targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
											}
										}
									}, targetSetting.edit.drag.autoOpenTime+50);
									window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;
								}
							}
						}
					} else {
						moveType = consts.move.TYPE_INNER;
						if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {
							tmpTarget.addClass(consts.node.TMPTARGET_TREE);
						} else {
							tmpTarget = null;
						}
						tmpArrow.css({
							"display":"none"
						});
						if (window.zTreeMoveTimer) {
							clearTimeout(window.zTreeMoveTimer);
							window.zTreeMoveTargetNodeTId = null;
						}
					}
					preTmpTargetNodeId = tmpTargetNodeId;
					preTmpMoveType = moveType;
				}
				return false;
			}

			doc.bind("mouseup", _docMouseUp);
			function _docMouseUp(event) {
				if (window.zTreeMoveTimer) {
					clearTimeout(window.zTreeMoveTimer);
					window.zTreeMoveTargetNodeTId = null;
				}
				preTmpTargetNodeId = null;
				preTmpMoveType = null;
				doc.unbind("mousemove", _docMouseMove);
				doc.unbind("mouseup", _docMouseUp);
				doc.unbind("selectstart", _docSelect);
				$("body").css("cursor", "auto");
				if (tmpTarget) {
					tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
				}
				tools.showIfameMask(setting, false);

				root.showHoverDom = true;
				if (root.dragFlag == 0) return;
				root.dragFlag = 0;

				var i, l, tmpNode;
				for (i=0, l=nodes.length; i<l; i++) {
					tmpNode = nodes[i];
					if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
						view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
						delete root.dragNodeShowBefore[tmpNode.tId];
					}
				}

				if (curNode) curNode.remove();
				if (tmpArrow) tmpArrow.remove();

				var isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy);
				if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId==nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {
					tmpTarget = null;
				}
				if (tmpTarget) {
					var dragTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId);
					if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) return;
					var newNodes = isCopy ? tools.clone(nodes) : nodes;
					
					function dropCallback() {
						if (isOtherTree) {							
							if (!isCopy) {
								for(var i=0, l=nodes.length; i<l; i++) {
									view.removeNode(setting, nodes[i]);
								}
							}
							if (moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								if (moveType == consts.move.TYPE_PREV) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						} else {
							if (isCopy && moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								if (isCopy) {
									view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								}
								if (moveType == consts.move.TYPE_PREV) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						}
						for (i=0, l=newNodes.length; i<l; i++) {
							view.selectNode(targetSetting, newNodes[i], i>0);
						}
						$("#" + newNodes[0].tId).focus().blur();

					}

					if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {
						view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);
					} else {
						dropCallback();
					}

					setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
				} else {
					for (i=0, l=nodes.length; i<l; i++) {
						view.selectNode(targetSetting, nodes[i], i>0);
					}
					setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);
				}
			}

			doc.bind("selectstart", _docSelect);
			function _docSelect() {
				return false;
			}

			//Avoid FireFox's Bug
			//If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.
			if(eventMouseDown.preventDefault) {
				eventMouseDown.preventDefault();
			}
			return true;
		}
	},
	//method of tools for zTree
	_tools = {
		getAbs: function (obj) {
			var oRect = obj.getBoundingClientRect();
			return [oRect.left,oRect.top]
		},
		inputFocus: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				tools.setCursorPosition(inputObj.get(0), inputObj.val().length);
			}
		},
		inputSelect: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				inputObj.select();
			}
		},
		setCursorPosition: function(obj, pos){
			if(obj.setSelectionRange) {
				obj.focus();
				obj.setSelectionRange(pos,pos);
			} else if (obj.createTextRange) {
				var range = obj.createTextRange();
				range.collapse(true);
				range.moveEnd('character', pos);
				range.moveStart('character', pos);
				range.select();
			}
		},
		showIfameMask: function(setting, showSign) {
			var root = data.getRoot(setting);
			//clear full mask
			while (root.dragMaskList.length > 0) {
				root.dragMaskList[0].remove();
				root.dragMaskList.shift();
			}
			if (showSign) {
				//show mask
				var iframeList = $("iframe");
				for (var i = 0, l = iframeList.length; i < l; i++) {
					var obj = iframeList.get(i),
					r = tools.getAbs(obj),
					dragMask = $("<div id='zTreeMask_" + i + "' class='zTreeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>");
					dragMask.appendTo("body");
					root.dragMaskList.push(dragMask);
				}
			}
		}
	},
	//method of operate ztree dom
	_view = {
		addEditBtn: function(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.EDIT).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			editStr = "<span class='button edit' id='" + node.tId + consts.id.EDIT + "' title='"+tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle)+"' treeNode"+consts.id.EDIT+" style='display:none;'></span>";
			aObj.append(editStr);

			$("#" + node.tId + consts.id.EDIT).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;
					view.editNode(setting, node);
					return false;
				}
				).show();
		},
		addRemoveBtn: function(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.REMOVE).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			removeStr = "<span class='button remove' id='" + node.tId + consts.id.REMOVE + "' title='"+tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle)+"' treeNode"+consts.id.REMOVE+" style='display:none;'></span>";
			aObj.append(removeStr);

			$("#" + node.tId + consts.id.REMOVE).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;
					view.removeNode(setting, node);
					setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					return false;
				}
				).bind('mousedown',
				function(eventMouseDown) {
					return true;
				}
				).show();
		},
		addHoverDom: function(setting, node) {
			if (data.getRoot(setting).showHoverDom) {
				node.isHover = true;
				if (setting.edit.enable) {
					view.addEditBtn(setting, node);
					view.addRemoveBtn(setting, node);
				}
				tools.apply(setting.view.addHoverDom, [setting.treeId, node]);
			}
		},
		cancelCurEditNode: function (setting, forceName) {
			var root = data.getRoot(setting),
			nameKey = setting.data.key.name,
			node = root.curEditNode;
			
			if (node) {
				var inputObj = root.curEditInput;
				var newName = forceName ? forceName:inputObj.val();
				if (!forceName && tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName], true) === false) {
					node.editNameFlag = true;
					return false;
				} else {
					node[nameKey] = newName ? newName:inputObj.val();
					if (!forceName) {
						setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node]);
					}
				}
				var aObj = $("#" + node.tId + consts.id.A);
				aObj.removeClass(consts.node.CURSELECTED_EDIT);
				inputObj.unbind();
				view.setNodeName(setting, node);
				node.editNameFlag = false;
				root.curEditNode = null;
				root.curEditInput = null;
				view.selectNode(setting, node, false);
			}
			root.noSelection = true;
			return true;
		},
		editNode: function(setting, node) {
			var root = data.getRoot(setting);
			view.editNodeBlur = false;
			if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
				setTimeout(function() {tools.inputFocus(root.curEditInput);}, 0);
				return;
			}
			var nameKey = setting.data.key.name;
			node.editNameFlag = true;
			view.removeTreeDom(setting, node);
			view.cancelCurEditNode(setting);
			view.selectNode(setting, node, false);
			$("#" + node.tId + consts.id.SPAN).html("<input type=text class='rename' id='" + node.tId + consts.id.INPUT + "' treeNode" + consts.id.INPUT + " >");
			var inputObj = $("#" + node.tId + consts.id.INPUT);
			inputObj.attr("value", node[nameKey]);
			if (setting.edit.editNameSelectAll) {
				tools.inputSelect(inputObj);
			} else {
				tools.inputFocus(inputObj);
			}

			inputObj.bind('blur', function(event) {
				if (!view.editNodeBlur) {
					view.cancelCurEditNode(setting);
				}
			}).bind('keydown', function(event) {
				if (event.keyCode=="13") {
					view.editNodeBlur = true;
					view.cancelCurEditNode(setting, null, true);
				} else if (event.keyCode=="27") {
					view.cancelCurEditNode(setting, node[nameKey]);
				}
			}).bind('click', function(event) {
				return false;
			}).bind('dblclick', function(event) {
				return false;
			});

			$("#" + node.tId + consts.id.A).addClass(consts.node.CURSELECTED_EDIT);
			root.curEditInput = inputObj;
			root.noSelection = false;
			root.curEditNode = node;
		},
		moveNode: function(setting, targetNode, node, moveType, animateFlag, isSilent) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (targetNode == node) return;
			if (setting.data.keep.leaf && targetNode && !targetNode.isParent && moveType == consts.move.TYPE_INNER) return;
			var oldParentNode = (node.parentTId ? node.getParentNode(): root),
			targetNodeIsRoot = (targetNode === null || targetNode == root);
			if (targetNodeIsRoot && targetNode === null) targetNode = root;
			if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;
			var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);

			if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {
				moveType = consts.move.TYPE_INNER;
			}
			
			if (moveType == consts.move.TYPE_INNER) {
				if (targetNodeIsRoot) {
					//parentTId of root node is null
					node.parentTId = null;
				} else {
					if (!targetNode.isParent) {
						targetNode.isParent = true;
						targetNode.open = !!targetNode.open;
						view.setNodeLineIcos(setting, targetNode);
					}
					node.parentTId = targetNode.tId;
				}
			}

			//move node Dom
			var targetObj, target_ulObj;
			if (targetNodeIsRoot) {
				targetObj = setting.treeObj;
				target_ulObj = targetObj;
			} else {
				if (!isSilent && moveType == consts.move.TYPE_INNER) {
					view.expandCollapseNode(setting, targetNode, true, false);
				} else if (!isSilent) {
					view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);
				}
				targetObj = $("#" + targetNode.tId);
				target_ulObj = $("#" + targetNode.tId + consts.id.UL);
				if (!!targetObj.get(0) && !target_ulObj.get(0)) {
					var ulstr = [];
					view.makeUlHtml(setting, targetNode, ulstr, '');
					targetObj.append(ulstr.join(''));
				}
				target_ulObj = $("#" + targetNode.tId + consts.id.UL);
			}
			var nodeDom = $("#" + node.tId);
			if (!nodeDom.get(0)) {
				nodeDom = view.appendNodes(setting, node.level, [node], null, false, true).join('');
			} else if (!targetObj.get(0)) {
				nodeDom.remove();
			}
			if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {
				target_ulObj.append(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {
				targetObj.before(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {
				targetObj.after(nodeDom);
			}

			//repair the data after move
			var i,l,
			tmpSrcIndex = -1,
			tmpTargetIndex = 0,
			oldNeighbor = null,
			newNeighbor = null,
			oldLevel = node.level;
			if (node.isFirstNode) {
				tmpSrcIndex = 0;
				if (oldParentNode[childKey].length > 1 ) {
					oldNeighbor = oldParentNode[childKey][1];
					oldNeighbor.isFirstNode = true;
				}
			} else if (node.isLastNode) {
				tmpSrcIndex = oldParentNode[childKey].length -1;
				oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
				oldNeighbor.isLastNode = true;
			} else {
				for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
					if (oldParentNode[childKey][i].tId == node.tId) {
						tmpSrcIndex = i;
						break;
					}
				}
			}
			if (tmpSrcIndex >= 0) {
				oldParentNode[childKey].splice(tmpSrcIndex, 1);
			}
			if (moveType != consts.move.TYPE_INNER) {
				for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
					if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
				}
			}
			if (moveType == consts.move.TYPE_INNER) {
				if (!targetNode[childKey]) targetNode[childKey] = new Array();
				if (targetNode[childKey].length > 0) {
					newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
					newNeighbor.isLastNode = false;
				}
				targetNode[childKey].splice(targetNode[childKey].length, 0, node);
				node.isLastNode = true;
				node.isFirstNode = (targetNode[childKey].length == 1);
			} else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isFirstNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = true;
				node.isLastNode = false;

			} else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isLastNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = true;

			} else {
				if (moveType == consts.move.TYPE_PREV) {
					targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				} else {
					targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				}
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = false;
			}
			data.fixPIdKeyValue(setting, node);
			data.setSonNodeLevel(setting, node.getParentNode(), node);

			//repair node what been moved
			view.setNodeLineIcos(setting, node);
			view.repairNodeLevelClass(setting, node, oldLevel)

			//repair node's old parentNode dom
			if (!setting.data.keep.parent && oldParentNode[childKey].length < 1) {
				//old parentNode has no child nodes
				oldParentNode.isParent = false;
				oldParentNode.open = false;
				var tmp_ulObj = $("#" + oldParentNode.tId + consts.id.UL),
				tmp_switchObj = $("#" + oldParentNode.tId + consts.id.SWITCH),
				tmp_icoObj = $("#" + oldParentNode.tId + consts.id.ICON);
				view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (oldNeighbor) {
				//old neigbor node
				view.setNodeLineIcos(setting, oldNeighbor);
			}

			//new neigbor node
			if (newNeighbor) {
				view.setNodeLineIcos(setting, newNeighbor);
			}

			//repair checkbox / radio
			if (!!setting.check && setting.check.enable && view.repairChkClass) {
				view.repairChkClass(setting, oldParentNode);
				view.repairParentChkClassWithSelf(setting, oldParentNode);
				if (oldParentNode != node.parent)
					view.repairParentChkClassWithSelf(setting, node);
			}

			//expand parents after move
			if (!isSilent) {
				view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);
			}
		},
		removeEditBtn: function(node) {
			$("#" + node.tId + consts.id.EDIT).unbind().remove();
		},
		removeRemoveBtn: function(node) {
			$("#" + node.tId + consts.id.REMOVE).unbind().remove();
		},
		removeTreeDom: function(setting, node) {
			node.isHover = false;
			view.removeEditBtn(node);
			view.removeRemoveBtn(node);
			tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);
		},
		repairNodeLevelClass: function(setting, node, oldLevel) {
			if (oldLevel === node.level) return;
			var liObj = $("#" + node.tId),
			aObj = $("#" + node.tId + consts.id.A),
			ulObj = $("#" + node.tId + consts.id.UL),
			oldClass = "level" + oldLevel,
			newClass = "level" + node.level;
			liObj.removeClass(oldClass);
			liObj.addClass(newClass);
			aObj.removeClass(oldClass);
			aObj.addClass(newClass);
			ulObj.removeClass(oldClass);
			ulObj.addClass(newClass);
		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy);
	data.addInitRoot(_initRoot);
	data.addZTreeTools(_zTreeTools);

	var _cancelPreSelectedNode = view.cancelPreSelectedNode;
	view.cancelPreSelectedNode = function (setting, node) {
		var list = data.getRoot(setting).curSelectedList;
		for (var i=0, j=list.length; i<j; i++) {
			if (!node || node === list[i]) {
				view.removeTreeDom(setting, list[i]);
				if (node) break;
			}
		}
		if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);
	}

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) {
			_createNodes.apply(view, arguments);
		}
		if (!nodes) return;
		if (view.repairParentChkClassWithSelf) {
			view.repairParentChkClassWithSelf(setting, parentNode);
		}
	}

	view.makeNodeUrl = function(setting, node) {
		return (node.url && !setting.edit.enable) ? node.url : null;
	}

	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var root = data.getRoot(setting);
		if (root.curEditNode === node) root.curEditNode = null;
		if (_removeNode) {
			_removeNode.apply(view, arguments);
		}
	}

	var _selectNode = view.selectNode;
	view.selectNode = function(setting, node, addFlag) {
		var root = data.getRoot(setting);
		if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
			return false;
		}
		if (_selectNode) _selectNode.apply(view, arguments);
		view.addHoverDom(setting, node);
		return true;
	}

	var _uCanDo = tools.uCanDo;
	tools.uCanDo = function(setting, e) {
		var root = data.getRoot(setting);
		if (e && (tools.eqs(e.type, "mouseover") || tools.eqs(e.type, "mouseout") || tools.eqs(e.type, "mousedown") || tools.eqs(e.type, "mouseup"))) {
			return true;
		}
		return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply(view, arguments) : true);
	}
})(jQuery);

/*  Bizfoundation ui 5.1
 *  biz.utils.js 提供biz的前端工具
 *  Depends:
 *    biz.jquery.js
 *    biz.ui.core.js
 */

/**
 * @description {object} utils
 * 工具类，存放常用方法
 */
biz.utils = {
	/**
	 * 删除左空格
	 * @param arg
	 * @return string
	 * @since 1.0
	 * @author wangl
	 */
	ltrim: function(arg) {
		return arg.replace(/^\s*/, "");
	},

	/**
	 * 删除右空格
	 * @param name
	 * @return string
	 * @since 1.0
	 * @author wangl
	 */
	rtrim: function(s) {
		return s.replace(/\s*$/, "");
	},
	clone: function(myObj) {
		if (typeof(myObj) != 'object') return myObj;
		if (myObj == null) return myObj;

		var myNewObj = new Object();

		for (var i in myObj)
			myNewObj[i] = this.clone(myObj[i]);

		return myNewObj;
	},
	/**
	 * 切换页面主题样式，并刷新当前页面
	 * @param csstheme 主题名称
	 */
	switchTheme: function(csstheme) {
		if (csstheme == null || csstheme == "") return;
		$.post(window.location.href, {
			theme: csstheme
		}, function() {
			window.location.href = window.location.href;
		});
	},
	/**
	 * 格式id，如包含#则去掉#
	 * @param sid id值
	 */
	id: function(sid) {
		return (sid.indexOf("#") == 0) ? (sid.substring(1)) : sid;
	},
	/**
	 * 创建隐藏域
	 * @param name 隐藏域的名称
	 * @param value 隐藏域的值
	 * @return hidden element
	 * @since 1.0
	 * @author wangl
	 */
	createHidden: function(name, value) {
		var input = document.createElement("input");
		input.type = "hidden";
		input.id = name;
		input.name = name;
		input.value = value;
		return input;
	},
	/**
	 * ajax请求错误信息处理
	 * @param xhr XMLHttpRequest 对象
	 * @param error 错误信息 捕获的异常对象
	 * @param thrown 捕获的异常对象
	 * @author jdh
	 */
	loadError: function(xhr, error, thrown) {
		var $html = xhr.responseText ? xhr.responseText : I18N.ajax_error + I18N.ajax_readyState[xhr.readyState];
		//错误信息以弹窗口方式显示
		var errorDialog = new biz.dialog({
			id: $("<div>" + $html + "</div>"),
			modal: true,
			width: "80%",
			height: 400,
			title: $.jgrid.errors.server,
			close: function(event, ui) {
				errorDialog.destroy();
			}
		});
		errorDialog.open();
	},
	/**
	 *序列化form表单元素
	 * @param target form对应的jquery对象/jquery选择器
	 * @author jdh
	 */
	serialize: function(target) {
		return $(target).serialize();
	},
	/**
	 *序列化form表单元素为对象
	 * @param target form对应的jquery对象/jquery选择器
	 * @param isPostEmpty 设置空值字段是否序列化
	 * @author jdh
	 */
	serializeObject: function(target, isPostEmpty) {
		var tempPostData = {}, attrArray = $(target).serializeArray();
		$.each(attrArray, function(index, attrObj) {
			if (tempPostData[attrObj.name]) {
				if ($.isArray(tempPostData[attrObj.name])) {
					tempPostData[attrObj.name].push(attrObj.value);
				} else {
					tempPostData[attrObj.name] = [tempPostData[attrObj.name], attrObj.value];
				}
			} else if ( !! isPostEmpty || !! attrObj.value) {
				tempPostData[attrObj.name] = attrObj.value;
			}
		})
		return tempPostData;
	},
	/**
	 * 转换form表单元素为数组
	 * @param target form对应的jquery对象/jquery选择器
	 * @author jdh
	 */
	serializeArray: function(target) {
		return $(target).serializeArray();
	},
	/**
	 * 清空form表单元素内容
	 * @param target form对应的jquery对象/jquery选择器
	 * @author jdh
	 */
	clearForm: function(target) {
		var $this = this,
			tempUiObj;
		//清空下拉列表和下拉树组件内容
		$(target + " input").each(function() {
			tempUiObj = $this.getUiObj(this.id);
			if ( !! tempUiObj && (tempUiObj.uiType == "comboboxlist" || tempUiObj.uiType == "comboboxtree")) {
				$this.val(this.id, "");
			}
			$(this).removeClass("validatebox");
  			$(this).removeClass("error");
		})
		$(target).find("input[type='file']").each(function() {
			$(this).file("reset");
		});
     	 $(target + " div.diverr").each(function(){
   			$($(this).children()).unwrap();
   		 });
     	 $(target + " select").each(function(){
     		 $(this).removeClass("validatebox");
   			 $(this).removeClass("error");
    	 });
       	$(target+" div[name='_diverr']").each(function(){
   		     $($(this).children()).unwrap();
  		 });

		 $(document).find("div[class='error validatebox']").each(function() {
			$(this).remove();
	 	 });
		
		return $(target).clearForm();
	},
	/**
	 * 重置form表单元素内容
	 * @param target form对应的jquery对象/jquery选择器
	 * @author jdh
	 */
	resetForm: function(target) {
		var $this = this,
			tempUiObj;
		//清空下拉列表和下拉树组件内容
		$(target + " input").each(function() {
			tempUiObj = $this.getUiObj(this.id);
			if ( !! tempUiObj && (tempUiObj.uiType == "comboboxlist" || tempUiObj.uiType == "comboboxtree")) {
				$this.val(this.id, "");
			}
			$(this).removeClass("validatebox");
  			$(this).removeClass("error");
		})
		$(target).find("input[type='file']").each(function() {
			$(this).file("reset");
		});
     	 $(target + " div.diverr").each(function(){
   			$($(this).children()).unwrap();
   		 });
     	 $(target + " select").each(function(){
     		 $(this).removeClass("validatebox");
   			 $(this).removeClass("error");
    	 });
     	 $(target+" div[name='_diverr']").each(function(){
    		 $($(this).children()).unwrap();
   		 });

		 $(document).find("div[class='error validatebox']").each(function() {
			$(this).remove();
	 	 });
		return $(target).resetForm();
	},

	/**
	 * 获取录入组件校验属性定义
	 * @param opts 录入组件属性定义
	 */
	getValidOptions: function(opts) {
		var validOpts = undefined;
		if (opts.validation != undefined && opts.validation != null) {
			opts.validation.id = opts.id;
			validOpts = opts.validation;
			delete opts.validation; //删除，避免重复执行添加校验的逻辑
		}
		return validOpts;
	},
	/**
	 * 初始化组件校验
	 * @param opts 校验组件属性定义
	 */
	initValidate: function(validOpts) {
		if (validOpts != undefined && validOpts != null) {
			new biz.validate(validOpts);
		}
	},
	/**
	 * 获取指定id对应ui组件的obj
	 * @param sid id值
	 */
	getUiObj: function(sid) {
		return biz.uiObj[this.id(sid)];
	},
	/**
	 * 设置/获取ui组件值，如组件没通过biz渲染调用jquery的val方法处理
	 * @param id 组件id
	 * @param value 设置组件的值  如此参数为空则返回组件值
	 */
	val: function(id, value) {
		var uiObj = this.getUiObj(id);
		if (value != "undefined" && value != null) { !! uiObj ? uiObj.setValue(value) : $("#" + this.id(id)).val(value);
		} else {
			return !!uiObj ? uiObj.getValue() : $("#" + this.id(id)).val();
		}
	},
	/**
	 * 为validate校验组件添加校验规则的全局方法
	 * @param rules 新规则数组 [{name:"",methodfuc:function(value, element){……},message:""},{},……]
	 */
	addValidateRules: function(rules) {
		$(rules).each(function(i, n) {
			$.validator.addMethod(n.name, n.methodfuc, n.message);
		})
	},
	/**
	 * 设置validate组件校验规则提示信息的全局方法
	 * @param messages ,例如：
	 *          {
	 *               required: "必选字段",
	 *               rangelength: jQuery.validator.format("请输入一个长度介于 {0} 和 {1} 之间的字符串"),
	 *               number: "请输入合法的数字",
	 *               digits: "只能输入整数",
	 *               naturalnum: "只能输入自然数",
	 *               stringEN: "只能输入字母",
	 *               alnum: "只能输入字母+数字",
	 *               idcardno: "只能输入身份证",
	 *               postalcode: "只能输入邮政编码",
	 *               email: "请输入正确格式的电子邮件",
	 *               port: "请输入正确的端口",
	 *               ip: "请输入正确ip地址",
	 *               url: "请输入合法的网址",
	 *               stringCN: "只能输入汉字",
	 *               remote: "请修正该字段",
	 *               equalTo: "请再次输入相同的值"
	 *           }
	 */
	setValidateMessages: function(messages) {
		$.extend($.validator.messages, messages);
	},
	/**
	 * 触发validate校验组件
	 * @param formId 触发校验form的id
	 * @returns 校验成功返回true  否则返回false
	 */
	triggerValidate: function(formId) {
		return $(formId).valid();
	}
}
/*  bootstrap 2.3.1
 *
 *  Includes:
 *  1。  bootstrap-transition.js（过渡效果）
 *  2. bootstrap-dropdown.js（下拉菜单）
 *  3. bootstrap-scrollspy.js（滚动监听，比较有用）
 *  4. bootstrap-tab.js（tab页切换，2种方式提供，可以提供css自己实现逻辑，也提供js方式的调用）
 *  5。  bootstrap-tooltip.js（工具提示）
 *  6. bootstrap-popover.js（弹出提示）
 *  7. bootstrap-alert.js（警告信息）
 *  8. bootstrap-collapse.js（折叠，管理控制台的树组件等）
 *  9. bootstrap-affix.js（附加导航，boot示例中心的左侧的就是）
 *  10. bootstrap-carousel.js（轮播控件）
 *
 *  Depends:
 *  biz.jquery.js
 * /

/* ===================================================
 * bootstrap-transition.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#transitions
 * ===================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = (function () {

      var transitionEnd = (function () {

        var el = document.createElement('bootstrap')
          , transEndEventNames = {
               'WebkitTransition' : 'webkitTransitionEnd'
            ,  'MozTransition'    : 'transitionend'
            ,  'OTransition'      : 'oTransitionEnd otransitionend'
            ,  'transition'       : 'transitionend'
            }
          , name

        for (name in transEndEventNames){
          if (el.style[name] !== undefined) {
            return transEndEventNames[name]
          }
        }

      }())

      return transitionEnd && {
        end: transitionEnd
      }

    })()

  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-alert.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* ALERT CLASS DEFINITION
  * ====================== */

  var dismiss = '[data-dismiss="alert"]'
    , Alert = function (el) {
        $(el).on('click', dismiss, this.close)
      }

  Alert.prototype.close = function (e) {
    var $this = $(this)
      , selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)

    e && e.preventDefault()

    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())

    $parent.trigger(e = $.Event('close'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent
        .trigger('closed')
        .remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent.on($.support.transition.end, removeElement) :
      removeElement()
  }


 /* ALERT PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('alert')
      if (!data) $this.data('alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


 /* ALERT NO CONFLICT
  * ================= */

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


 /* ALERT DATA-API
  * ============== */

  $(document).on('click.alert.data-api', dismiss, Alert.prototype.close)

}(window.jQuery);
/* ==========================================================
 * bootstrap-carousel.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* CAROUSEL CLASS DEFINITION
  * ========================= */

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options = options
    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.prototype = {

    cycle: function (e) {
      if (!e) this.paused = false
      if (this.interval) clearInterval(this.interval);
      this.options.interval
        && !this.paused
        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
      return this
    }

  , getActiveIndex: function () {
      this.$active = this.$element.find('.item.active')
      this.$items = this.$active.parent().children()
      return this.$items.index(this.$active)
    }

  , to: function (pos) {
      var activeIndex = this.getActiveIndex()
        , that = this

      if (pos > (this.$items.length - 1) || pos < 0) return

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos)
        })
      }

      if (activeIndex == pos) {
        return this.pause().cycle()
      }

      return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
    }

  , pause: function (e) {
      if (!e) this.paused = true
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end)
        this.cycle(true)
      }
      clearInterval(this.interval)
      this.interval = null
      return this
    }

  , next: function () {
      if (this.sliding) return
      return this.slide('next')
    }

  , prev: function () {
      if (this.sliding) return
      return this.slide('prev')
    }

  , slide: function (type, next) {
      var $active = this.$element.find('.item.active')
        , $next = next || $active[type]()
        , isCycling = this.interval
        , direction = type == 'next' ? 'left' : 'right'
        , fallback  = type == 'next' ? 'first' : 'last'
        , that = this
        , e

      this.sliding = true

      isCycling && this.pause()

      $next = $next.length ? $next : this.$element.find('.item')[fallback]()

      e = $.Event('slide', {
        relatedTarget: $next[0]
      , direction: direction
      })

      if ($next.hasClass('active')) return

      if (this.$indicators.length) {
        this.$indicators.find('.active').removeClass('active')
        this.$element.one('slid', function () {
          var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
          $nextIndicator && $nextIndicator.addClass('active')
        })
      }

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $next.addClass(type)
        $next[0].offsetWidth // force reflow
        $active.addClass(direction)
        $next.addClass(direction)
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
      } else {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $active.removeClass('active')
        $next.addClass('active')
        this.sliding = false
        this.$element.trigger('slid')
      }

      isCycling && this.cycle()

      return this
    }

  }


 /* CAROUSEL PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('carousel')
        , options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option)
        , action = typeof option == 'string' ? option : options.slide
      if (!data) $this.data('carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.defaults = {
    interval: 5000
  , pause: 'hover'
  }

  $.fn.carousel.Constructor = Carousel


 /* CAROUSEL NO CONFLICT
  * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }

 /* CAROUSEL DATA-API
  * ================= */

  $(document).on('click.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this = $(this), href
      , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      , options = $.extend({}, $target.data(), $this.data())
      , slideIndex

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('carousel').pause().to(slideIndex).cycle()
    }

    e.preventDefault()
  })

}(window.jQuery);/* =============================================================
 * bootstrap-collapse.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#collapse
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* COLLAPSE PUBLIC CLASS DEFINITION
  * ================================ */

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse.defaults, options)

    if (this.options.parent) {
      this.$parent = $(this.options.parent)
    }

    this.options.toggle && this.toggle()
  }

  Collapse.prototype = {

    constructor: Collapse

  , dimension: function () {
      var hasWidth = this.$element.hasClass('width')
      return hasWidth ? 'width' : 'height'
    }

  , show: function () {
      var dimension
        , scroll
        , actives
        , hasData

      if (this.transitioning || this.$element.hasClass('in')) return

      dimension = this.dimension()
      scroll = $.camelCase(['scroll', dimension].join('-'))
      actives = this.$parent && this.$parent.find('> .accordion-group > .in')

      if (actives && actives.length) {
        hasData = actives.data('collapse')
        if (hasData && hasData.transitioning) return
        actives.collapse('hide')
        hasData || actives.data('collapse', null)
      }

      this.$element[dimension](0)
      this.transition('addClass', $.Event('show'), 'shown')
      $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

  , hide: function () {
      var dimension
      if (this.transitioning || !this.$element.hasClass('in')) return
      dimension = this.dimension()
      this.reset(this.$element[dimension]())
      this.transition('removeClass', $.Event('hide'), 'hidden')
      this.$element[dimension](0)
    }

  , reset: function (size) {
      var dimension = this.dimension()

      this.$element
        .removeClass('collapse')
        [dimension](size || 'auto')
        [0].offsetWidth

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

      return this
    }

  , transition: function (method, startEvent, completeEvent) {
      var that = this
        , complete = function () {
            if (startEvent.type == 'show') that.reset()
            that.transitioning = 0
            that.$element.trigger(completeEvent)
          }

      this.$element.trigger(startEvent)

      if (startEvent.isDefaultPrevented()) return

      this.transitioning = 1

      this.$element[method]('in')

      $.support.transition && this.$element.hasClass('collapse') ?
        this.$element.one($.support.transition.end, complete) :
        complete()
    }

  , toggle: function () {
      this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

  }


 /* COLLAPSE PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('collapse')
        , options = $.extend({}, $.fn.collapse.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.defaults = {
    toggle: true
  }

  $.fn.collapse.Constructor = Collapse


 /* COLLAPSE NO CONFLICT
  * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


 /* COLLAPSE DATA-API
  * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href
      , target = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
      , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
  })

}(window.jQuery);/* ============================================================
 * bootstrap-dropdown.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* DROPDOWN CLASS DEFINITION
  * ========================= */

  var toggle = '[data-toggle=dropdown]'
    , Dropdown = function (element) {
        var $el = $(element).on('click.dropdown.data-api', this.toggle)
        $('html').on('click.dropdown.data-api', function () {
          $el.parent().removeClass('open')
        })
      }

  Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function (e) {
      var $this = $(this)
        , $parent
        , isActive

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      clearMenus()

      if (!isActive) {
        $parent.toggleClass('open')
      }

      $this.focus()

      return false
    }

  , keydown: function (e) {
      var $this
        , $items
        , $active
        , $parent
        , isActive
        , index

      if (!/(38|40|27)/.test(e.keyCode)) return

      $this = $(this)

      e.preventDefault()
      e.stopPropagation()

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      if (!isActive || (isActive && e.keyCode == 27)) {
        if (e.which == 27) $parent.find(toggle).focus()
        return $this.click()
      }

      $items = $('[role=menu] li:not(.divider):visible a', $parent)

      if (!$items.length) return

      index = $items.index($items.filter(':focus'))

      if (e.keyCode == 38 && index > 0) index--                                        // up
      if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
      if (!~index) index = 0

      $items
        .eq(index)
        .focus()
    }

  }

  function clearMenus() {
    $(toggle).each(function () {
      getParent($(this)).removeClass('open')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = selector && $(selector)

    if (!$parent || !$parent.length) $parent = $this.parent()

    return $parent
  }


  /* DROPDOWN PLUGIN DEFINITION
   * ========================== */

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('dropdown')
      if (!data) $this.data('dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


 /* DROPDOWN NO CONFLICT
  * ==================== */

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  /* APPLY TO STANDARD DROPDOWN ELEMENTS
   * =================================== */

  $(document)
    .on('click.dropdown.data-api', clearMenus)
    .on('click.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.dropdown-menu', function (e) { e.stopPropagation() })
    .on('click.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
    .on('keydown.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

}(window.jQuery);

/* ===========================================================
 * bootstrap-tooltip.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TOOLTIP PUBLIC CLASS DEFINITION
  * =============================== */

  var Tooltip = function (element, options) {
    this.init('tooltip', element, options)
  }

  Tooltip.prototype = {

    constructor: Tooltip

  , init: function (type, element, options) {
      var eventIn
        , eventOut
        , triggers
        , trigger
        , i

      this.type = type
      this.$element = $(element)
      this.options = this.getOptions(options)
      this.enabled = true

      triggers = this.options.trigger.split(' ')

      for (i = triggers.length; i--;) {
        trigger = triggers[i]
        if (trigger == 'click') {
          this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
        } else if (trigger != 'manual') {
          eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
          eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
          this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
          this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
        }
      }

      this.options.selector ?
        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
        this.fixTitle()
    }

  , getOptions: function (options) {
      options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options)

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay
        , hide: options.delay
        }
      }

      return options
    }

  , enter: function (e) {
      var defaults = $.fn[this.type].defaults
        , options = {}
        , self

      this._options && $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value
      }, this)

      self = $(e.currentTarget)[this.type](options).data(this.type)

      if (!self.options.delay || !self.options.delay.show) return self.show()

      clearTimeout(this.timeout)
      self.hoverState = 'in'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'in') self.show()
      }, self.options.delay.show)
    }

  , leave: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (this.timeout) clearTimeout(this.timeout)
      if (!self.options.delay || !self.options.delay.hide) return self.hide()

      self.hoverState = 'out'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'out') self.hide()
      }, self.options.delay.hide)
    }

  , show: function () {
      var $tip
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp
        , e = $.Event('show')

      if (this.hasContent() && this.enabled) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $tip = this.tip()
        this.setContent()

        if (this.options.animation) {
          $tip.addClass('fade')
        }

        placement = typeof this.options.placement == 'function' ?
          this.options.placement.call(this, $tip[0], this.$element[0]) :
          this.options.placement

        $tip
          .detach()
          .css({ top: 0, left: 0, display: 'block' })

        this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

        pos = this.getPosition()

        actualWidth = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight

        switch (placement) {
          case 'bottom':
            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'top':
            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'left':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
            break
          case 'right':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
            break
        }

        this.applyPlacement(tp, placement)
        this.$element.trigger('shown')
      }
    }

  , applyPlacement: function(offset, placement){
      var $tip = this.tip()
        , width = $tip[0].offsetWidth
        , height = $tip[0].offsetHeight
        , actualWidth
        , actualHeight
        , delta
        , replace

      $tip
        .offset(offset)
        .addClass(placement)
        .addClass('in')

      actualWidth = $tip[0].offsetWidth
      actualHeight = $tip[0].offsetHeight

      if (placement == 'top' && actualHeight != height) {
        offset.top = offset.top + height - actualHeight
        replace = true
      }

      if (placement == 'bottom' || placement == 'top') {
        delta = 0

        if (offset.left < 0){
          delta = offset.left * -2
          offset.left = 0
          $tip.offset(offset)
          actualWidth = $tip[0].offsetWidth
          actualHeight = $tip[0].offsetHeight
        }

        this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
      } else {
        this.replaceArrow(actualHeight - height, actualHeight, 'top')
      }

      if (replace) $tip.offset(offset)
    }

  , replaceArrow: function(delta, dimension, position){
      this
        .arrow()
        .css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
    }

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
      $tip.removeClass('fade in top bottom left right')
    }

  , hide: function () {
      var that = this
        , $tip = this.tip()
        , e = $.Event('hide')

      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return

      $tip.removeClass('in')

      function removeWithAnimation() {
        var timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach()
        }, 500)

        $tip.one($.support.transition.end, function () {
          clearTimeout(timeout)
          $tip.detach()
        })
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        removeWithAnimation() :
        $tip.detach()

      this.$element.trigger('hidden')

      return this
    }

  , fixTitle: function () {
      var $e = this.$element
      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
      }
    }

  , hasContent: function () {
      return this.getTitle()
    }

  , getPosition: function () {
      var el = this.$element[0]
      return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
        width: el.offsetWidth
      , height: el.offsetHeight
      }, this.$element.offset())
    }

  , getTitle: function () {
      var title
        , $e = this.$element
        , o = this.options

      title = $e.attr('data-original-title')
        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

      return title
    }

  , tip: function () {
      return this.$tip = this.$tip || $(this.options.template)
    }

  , arrow: function(){
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }

  , validate: function () {
      if (!this.$element[0].parentNode) {
        this.hide()
        this.$element = null
        this.options = null
      }
    }

  , enable: function () {
      this.enabled = true
    }

  , disable: function () {
      this.enabled = false
    }

  , toggleEnabled: function () {
      this.enabled = !this.enabled
    }

  , toggle: function (e) {
      var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this
      self.tip().hasClass('in') ? self.hide() : self.show()
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  }


 /* TOOLTIP PLUGIN DEFINITION
  * ========================= */

  var old = $.fn.tooltip

  $.fn.tooltip = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tooltip')
        , options = typeof option == 'object' && option
      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip

  $.fn.tooltip.defaults = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover focus'
  , title: ''
  , delay: 0
  , html: false
  , container: false
  }


 /* TOOLTIP NO CONFLICT
  * =================== */

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(window.jQuery);
/* ===========================================================
 * bootstrap-popover.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* POPOVER PUBLIC CLASS DEFINITION
  * =============================== */

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }


  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor: Popover

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()
        , content = this.getContent()

      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

      $tip.removeClass('fade top bottom left right in')
    }

  , hasContent: function () {
      return this.getTitle() || this.getContent()
    }

  , getContent: function () {
      var content
        , $e = this.$element
        , o = this.options

      content = (typeof o.content == 'function' ? o.content.call($e[0]) :  o.content)
        || $e.attr('data-content')

      return content
    }

  , tip: function () {
      if (!this.$tip) {
        this.$tip = $(this.options.template)
      }
      return this.$tip
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  })


 /* POPOVER PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('popover')
        , options = typeof option == 'object' && option
      if (!data) $this.data('popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover

  $.fn.popover.defaults = $.extend({} , $.fn.tooltip.defaults, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


 /* POPOVER NO CONFLICT
  * =================== */

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(window.jQuery);
/* =============================================================
 * bootstrap-scrollspy.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#scrollspy
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* SCROLLSPY CLASS DEFINITION
  * ========================== */

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this)
      , $element = $(element).is('body') ? $(window) : $(element)
      , href
    this.options = $.extend({}, $.fn.scrollspy.defaults, options)
    this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process)
    this.selector = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.$body = $('body')
    this.refresh()
    this.process()
  }

  ScrollSpy.prototype = {

      constructor: ScrollSpy

    , refresh: function () {
        var self = this
          , $targets

        this.offsets = $([])
        this.targets = $([])

        $targets = this.$body
          .find(this.selector)
          .map(function () {
            var $el = $(this)
              , href = $el.data('target') || $el.attr('href')
              , $href = /^#\w/.test(href) && $(href)
            return ( $href
              && $href.length
              && [[ $href.position().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]] ) || null
          })
          .sort(function (a, b) { return a[0] - b[0] })
          .each(function () {
            self.offsets.push(this[0])
            self.targets.push(this[1])
          })
      }

    , process: function () {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
          , maxScroll = scrollHeight - this.$scrollElement.height()
          , offsets = this.offsets
          , targets = this.targets
          , activeTarget = this.activeTarget
          , i

        if (scrollTop >= maxScroll) {
          return activeTarget != (i = targets.last()[0])
            && this.activate ( i )
        }

        for (i = offsets.length; i--;) {
          activeTarget != targets[i]
            && scrollTop >= offsets[i]
            && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
            && this.activate( targets[i] )
        }
      }

    , activate: function (target) {
        var active
          , selector

        this.activeTarget = target

        $(this.selector)
          .parent('.active')
          .removeClass('active')

        selector = this.selector
          + '[data-target="' + target + '"],'
          + this.selector + '[href="' + target + '"]'

        active = $(selector)
          .parent('li')
          .addClass('active')

        if (active.parent('.dropdown-menu').length)  {
          active = active.closest('li.dropdown').addClass('active')
        }

        active.trigger('activate')
      }

  }


 /* SCROLLSPY PLUGIN DEFINITION
  * =========================== */

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('scrollspy')
        , options = typeof option == 'object' && option
      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy

  $.fn.scrollspy.defaults = {
    offset: 10
  }


 /* SCROLLSPY NO CONFLICT
  * ===================== */

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


 /* SCROLLSPY DATA-API
  * ================== */

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(window.jQuery);/* ========================================================
 * bootstrap-tab.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TAB CLASS DEFINITION
  * ==================== */

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype = {

    constructor: Tab

  , show: function () {
      var $this = this.element
        , $ul = $this.closest('ul:not(.dropdown-menu)')
        , selector = $this.attr('data-target')
        , previous
        , $target
        , e

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      if ( $this.parent('li').hasClass('active') ) return

      previous = $ul.find('.active:last a')[0]

      e = $.Event('show', {
        relatedTarget: previous
      })

      $this.trigger(e)

      if (e.isDefaultPrevented()) return

      $target = $(selector)

      this.activate($this.parent('li'), $ul)
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown'
        , relatedTarget: previous
        })
      })
    }

  , activate: function ( element, container, callback) {
      var $active = container.find('> .active')
        , transition = callback
            && $.support.transition
            && $active.hasClass('fade')

      function next() {
        $active
          .removeClass('active')
          .find('> .dropdown-menu > .active')
          .removeClass('active')

        element.addClass('active')

        if (transition) {
          element[0].offsetWidth // reflow for transition
          element.addClass('in')
        } else {
          element.removeClass('fade')
        }

        if ( element.parent('.dropdown-menu') ) {
          element.closest('li.dropdown').addClass('active')
        }

        callback && callback()
      }

      transition ?
        $active.one($.support.transition.end, next) :
        next()

      $active.removeClass('in')
    }
  }


 /* TAB PLUGIN DEFINITION
  * ===================== */

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tab')
      if (!data) $this.data('tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


 /* TAB NO CONFLICT
  * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


 /* TAB DATA-API
  * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-affix.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#affix
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* AFFIX CLASS DEFINITION
  * ====================== */

  var Affix = function (element, options) {
    this.options = $.extend({}, $.fn.affix.defaults, options)
    this.$window = $(window)
      .on('scroll.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.affix.data-api',  $.proxy(function () { setTimeout($.proxy(this.checkPosition, this), 1) }, this))
    this.$element = $(element)
    this.checkPosition()
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
      , scrollTop = this.$window.scrollTop()
      , position = this.$element.offset()
      , offset = this.options.offset
      , offsetBottom = offset.bottom
      , offsetTop = offset.top
      , reset = 'affix affix-top affix-bottom'
      , affix

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    affix = this.unpin != null && (scrollTop + this.unpin <= position.top) ?
      false    : offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ?
      'bottom' : offsetTop != null && scrollTop <= offsetTop ?
      'top'    : false

    if (this.affixed === affix) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''))
  }


 /* AFFIX PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('affix')
        , options = typeof option == 'object' && option
      if (!data) $this.data('affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix

  $.fn.affix.defaults = {
    offset: 0
  }


 /* AFFIX NO CONFLICT
  * ================= */

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


 /* AFFIX DATA-API
  * ============== */

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
        , data = $spy.data()

      data.offset = data.offset || {}

      data.offsetBottom && (data.offset.bottom = data.offsetBottom)
      data.offsetTop && (data.offset.top = data.offsetTop)

      $spy.affix(data)
    })
  })


}(window.jQuery);
